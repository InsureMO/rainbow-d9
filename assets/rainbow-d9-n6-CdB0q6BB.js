var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
import { Q as typescriptExports, R as Facet, S as combineConfig, U as autocompletion, X as ts, Y as hoverTooltip, L as linter, y as EditorView, u as syntaxTree, a as color, z as EditorState, A as basicSetup, Z as indentUnit, B as keymap, C as indentWithTab, K as lintGutter, P as Compartment, G as javascript, _ as jsYaml, $ as sql$1, a0 as dom2image } from "./vendor-b7jaxIZb.js";
import { C as CssVars, f as CssConstants, I as IntlLabel, D as DOM_KEY_WIDGET, d as utils$2, g as UnwrappedCheckbox, h as UnwrappedDropdown, O as OptionItemSort, j as UnwrappedInput, k as UnwrappedCaption, l as UnwrappedTextarea, m as UnwrappedDecorateInput, n as UnwrappedCheckboxes, b as useGlobalHandlers } from "./rainbow-d9-n2-C_aquQ7r.js";
import { R as React, r as reactExports, q as qe, W as We, D as DefaultLinkModel, P as PortWidget, b as PortModelAlignment, c as PortModel, N as NodeModel, C as CanvasWidget, d as DiagramEngine, e as NodeLayerFactory, L as LinkLayerFactory, S as SelectionBoxLayerFactory, f as DefaultLabelFactory, g as DefaultNodeFactory, h as DefaultLinkFactory, i as PathFindingLinkFactory, j as DefaultPortFactory, k as DiagramModel, l as State, m as SelectingState, A as AbstractModelFactory, n as AbstractReactFactory, o as LinkWidget, p as DefaultLinkPointWidget, s as DefaultLinkSegmentWidget } from "./react-base-C7AL8Cn_.js";
import { V as VUtils, a as useThrottler, r as registerWidget, g as useCreateEventBus, u as useRootEventBus, R as RootEventTypes, e as useForceUpdate, M as MUtils, P as PPUtils } from "./rainbow-d9-n1-Bx1Duf29.js";
import { i as index$1 } from "./rainbow-d9-n3-D0amxpro.js";
import { M as Markdown } from "./react-markdown-BpWVQpAA.js";
import { r as remarkGfm } from "./remark-DTcQTwBO.js";
import { h as highlighter, p as prism } from "./react-syntax-highlighter-BHcr0vSM.js";
const dts$1m = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/**\n * The decorator context types provided to class element decorators.\n */\ntype ClassMemberDecoratorContext =\n    | ClassMethodDecoratorContext\n    | ClassGetterDecoratorContext\n    | ClassSetterDecoratorContext\n    | ClassFieldDecoratorContext\n    | ClassAccessorDecoratorContext;\n\n/**\n * The decorator context types provided to any decorator.\n */\ntype DecoratorContext =\n    | ClassDecoratorContext\n    | ClassMemberDecoratorContext;\n\ntype DecoratorMetadataObject = Record<PropertyKey, unknown> & object;\n\ntype DecoratorMetadata = typeof globalThis extends { Symbol: { readonly metadata: symbol; }; } ? DecoratorMetadataObject : DecoratorMetadataObject | undefined;\n\n/**\n * Context provided to a class decorator.\n * @template Class The type of the decorated class associated with this context.\n */\ninterface ClassDecoratorContext<\n    Class extends abstract new (...args: any) => any = abstract new (...args: any) => any,\n> {\n    /** The kind of element that was decorated. */\n    readonly kind: "class";\n\n    /** The name of the decorated class. */\n    readonly name: string | undefined;\n\n    /**\n     * Adds a callback to be invoked after the class definition has been finalized.\n     *\n     * @example\n     * ```ts\n     * function customElement(name: string): ClassDecoratorFunction {\n     *   return (target, context) => {\n     *     context.addInitializer(function () {\n     *       customElements.define(name, this);\n     *     });\n     *   }\n     * }\n     *\n     * @customElement("my-element")\n     * class MyElement {}\n     * ```\n     */\n    addInitializer(initializer: (this: Class) => void): void;\n\n    readonly metadata: DecoratorMetadata;\n}\n\n/**\n * Context provided to a class method decorator.\n * @template This The type on which the class element will be defined. For a static class element, this will be\n * the type of the constructor. For a non-static class element, this will be the type of the instance.\n * @template Value The type of the decorated class method.\n */\ninterface ClassMethodDecoratorContext<\n    This = unknown,\n    Value extends (this: This, ...args: any) => any = (this: This, ...args: any) => any,\n> {\n    /** The kind of class element that was decorated. */\n    readonly kind: "method";\n\n    /** The name of the decorated class element. */\n    readonly name: string | symbol;\n\n    /** A value indicating whether the class element is a static (`true`) or instance (`false`) element. */\n    readonly static: boolean;\n\n    /** A value indicating whether the class element has a private name. */\n    readonly private: boolean;\n\n    /** An object that can be used to access the current value of the class element at runtime. */\n    readonly access: {\n        /**\n         * Determines whether an object has a property with the same name as the decorated element.\n         */\n        has(object: This): boolean;\n        /**\n         * Gets the current value of the method from the provided object.\n         *\n         * @example\n         * let fn = context.access.get(instance);\n         */\n        get(object: This): Value;\n    };\n\n    /**\n     * Adds a callback to be invoked either before static initializers are run (when\n     * decorating a `static` element), or before instance initializers are run (when\n     * decorating a non-`static` element).\n     *\n     * @example\n     * ```ts\n     * const bound: ClassMethodDecoratorFunction = (value, context) {\n     *   if (context.private) throw new TypeError("Not supported on private methods.");\n     *   context.addInitializer(function () {\n     *     this[context.name] = this[context.name].bind(this);\n     *   });\n     * }\n     *\n     * class C {\n     *   message = "Hello";\n     *\n     *   @bound\n     *   m() {\n     *     console.log(this.message);\n     *   }\n     * }\n     * ```\n     */\n    addInitializer(initializer: (this: This) => void): void;\n\n    readonly metadata: DecoratorMetadata;\n}\n\n/**\n * Context provided to a class getter decorator.\n * @template This The type on which the class element will be defined. For a static class element, this will be\n * the type of the constructor. For a non-static class element, this will be the type of the instance.\n * @template Value The property type of the decorated class getter.\n */\ninterface ClassGetterDecoratorContext<\n    This = unknown,\n    Value = unknown,\n> {\n    /** The kind of class element that was decorated. */\n    readonly kind: "getter";\n\n    /** The name of the decorated class element. */\n    readonly name: string | symbol;\n\n    /** A value indicating whether the class element is a static (`true`) or instance (`false`) element. */\n    readonly static: boolean;\n\n    /** A value indicating whether the class element has a private name. */\n    readonly private: boolean;\n\n    /** An object that can be used to access the current value of the class element at runtime. */\n    readonly access: {\n        /**\n         * Determines whether an object has a property with the same name as the decorated element.\n         */\n        has(object: This): boolean;\n        /**\n         * Invokes the getter on the provided object.\n         *\n         * @example\n         * let value = context.access.get(instance);\n         */\n        get(object: This): Value;\n    };\n\n    /**\n     * Adds a callback to be invoked either before static initializers are run (when\n     * decorating a `static` element), or before instance initializers are run (when\n     * decorating a non-`static` element).\n     */\n    addInitializer(initializer: (this: This) => void): void;\n\n    readonly metadata: DecoratorMetadata;\n}\n\n/**\n * Context provided to a class setter decorator.\n * @template This The type on which the class element will be defined. For a static class element, this will be\n * the type of the constructor. For a non-static class element, this will be the type of the instance.\n * @template Value The type of the decorated class setter.\n */\ninterface ClassSetterDecoratorContext<\n    This = unknown,\n    Value = unknown,\n> {\n    /** The kind of class element that was decorated. */\n    readonly kind: "setter";\n\n    /** The name of the decorated class element. */\n    readonly name: string | symbol;\n\n    /** A value indicating whether the class element is a static (`true`) or instance (`false`) element. */\n    readonly static: boolean;\n\n    /** A value indicating whether the class element has a private name. */\n    readonly private: boolean;\n\n    /** An object that can be used to access the current value of the class element at runtime. */\n    readonly access: {\n        /**\n         * Determines whether an object has a property with the same name as the decorated element.\n         */\n        has(object: This): boolean;\n        /**\n         * Invokes the setter on the provided object.\n         *\n         * @example\n         * context.access.set(instance, value);\n         */\n        set(object: This, value: Value): void;\n    };\n\n    /**\n     * Adds a callback to be invoked either before static initializers are run (when\n     * decorating a `static` element), or before instance initializers are run (when\n     * decorating a non-`static` element).\n     */\n    addInitializer(initializer: (this: This) => void): void;\n\n    readonly metadata: DecoratorMetadata;\n}\n\n/**\n * Context provided to a class `accessor` field decorator.\n * @template This The type on which the class element will be defined. For a static class element, this will be\n * the type of the constructor. For a non-static class element, this will be the type of the instance.\n * @template Value The type of decorated class field.\n */\ninterface ClassAccessorDecoratorContext<\n    This = unknown,\n    Value = unknown,\n> {\n    /** The kind of class element that was decorated. */\n    readonly kind: "accessor";\n\n    /** The name of the decorated class element. */\n    readonly name: string | symbol;\n\n    /** A value indicating whether the class element is a static (`true`) or instance (`false`) element. */\n    readonly static: boolean;\n\n    /** A value indicating whether the class element has a private name. */\n    readonly private: boolean;\n\n    /** An object that can be used to access the current value of the class element at runtime. */\n    readonly access: {\n        /**\n         * Determines whether an object has a property with the same name as the decorated element.\n         */\n        has(object: This): boolean;\n\n        /**\n         * Invokes the getter on the provided object.\n         *\n         * @example\n         * let value = context.access.get(instance);\n         */\n        get(object: This): Value;\n\n        /**\n         * Invokes the setter on the provided object.\n         *\n         * @example\n         * context.access.set(instance, value);\n         */\n        set(object: This, value: Value): void;\n    };\n\n    /**\n     * Adds a callback to be invoked either before static initializers are run (when\n     * decorating a `static` element), or before instance initializers are run (when\n     * decorating a non-`static` element).\n     */\n    addInitializer(initializer: (this: This) => void): void;\n\n    readonly metadata: DecoratorMetadata;\n}\n\n/**\n * Describes the target provided to class `accessor` field decorators.\n * @template This The `this` type to which the target applies.\n * @template Value The property type for the class `accessor` field.\n */\ninterface ClassAccessorDecoratorTarget<This, Value> {\n    /**\n     * Invokes the getter that was defined prior to decorator application.\n     *\n     * @example\n     * let value = target.get.call(instance);\n     */\n    get(this: This): Value;\n\n    /**\n     * Invokes the setter that was defined prior to decorator application.\n     *\n     * @example\n     * target.set.call(instance, value);\n     */\n    set(this: This, value: Value): void;\n}\n\n/**\n * Describes the allowed return value from a class `accessor` field decorator.\n * @template This The `this` type to which the target applies.\n * @template Value The property type for the class `accessor` field.\n */\ninterface ClassAccessorDecoratorResult<This, Value> {\n    /**\n     * An optional replacement getter function. If not provided, the existing getter function is used instead.\n     */\n    get?(this: This): Value;\n\n    /**\n     * An optional replacement setter function. If not provided, the existing setter function is used instead.\n     */\n    set?(this: This, value: Value): void;\n\n    /**\n     * An optional initializer mutator that is invoked when the underlying field initializer is evaluated.\n     * @param value The incoming initializer value.\n     * @returns The replacement initializer value.\n     */\n    init?(this: This, value: Value): Value;\n}\n\n/**\n * Context provided to a class field decorator.\n * @template This The type on which the class element will be defined. For a static class element, this will be\n * the type of the constructor. For a non-static class element, this will be the type of the instance.\n * @template Value The type of the decorated class field.\n */\ninterface ClassFieldDecoratorContext<\n    This = unknown,\n    Value = unknown,\n> {\n    /** The kind of class element that was decorated. */\n    readonly kind: "field";\n\n    /** The name of the decorated class element. */\n    readonly name: string | symbol;\n\n    /** A value indicating whether the class element is a static (`true`) or instance (`false`) element. */\n    readonly static: boolean;\n\n    /** A value indicating whether the class element has a private name. */\n    readonly private: boolean;\n\n    /** An object that can be used to access the current value of the class element at runtime. */\n    readonly access: {\n        /**\n         * Determines whether an object has a property with the same name as the decorated element.\n         */\n        has(object: This): boolean;\n\n        /**\n         * Gets the value of the field on the provided object.\n         */\n        get(object: This): Value;\n\n        /**\n         * Sets the value of the field on the provided object.\n         */\n        set(object: This, value: Value): void;\n    };\n\n    /**\n     * Adds a callback to be invoked either before static initializers are run (when\n     * decorating a `static` element), or before instance initializers are run (when\n     * decorating a non-`static` element).\n     */\n    addInitializer(initializer: (this: This) => void): void;\n\n    readonly metadata: DecoratorMetadata;\n}\n';
const dts$1l = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;\ndeclare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;\ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\ndeclare type ParameterDecorator = (target: Object, propertyKey: string | symbol | undefined, parameterIndex: number) => void;\n';
const dts$1k = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es5" />\n/// <reference lib="dom" />\n/// <reference lib="webworker.importscripts" />\n/// <reference lib="scripthost" />\n';
const dts$1j = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="decorators" />\n/// <reference lib="decorators.legacy" />\n\n/////////////////////////////\n/// ECMAScript APIs\n/////////////////////////////\n\ndeclare var NaN: number;\ndeclare var Infinity: number;\n\n/**\n * Evaluates JavaScript code and executes it.\n * @param x A String value that contains valid JavaScript code.\n */\ndeclare function eval(x: string): any;\n\n/**\n * Converts a string to an integer.\n * @param string A string to convert into a number.\n * @param radix A value between 2 and 36 that specifies the base of the number in `string`.\n * If this argument is not supplied, strings with a prefix of \'0x\' are considered hexadecimal.\n * All other strings are considered decimal.\n */\ndeclare function parseInt(string: string, radix?: number): number;\n\n/**\n * Converts a string to a floating-point number.\n * @param string A string that contains a floating-point number.\n */\ndeclare function parseFloat(string: string): number;\n\n/**\n * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).\n * @param number A numeric value.\n */\ndeclare function isNaN(number: number): boolean;\n\n/**\n * Determines whether a supplied number is finite.\n * @param number Any numeric value.\n */\ndeclare function isFinite(number: number): boolean;\n\n/**\n * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\n * @param encodedURI A value representing an encoded URI.\n */\ndeclare function decodeURI(encodedURI: string): string;\n\n/**\n * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\n * @param encodedURIComponent A value representing an encoded URI component.\n */\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\n\n/**\n * Encodes a text string as a valid Uniform Resource Identifier (URI)\n * @param uri A value representing an unencoded URI.\n */\ndeclare function encodeURI(uri: string): string;\n\n/**\n * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\n * @param uriComponent A value representing an unencoded URI component.\n */\ndeclare function encodeURIComponent(uriComponent: string | number | boolean): string;\n\n/**\n * Computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.\n * @deprecated A legacy feature for browser compatibility\n * @param string A string value\n */\ndeclare function escape(string: string): string;\n\n/**\n * Computes a new string in which hexadecimal escape sequences are replaced with the character that it represents.\n * @deprecated A legacy feature for browser compatibility\n * @param string A string value\n */\ndeclare function unescape(string: string): string;\n\ninterface Symbol {\n    /** Returns a string representation of an object. */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): symbol;\n}\n\ndeclare type PropertyKey = string | number | symbol;\n\ninterface PropertyDescriptor {\n    configurable?: boolean;\n    enumerable?: boolean;\n    value?: any;\n    writable?: boolean;\n    get?(): any;\n    set?(v: any): void;\n}\n\ninterface PropertyDescriptorMap {\n    [key: PropertyKey]: PropertyDescriptor;\n}\n\ninterface Object {\n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\n    constructor: Function;\n\n    /** Returns a string representation of an object. */\n    toString(): string;\n\n    /** Returns a date converted to a string using the current locale. */\n    toLocaleString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Object;\n\n    /**\n     * Determines whether an object has a property with the specified name.\n     * @param v A property name.\n     */\n    hasOwnProperty(v: PropertyKey): boolean;\n\n    /**\n     * Determines whether an object exists in another object\'s prototype chain.\n     * @param v Another object whose prototype chain is to be checked.\n     */\n    isPrototypeOf(v: Object): boolean;\n\n    /**\n     * Determines whether a specified property is enumerable.\n     * @param v A property name.\n     */\n    propertyIsEnumerable(v: PropertyKey): boolean;\n}\n\ninterface ObjectConstructor {\n    new (value?: any): Object;\n    (): any;\n    (value: any): any;\n\n    /** A reference to the prototype for a class of objects. */\n    readonly prototype: Object;\n\n    /**\n     * Returns the prototype of an object.\n     * @param o The object that references the prototype.\n     */\n    getPrototypeOf(o: any): any;\n\n    /**\n     * Gets the own property descriptor of the specified object.\n     * An own property descriptor is one that is defined directly on the object and is not inherited from the object\'s prototype.\n     * @param o Object that contains the property.\n     * @param p Name of the property.\n     */\n    getOwnPropertyDescriptor(o: any, p: PropertyKey): PropertyDescriptor | undefined;\n\n    /**\n     * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\n     * on that object, and are not inherited from the object\'s prototype. The properties of an object include both fields (objects) and functions.\n     * @param o Object that contains the own properties.\n     */\n    getOwnPropertyNames(o: any): string[];\n\n    /**\n     * Creates an object that has the specified prototype or that has null prototype.\n     * @param o Object to use as a prototype. May be null.\n     */\n    create(o: object | null): any;\n\n    /**\n     * Creates an object that has the specified prototype, and that optionally contains specified properties.\n     * @param o Object to use as a prototype. May be null\n     * @param properties JavaScript object that contains one or more property descriptors.\n     */\n    create(o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;\n\n    /**\n     * Adds a property to an object, or modifies attributes of an existing property.\n     * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\n     * @param p The property name.\n     * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\n     */\n    defineProperty<T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): T;\n\n    /**\n     * Adds one or more properties to an object, and/or modifies attributes of existing properties.\n     * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\n     * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\n     */\n    defineProperties<T>(o: T, properties: PropertyDescriptorMap & ThisType<any>): T;\n\n    /**\n     * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\n     * @param o Object on which to lock the attributes.\n     */\n    seal<T>(o: T): T;\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param f Object on which to lock the attributes.\n     */\n    freeze<T extends Function>(f: T): T;\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param o Object on which to lock the attributes.\n     */\n    freeze<T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>;\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param o Object on which to lock the attributes.\n     */\n    freeze<T>(o: T): Readonly<T>;\n\n    /**\n     * Prevents the addition of new properties to an object.\n     * @param o Object to make non-extensible.\n     */\n    preventExtensions<T>(o: T): T;\n\n    /**\n     * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\n     * @param o Object to test.\n     */\n    isSealed(o: any): boolean;\n\n    /**\n     * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\n     * @param o Object to test.\n     */\n    isFrozen(o: any): boolean;\n\n    /**\n     * Returns a value that indicates whether new properties can be added to an object.\n     * @param o Object to test.\n     */\n    isExtensible(o: any): boolean;\n\n    /**\n     * Returns the names of the enumerable string properties and methods of an object.\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    keys(o: object): string[];\n}\n\n/**\n * Provides functionality common to all JavaScript objects.\n */\ndeclare var Object: ObjectConstructor;\n\n/**\n * Creates a new function.\n */\ninterface Function {\n    /**\n     * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\n     * @param thisArg The object to be used as the this object.\n     * @param argArray A set of arguments to be passed to the function.\n     */\n    apply(this: Function, thisArg: any, argArray?: any): any;\n\n    /**\n     * Calls a method of an object, substituting another object for the current object.\n     * @param thisArg The object to be used as the current object.\n     * @param argArray A list of arguments to be passed to the method.\n     */\n    call(this: Function, thisArg: any, ...argArray: any[]): any;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg An object to which the this keyword can refer inside the new function.\n     * @param argArray A list of arguments to be passed to the new function.\n     */\n    bind(this: Function, thisArg: any, ...argArray: any[]): any;\n\n    /** Returns a string representation of a function. */\n    toString(): string;\n\n    prototype: any;\n    readonly length: number;\n\n    // Non-standard extensions\n    arguments: any;\n    caller: Function;\n}\n\ninterface FunctionConstructor {\n    /**\n     * Creates a new function.\n     * @param args A list of arguments the function accepts.\n     */\n    new (...args: string[]): Function;\n    (...args: string[]): Function;\n    readonly prototype: Function;\n}\n\ndeclare var Function: FunctionConstructor;\n\n/**\n * Extracts the type of the \'this\' parameter of a function type, or \'unknown\' if the function type has no \'this\' parameter.\n */\ntype ThisParameterType<T> = T extends (this: infer U, ...args: never) => any ? U : unknown;\n\n/**\n * Removes the \'this\' parameter from a function type.\n */\ntype OmitThisParameter<T> = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T;\n\ninterface CallableFunction extends Function {\n    /**\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n     * @param thisArg The object to be used as the this object.\n     */\n    apply<T, R>(this: (this: T) => R, thisArg: T): R;\n\n    /**\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n     * @param thisArg The object to be used as the this object.\n     * @param args An array of argument values to be passed to the function.\n     */\n    apply<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R;\n\n    /**\n     * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\n     * @param thisArg The object to be used as the this object.\n     * @param args Argument values to be passed to the function.\n     */\n    call<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A): R;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg The object to be used as the this object.\n     */\n    bind<T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg The object to be used as the this object.\n     * @param args Arguments to bind to the parameters of the function.\n     */\n    bind<T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R;\n}\n\ninterface NewableFunction extends Function {\n    /**\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n     * @param thisArg The object to be used as the this object.\n     */\n    apply<T>(this: new () => T, thisArg: T): void;\n    /**\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n     * @param thisArg The object to be used as the this object.\n     * @param args An array of argument values to be passed to the function.\n     */\n    apply<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, args: A): void;\n\n    /**\n     * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\n     * @param thisArg The object to be used as the this object.\n     * @param args Argument values to be passed to the function.\n     */\n    call<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, ...args: A): void;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg The object to be used as the this object.\n     */\n    bind<T>(this: T, thisArg: any): T;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg The object to be used as the this object.\n     * @param args Arguments to bind to the parameters of the function.\n     */\n    bind<A extends any[], B extends any[], R>(this: new (...args: [...A, ...B]) => R, thisArg: any, ...args: A): new (...args: B) => R;\n}\n\ninterface IArguments {\n    [index: number]: any;\n    length: number;\n    callee: Function;\n}\n\ninterface String {\n    /** Returns a string representation of a string. */\n    toString(): string;\n\n    /**\n     * Returns the character at the specified index.\n     * @param pos The zero-based index of the desired character.\n     */\n    charAt(pos: number): string;\n\n    /**\n     * Returns the Unicode value of the character at the specified location.\n     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\n     */\n    charCodeAt(index: number): number;\n\n    /**\n     * Returns a string that contains the concatenation of two or more strings.\n     * @param strings The strings to append to the end of the string.\n     */\n    concat(...strings: string[]): string;\n\n    /**\n     * Returns the position of the first occurrence of a substring.\n     * @param searchString The substring to search for in the string\n     * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\n     */\n    indexOf(searchString: string, position?: number): number;\n\n    /**\n     * Returns the last occurrence of a substring in the string.\n     * @param searchString The substring to search for.\n     * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\n     */\n    lastIndexOf(searchString: string, position?: number): number;\n\n    /**\n     * Determines whether two strings are equivalent in the current locale.\n     * @param that String to compare to target string\n     */\n    localeCompare(that: string): number;\n\n    /**\n     * Matches a string with a regular expression, and returns an array containing the results of that search.\n     * @param regexp A variable name or string literal containing the regular expression pattern and flags.\n     */\n    match(regexp: string | RegExp): RegExpMatchArray | null;\n\n    /**\n     * Replaces text in a string, using a regular expression or search string.\n     * @param searchValue A string or regular expression to search for.\n     * @param replaceValue A string containing the text to replace. When the {@linkcode searchValue} is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of {@linkcode searchValue} is replaced.\n     */\n    replace(searchValue: string | RegExp, replaceValue: string): string;\n\n    /**\n     * Replaces text in a string, using a regular expression or search string.\n     * @param searchValue A string to search for.\n     * @param replacer A function that returns the replacement text.\n     */\n    replace(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;\n\n    /**\n     * Finds the first substring match in a regular expression search.\n     * @param regexp The regular expression pattern and applicable flags.\n     */\n    search(regexp: string | RegExp): number;\n\n    /**\n     * Returns a section of a string.\n     * @param start The index to the beginning of the specified portion of stringObj.\n     * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\n     * If this value is not specified, the substring continues to the end of stringObj.\n     */\n    slice(start?: number, end?: number): string;\n\n    /**\n     * Split a string into substrings using the specified separator and return them as an array.\n     * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n     * @param limit A value used to limit the number of elements returned in the array.\n     */\n    split(separator: string | RegExp, limit?: number): string[];\n\n    /**\n     * Returns the substring at the specified location within a String object.\n     * @param start The zero-based index number indicating the beginning of the substring.\n     * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\n     * If end is omitted, the characters from start through the end of the original string are returned.\n     */\n    substring(start: number, end?: number): string;\n\n    /** Converts all the alphabetic characters in a string to lowercase. */\n    toLowerCase(): string;\n\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment\'s current locale. */\n    toLocaleLowerCase(locales?: string | string[]): string;\n\n    /** Converts all the alphabetic characters in a string to uppercase. */\n    toUpperCase(): string;\n\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment\'s current locale. */\n    toLocaleUpperCase(locales?: string | string[]): string;\n\n    /** Removes the leading and trailing white space and line terminator characters from a string. */\n    trim(): string;\n\n    /** Returns the length of a String object. */\n    readonly length: number;\n\n    // IE extensions\n    /**\n     * Gets a substring beginning at the specified location and having the specified length.\n     * @deprecated A legacy feature for browser compatibility\n     * @param from The starting position of the desired substring. The index of the first character in the string is zero.\n     * @param length The number of characters to include in the returned substring.\n     */\n    substr(from: number, length?: number): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): string;\n\n    readonly [index: number]: string;\n}\n\ninterface StringConstructor {\n    new (value?: any): String;\n    (value?: any): string;\n    readonly prototype: String;\n    fromCharCode(...codes: number[]): string;\n}\n\n/**\n * Allows manipulation and formatting of text strings and determination and location of substrings within strings.\n */\ndeclare var String: StringConstructor;\n\ninterface Boolean {\n    /** Returns the primitive value of the specified object. */\n    valueOf(): boolean;\n}\n\ninterface BooleanConstructor {\n    new (value?: any): Boolean;\n    <T>(value?: T): boolean;\n    readonly prototype: Boolean;\n}\n\ndeclare var Boolean: BooleanConstructor;\n\ninterface Number {\n    /**\n     * Returns a string representation of an object.\n     * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\n     */\n    toString(radix?: number): string;\n\n    /**\n     * Returns a string representing a number in fixed-point notation.\n     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n     */\n    toFixed(fractionDigits?: number): string;\n\n    /**\n     * Returns a string containing a number represented in exponential notation.\n     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n     */\n    toExponential(fractionDigits?: number): string;\n\n    /**\n     * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n     * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\n     */\n    toPrecision(precision?: number): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): number;\n}\n\ninterface NumberConstructor {\n    new (value?: any): Number;\n    (value?: any): number;\n    readonly prototype: Number;\n\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\n    readonly MAX_VALUE: number;\n\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\n    readonly MIN_VALUE: number;\n\n    /**\n     * A value that is not a number.\n     * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\n     */\n    readonly NaN: number;\n\n    /**\n     * A value that is less than the largest negative number that can be represented in JavaScript.\n     * JavaScript displays NEGATIVE_INFINITY values as -infinity.\n     */\n    readonly NEGATIVE_INFINITY: number;\n\n    /**\n     * A value greater than the largest number that can be represented in JavaScript.\n     * JavaScript displays POSITIVE_INFINITY values as infinity.\n     */\n    readonly POSITIVE_INFINITY: number;\n}\n\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\ndeclare var Number: NumberConstructor;\n\ninterface TemplateStringsArray extends ReadonlyArray<string> {\n    readonly raw: readonly string[];\n}\n\n/**\n * The type of `import.meta`.\n *\n * If you need to declare that a given property exists on `import.meta`,\n * this type may be augmented via interface merging.\n */\ninterface ImportMeta {\n}\n\n/**\n * The type for the optional second argument to `import()`.\n *\n * If your host environment supports additional options, this type may be\n * augmented via interface merging.\n */\ninterface ImportCallOptions {\n    /** @deprecated*/ assert?: ImportAssertions;\n    with?: ImportAttributes;\n}\n\n/**\n * The type for the `assert` property of the optional second argument to `import()`.\n * @deprecated\n */\ninterface ImportAssertions {\n    [key: string]: string;\n}\n\n/**\n * The type for the `with` property of the optional second argument to `import()`.\n */\ninterface ImportAttributes {\n    [key: string]: string;\n}\n\ninterface Math {\n    /** The mathematical constant e. This is Euler\'s number, the base of natural logarithms. */\n    readonly E: number;\n    /** The natural logarithm of 10. */\n    readonly LN10: number;\n    /** The natural logarithm of 2. */\n    readonly LN2: number;\n    /** The base-2 logarithm of e. */\n    readonly LOG2E: number;\n    /** The base-10 logarithm of e. */\n    readonly LOG10E: number;\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\n    readonly PI: number;\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\n    readonly SQRT1_2: number;\n    /** The square root of 2. */\n    readonly SQRT2: number;\n    /**\n     * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\n     * For example, the absolute value of -5 is the same as the absolute value of 5.\n     * @param x A numeric expression for which the absolute value is needed.\n     */\n    abs(x: number): number;\n    /**\n     * Returns the arc cosine (or inverse cosine) of a number.\n     * @param x A numeric expression.\n     */\n    acos(x: number): number;\n    /**\n     * Returns the arcsine of a number.\n     * @param x A numeric expression.\n     */\n    asin(x: number): number;\n    /**\n     * Returns the arctangent of a number.\n     * @param x A numeric expression for which the arctangent is needed.\n     */\n    atan(x: number): number;\n    /**\n     * Returns the angle (in radians) from the X axis to a point.\n     * @param y A numeric expression representing the cartesian y-coordinate.\n     * @param x A numeric expression representing the cartesian x-coordinate.\n     */\n    atan2(y: number, x: number): number;\n    /**\n     * Returns the smallest integer greater than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    ceil(x: number): number;\n    /**\n     * Returns the cosine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    cos(x: number): number;\n    /**\n     * Returns e (the base of natural logarithms) raised to a power.\n     * @param x A numeric expression representing the power of e.\n     */\n    exp(x: number): number;\n    /**\n     * Returns the greatest integer less than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    floor(x: number): number;\n    /**\n     * Returns the natural logarithm (base e) of a number.\n     * @param x A numeric expression.\n     */\n    log(x: number): number;\n    /**\n     * Returns the larger of a set of supplied numeric expressions.\n     * @param values Numeric expressions to be evaluated.\n     */\n    max(...values: number[]): number;\n    /**\n     * Returns the smaller of a set of supplied numeric expressions.\n     * @param values Numeric expressions to be evaluated.\n     */\n    min(...values: number[]): number;\n    /**\n     * Returns the value of a base expression taken to a specified power.\n     * @param x The base value of the expression.\n     * @param y The exponent value of the expression.\n     */\n    pow(x: number, y: number): number;\n    /** Returns a pseudorandom number between 0 and 1. */\n    random(): number;\n    /**\n     * Returns a supplied numeric expression rounded to the nearest integer.\n     * @param x The value to be rounded to the nearest integer.\n     */\n    round(x: number): number;\n    /**\n     * Returns the sine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    sin(x: number): number;\n    /**\n     * Returns the square root of a number.\n     * @param x A numeric expression.\n     */\n    sqrt(x: number): number;\n    /**\n     * Returns the tangent of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    tan(x: number): number;\n}\n/** An intrinsic object that provides basic mathematics functionality and constants. */\ndeclare var Math: Math;\n\n/** Enables basic storage and retrieval of dates and times. */\ninterface Date {\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\n    toString(): string;\n    /** Returns a date as a string value. */\n    toDateString(): string;\n    /** Returns a time as a string value. */\n    toTimeString(): string;\n    /** Returns a value as a string value appropriate to the host environment\'s current locale. */\n    toLocaleString(): string;\n    /** Returns a date as a string value appropriate to the host environment\'s current locale. */\n    toLocaleDateString(): string;\n    /** Returns a time as a string value appropriate to the host environment\'s current locale. */\n    toLocaleTimeString(): string;\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\n    valueOf(): number;\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\n    getTime(): number;\n    /** Gets the year, using local time. */\n    getFullYear(): number;\n    /** Gets the year using Universal Coordinated Time (UTC). */\n    getUTCFullYear(): number;\n    /** Gets the month, using local time. */\n    getMonth(): number;\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMonth(): number;\n    /** Gets the day-of-the-month, using local time. */\n    getDate(): number;\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\n    getUTCDate(): number;\n    /** Gets the day of the week, using local time. */\n    getDay(): number;\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\n    getUTCDay(): number;\n    /** Gets the hours in a date, using local time. */\n    getHours(): number;\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\n    getUTCHours(): number;\n    /** Gets the minutes of a Date object, using local time. */\n    getMinutes(): number;\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMinutes(): number;\n    /** Gets the seconds of a Date object, using local time. */\n    getSeconds(): number;\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\n    getUTCSeconds(): number;\n    /** Gets the milliseconds of a Date, using local time. */\n    getMilliseconds(): number;\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMilliseconds(): number;\n    /** Gets the difference in minutes between Universal Coordinated Time (UTC) and the time on the local computer. */\n    getTimezoneOffset(): number;\n    /**\n     * Sets the date and time value in the Date object.\n     * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.\n     */\n    setTime(time: number): number;\n    /**\n     * Sets the milliseconds value in the Date object using local time.\n     * @param ms A numeric value equal to the millisecond value.\n     */\n    setMilliseconds(ms: number): number;\n    /**\n     * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\n     * @param ms A numeric value equal to the millisecond value.\n     */\n    setUTCMilliseconds(ms: number): number;\n\n    /**\n     * Sets the seconds value in the Date object using local time.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setSeconds(sec: number, ms?: number): number;\n    /**\n     * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setUTCSeconds(sec: number, ms?: number): number;\n    /**\n     * Sets the minutes value in the Date object using local time.\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setMinutes(min: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setUTCMinutes(min: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the hour value in the Date object using local time.\n     * @param hours A numeric value equal to the hours value.\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setHours(hours: number, min?: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\n     * @param hours A numeric value equal to the hours value.\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the numeric day-of-the-month value of the Date object using local time.\n     * @param date A numeric value equal to the day of the month.\n     */\n    setDate(date: number): number;\n    /**\n     * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\n     * @param date A numeric value equal to the day of the month.\n     */\n    setUTCDate(date: number): number;\n    /**\n     * Sets the month value in the Date object using local time.\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n     * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\n     */\n    setMonth(month: number, date?: number): number;\n    /**\n     * Sets the month value in the Date object using Universal Coordinated Time (UTC).\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n     * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\n     */\n    setUTCMonth(month: number, date?: number): number;\n    /**\n     * Sets the year of the Date object using local time.\n     * @param year A numeric value for the year.\n     * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\n     * @param date A numeric value equal for the day of the month.\n     */\n    setFullYear(year: number, month?: number, date?: number): number;\n    /**\n     * Sets the year value in the Date object using Universal Coordinated Time (UTC).\n     * @param year A numeric value equal to the year.\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\n     * @param date A numeric value equal to the day of the month.\n     */\n    setUTCFullYear(year: number, month?: number, date?: number): number;\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\n    toUTCString(): string;\n    /** Returns a date as a string value in ISO format. */\n    toISOString(): string;\n    /** Used by the JSON.stringify method to enable the transformation of an object\'s data for JavaScript Object Notation (JSON) serialization. */\n    toJSON(key?: any): string;\n}\n\ninterface DateConstructor {\n    new (): Date;\n    new (value: number | string): Date;\n    /**\n     * Creates a new Date.\n     * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n     * @param monthIndex The month as a number between 0 and 11 (January to December).\n     * @param date The date as a number between 1 and 31.\n     * @param hours Must be supplied if minutes is supplied. A number from 0 to 23 (midnight to 11pm) that specifies the hour.\n     * @param minutes Must be supplied if seconds is supplied. A number from 0 to 59 that specifies the minutes.\n     * @param seconds Must be supplied if milliseconds is supplied. A number from 0 to 59 that specifies the seconds.\n     * @param ms A number from 0 to 999 that specifies the milliseconds.\n     */\n    new (year: number, monthIndex: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\n    (): string;\n    readonly prototype: Date;\n    /**\n     * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\n     * @param s A date string\n     */\n    parse(s: string): number;\n    /**\n     * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.\n     * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n     * @param monthIndex The month as a number between 0 and 11 (January to December).\n     * @param date The date as a number between 1 and 31.\n     * @param hours Must be supplied if minutes is supplied. A number from 0 to 23 (midnight to 11pm) that specifies the hour.\n     * @param minutes Must be supplied if seconds is supplied. A number from 0 to 59 that specifies the minutes.\n     * @param seconds Must be supplied if milliseconds is supplied. A number from 0 to 59 that specifies the seconds.\n     * @param ms A number from 0 to 999 that specifies the milliseconds.\n     */\n    UTC(year: number, monthIndex: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\n    /** Returns the number of milliseconds elapsed since midnight, January 1, 1970 Universal Coordinated Time (UTC). */\n    now(): number;\n}\n\ndeclare var Date: DateConstructor;\n\ninterface RegExpMatchArray extends Array<string> {\n    /**\n     * The index of the search at which the result was found.\n     */\n    index?: number;\n    /**\n     * A copy of the search string.\n     */\n    input?: string;\n    /**\n     * The first match. This will always be present because `null` will be returned if there are no matches.\n     */\n    0: string;\n}\n\ninterface RegExpExecArray extends Array<string> {\n    /**\n     * The index of the search at which the result was found.\n     */\n    index: number;\n    /**\n     * A copy of the search string.\n     */\n    input: string;\n    /**\n     * The first match. This will always be present because `null` will be returned if there are no matches.\n     */\n    0: string;\n}\n\ninterface RegExp {\n    /**\n     * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\n     * @param string The String object or string literal on which to perform the search.\n     */\n    exec(string: string): RegExpExecArray | null;\n\n    /**\n     * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\n     * @param string String on which to perform the search.\n     */\n    test(string: string): boolean;\n\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */\n    readonly source: string;\n\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\n    readonly global: boolean;\n\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\n    readonly ignoreCase: boolean;\n\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\n    readonly multiline: boolean;\n\n    lastIndex: number;\n\n    // Non-standard extensions\n    /** @deprecated A legacy feature for browser compatibility */\n    compile(pattern: string, flags?: string): this;\n}\n\ninterface RegExpConstructor {\n    new (pattern: RegExp | string): RegExp;\n    new (pattern: string, flags?: string): RegExp;\n    (pattern: RegExp | string): RegExp;\n    (pattern: string, flags?: string): RegExp;\n    readonly "prototype": RegExp;\n\n    // Non-standard extensions\n    /** @deprecated A legacy feature for browser compatibility */\n    "$1": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$2": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$3": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$4": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$5": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$6": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$7": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$8": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$9": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "input": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$_": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "lastMatch": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$&": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "lastParen": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$+": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "leftContext": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$`": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "rightContext": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$\'": string;\n}\n\ndeclare var RegExp: RegExpConstructor;\n\ninterface Error {\n    name: string;\n    message: string;\n    stack?: string;\n}\n\ninterface ErrorConstructor {\n    new (message?: string): Error;\n    (message?: string): Error;\n    readonly prototype: Error;\n}\n\ndeclare var Error: ErrorConstructor;\n\ninterface EvalError extends Error {\n}\n\ninterface EvalErrorConstructor extends ErrorConstructor {\n    new (message?: string): EvalError;\n    (message?: string): EvalError;\n    readonly prototype: EvalError;\n}\n\ndeclare var EvalError: EvalErrorConstructor;\n\ninterface RangeError extends Error {\n}\n\ninterface RangeErrorConstructor extends ErrorConstructor {\n    new (message?: string): RangeError;\n    (message?: string): RangeError;\n    readonly prototype: RangeError;\n}\n\ndeclare var RangeError: RangeErrorConstructor;\n\ninterface ReferenceError extends Error {\n}\n\ninterface ReferenceErrorConstructor extends ErrorConstructor {\n    new (message?: string): ReferenceError;\n    (message?: string): ReferenceError;\n    readonly prototype: ReferenceError;\n}\n\ndeclare var ReferenceError: ReferenceErrorConstructor;\n\ninterface SyntaxError extends Error {\n}\n\ninterface SyntaxErrorConstructor extends ErrorConstructor {\n    new (message?: string): SyntaxError;\n    (message?: string): SyntaxError;\n    readonly prototype: SyntaxError;\n}\n\ndeclare var SyntaxError: SyntaxErrorConstructor;\n\ninterface TypeError extends Error {\n}\n\ninterface TypeErrorConstructor extends ErrorConstructor {\n    new (message?: string): TypeError;\n    (message?: string): TypeError;\n    readonly prototype: TypeError;\n}\n\ndeclare var TypeError: TypeErrorConstructor;\n\ninterface URIError extends Error {\n}\n\ninterface URIErrorConstructor extends ErrorConstructor {\n    new (message?: string): URIError;\n    (message?: string): URIError;\n    readonly prototype: URIError;\n}\n\ndeclare var URIError: URIErrorConstructor;\n\ninterface JSON {\n    /**\n     * Converts a JavaScript Object Notation (JSON) string into an object.\n     * @param text A valid JSON string.\n     * @param reviver A function that transforms the results. This function is called for each member of the object.\n     * If a member contains nested objects, the nested objects are transformed before the parent object is.\n     */\n    parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;\n    /**\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n     * @param value A JavaScript value, usually an object or array, to be converted.\n     * @param replacer A function that transforms the results.\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;\n    /**\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n     * @param value A JavaScript value, usually an object or array, to be converted.\n     * @param replacer An array of strings and numbers that acts as an approved list for selecting the object properties that will be stringified.\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;\n}\n\n/**\n * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\n */\ndeclare var JSON: JSON;\n\n/////////////////////////////\n/// ECMAScript Array API (specially handled by compiler)\n/////////////////////////////\n\ninterface ReadonlyArray<T> {\n    /**\n     * Gets the length of the array. This is a number one higher than the highest element defined in an array.\n     */\n    readonly length: number;\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n     */\n    toLocaleString(): string;\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    concat(...items: ConcatArray<T>[]): T[];\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    concat(...items: (T | ConcatArray<T>)[]): T[];\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): T[];\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Returns the index of the last occurrence of a specified value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n     */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every<S extends T>(predicate: (value: T, index: number, array: readonly T[]) => value is S, thisArg?: any): this is readonly S[];\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: T, index: number, array: readonly T[]) => void, thisArg?: any): void;\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: readonly T[]) => U, thisArg?: any): U[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(predicate: (value: T, index: number, array: readonly T[]) => value is S, thisArg?: any): S[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): T[];\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T;\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[]) => U, initialValue: U): U;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T;\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[]) => U, initialValue: U): U;\n\n    readonly [n: number]: T;\n}\n\ninterface ConcatArray<T> {\n    readonly length: number;\n    readonly [n: number]: T;\n    join(separator?: string): string;\n    slice(start?: number, end?: number): T[];\n}\n\ninterface Array<T> {\n    /**\n     * Gets or sets the length of the array. This is a number one higher than the highest index in the array.\n     */\n    length: number;\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n     */\n    toLocaleString(): string;\n    /**\n     * Removes the last element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    pop(): T | undefined;\n    /**\n     * Appends new elements to the end of an array, and returns the new length of the array.\n     * @param items New elements to add to the array.\n     */\n    push(...items: T[]): number;\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: ConcatArray<T>[]): T[];\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: (T | ConcatArray<T>)[]): T[];\n    /**\n     * Adds all the elements of an array into a string, separated by the specified separator string.\n     * @param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n    /**\n     * Reverses the elements in an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     */\n    reverse(): T[];\n    /**\n     * Removes the first element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    shift(): T | undefined;\n    /**\n     * Returns a copy of a section of an array.\n     * For both start and end, a negative index can be used to indicate an offset from the end of the array.\n     * For example, -2 refers to the second to last element of the array.\n     * @param start The beginning index of the specified portion of the array.\n     * If start is undefined, then the slice begins at index 0.\n     * @param end The end index of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     * If end is undefined, then the slice extends to the end of the array.\n     */\n    slice(start?: number, end?: number): T[];\n    /**\n     * Sorts an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if the first argument is less than the second argument, zero if they\'re equal, and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: T, b: T) => number): this;\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount?: number): T[];\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @param items Elements to insert into the array in place of the deleted elements.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\n    /**\n     * Inserts new elements at the start of an array, and returns the new length of the array.\n     * @param items Elements to insert at the start of the array.\n     */\n    unshift(...items: T[]): number;\n    /**\n     * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.\n     */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[];\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n    [n: number]: T;\n}\n\ninterface ArrayConstructor {\n    new (arrayLength?: number): any[];\n    new <T>(arrayLength: number): T[];\n    new <T>(...items: T[]): T[];\n    (arrayLength?: number): any[];\n    <T>(arrayLength: number): T[];\n    <T>(...items: T[]): T[];\n    isArray(arg: any): arg is any[];\n    readonly prototype: any[];\n}\n\ndeclare var Array: ArrayConstructor;\n\ninterface TypedPropertyDescriptor<T> {\n    enumerable?: boolean;\n    configurable?: boolean;\n    writable?: boolean;\n    value?: T;\n    get?: () => T;\n    set?: (value: T) => void;\n}\n\ndeclare type PromiseConstructorLike = new <T>(executor: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;\n\ninterface PromiseLike<T> {\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;\n}\n\n/**\n * Represents the completion of an asynchronous operation\n */\ninterface Promise<T> {\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;\n\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;\n}\n\n/**\n * Recursively unwraps the "awaited type" of a type. Non-promise "thenables" should resolve to `never`. This emulates the behavior of `await`.\n */\ntype Awaited<T> = T extends null | undefined ? T : // special case for `null | undefined` when not in `--strictNullChecks` mode\n    T extends object & { then(onfulfilled: infer F, ...args: infer _): any; } ? // `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped\n        F extends ((value: infer V, ...args: infer _) => any) ? // if the argument to `then` is callable, extracts the first argument\n            Awaited<V> : // recursively unwrap the value\n        never : // the argument to `then` was not callable\n    T; // non-object or non-thenable\n\ninterface ArrayLike<T> {\n    readonly length: number;\n    readonly [n: number]: T;\n}\n\n/**\n * Make all properties in T optional\n */\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n\n/**\n * Make all properties in T required\n */\ntype Required<T> = {\n    [P in keyof T]-?: T[P];\n};\n\n/**\n * Make all properties in T readonly\n */\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\n/**\n * From T, pick a set of properties whose keys are in the union K\n */\ntype Pick<T, K extends keyof T> = {\n    [P in K]: T[P];\n};\n\n/**\n * Construct a type with a set of properties K of type T\n */\ntype Record<K extends keyof any, T> = {\n    [P in K]: T;\n};\n\n/**\n * Exclude from T those types that are assignable to U\n */\ntype Exclude<T, U> = T extends U ? never : T;\n\n/**\n * Extract from T those types that are assignable to U\n */\ntype Extract<T, U> = T extends U ? T : never;\n\n/**\n * Construct a type with the properties of T except for those in type K.\n */\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Exclude null and undefined from T\n */\ntype NonNullable<T> = T & {};\n\n/**\n * Obtain the parameters of a function type in a tuple\n */\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the parameters of a constructor function type in a tuple\n */\ntype ConstructorParameters<T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the return type of a function type\n */\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\n\n/**\n * Obtain the return type of a constructor function type\n */\ntype InstanceType<T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any;\n\n/**\n * Convert string literal type to uppercase\n */\ntype Uppercase<S extends string> = intrinsic;\n\n/**\n * Convert string literal type to lowercase\n */\ntype Lowercase<S extends string> = intrinsic;\n\n/**\n * Convert first character of string literal type to uppercase\n */\ntype Capitalize<S extends string> = intrinsic;\n\n/**\n * Convert first character of string literal type to lowercase\n */\ntype Uncapitalize<S extends string> = intrinsic;\n\n/**\n * Marker for non-inference type position\n */\ntype NoInfer<T> = intrinsic;\n\n/**\n * Marker for contextual \'this\' type\n */\ninterface ThisType<T> {}\n\n/**\n * Stores types to be used with WeakSet, WeakMap, WeakRef, and FinalizationRegistry\n */\ninterface WeakKeyTypes {\n    object: object;\n}\n\ntype WeakKey = WeakKeyTypes[keyof WeakKeyTypes];\n\n/**\n * Represents a raw buffer of binary data, which is used to store data for the\n * different typed arrays. ArrayBuffers cannot be read from or written to directly,\n * but can be passed to a typed array or DataView Object to interpret the raw\n * buffer as needed.\n */\ninterface ArrayBuffer {\n    /**\n     * Read-only. The length of the ArrayBuffer (in bytes).\n     */\n    readonly byteLength: number;\n\n    /**\n     * Returns a section of an ArrayBuffer.\n     */\n    slice(begin: number, end?: number): ArrayBuffer;\n}\n\n/**\n * Allowed ArrayBuffer types for the buffer of an ArrayBufferView and related Typed Arrays.\n */\ninterface ArrayBufferTypes {\n    ArrayBuffer: ArrayBuffer;\n}\ntype ArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes];\n\ninterface ArrayBufferConstructor {\n    readonly prototype: ArrayBuffer;\n    new (byteLength: number): ArrayBuffer;\n    isView(arg: any): arg is ArrayBufferView;\n}\ndeclare var ArrayBuffer: ArrayBufferConstructor;\n\ninterface ArrayBufferView {\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    byteOffset: number;\n}\n\ninterface DataView {\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    /**\n     * Gets the Float32 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getFloat32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Float64 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getFloat64(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Int8 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     */\n    getInt8(byteOffset: number): number;\n\n    /**\n     * Gets the Int16 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getInt16(byteOffset: number, littleEndian?: boolean): number;\n    /**\n     * Gets the Int32 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getInt32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Uint8 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     */\n    getUint8(byteOffset: number): number;\n\n    /**\n     * Gets the Uint16 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getUint16(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Uint32 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getUint32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Stores an Float32 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Float64 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Int8 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     */\n    setInt8(byteOffset: number, value: number): void;\n\n    /**\n     * Stores an Int16 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Int32 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Uint8 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     */\n    setUint8(byteOffset: number, value: number): void;\n\n    /**\n     * Stores an Uint16 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Uint32 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void;\n}\n\ninterface DataViewConstructor {\n    readonly prototype: DataView;\n    new (buffer: ArrayBufferLike & { BYTES_PER_ELEMENT?: never; }, byteOffset?: number, byteLength?: number): DataView;\n}\ndeclare var DataView: DataViewConstructor;\n\n/**\n * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested\n * number of bytes could not be allocated an exception is raised.\n */\ninterface Int8Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Int8Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Int8Array) => any, thisArg?: any): Int8Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Int8Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Int8Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Int8Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Int8Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Int8Array;\n\n    [index: number]: number;\n}\ninterface Int8ArrayConstructor {\n    readonly prototype: Int8Array;\n    new (length: number): Int8Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Int8Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int8Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Int8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Int8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array;\n}\ndeclare var Int8Array: Int8ArrayConstructor;\n\n/**\n * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint8Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Uint8Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Uint8Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Uint8Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Uint8Array;\n\n    [index: number]: number;\n}\n\ninterface Uint8ArrayConstructor {\n    readonly prototype: Uint8Array;\n    new (length: number): Uint8Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Uint8Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;\n}\ndeclare var Uint8Array: Uint8ArrayConstructor;\n\n/**\n * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.\n * If the requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint8ClampedArray {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Uint8ClampedArray) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Uint8ClampedArray) => any, thisArg?: any): Uint8ClampedArray;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Uint8ClampedArray;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Uint8ClampedArray;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Uint8ClampedArray) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Uint8ClampedArray;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Uint8ClampedArray;\n\n    [index: number]: number;\n}\n\ninterface Uint8ClampedArrayConstructor {\n    readonly prototype: Uint8ClampedArray;\n    new (length: number): Uint8ClampedArray;\n    new (array: ArrayLike<number> | ArrayBufferLike): Uint8ClampedArray;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8ClampedArray;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint8ClampedArray;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint8ClampedArray;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray;\n}\ndeclare var Uint8ClampedArray: Uint8ClampedArrayConstructor;\n\n/**\n * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Int16Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Int16Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Int16Array) => any, thisArg?: any): Int16Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Int16Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Int16Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Int16Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Int16Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Int16Array;\n\n    [index: number]: number;\n}\n\ninterface Int16ArrayConstructor {\n    readonly prototype: Int16Array;\n    new (length: number): Int16Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Int16Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int16Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Int16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Int16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array;\n}\ndeclare var Int16Array: Int16ArrayConstructor;\n\n/**\n * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint16Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Uint16Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Uint16Array) => any, thisArg?: any): Uint16Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Uint16Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Uint16Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Uint16Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Uint16Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Uint16Array;\n\n    [index: number]: number;\n}\n\ninterface Uint16ArrayConstructor {\n    readonly prototype: Uint16Array;\n    new (length: number): Uint16Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Uint16Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint16Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array;\n}\ndeclare var Uint16Array: Uint16ArrayConstructor;\n/**\n * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Int32Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Int32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Int32Array) => any, thisArg?: any): Int32Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Int32Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Int32Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Int32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Int32Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Int32Array;\n\n    [index: number]: number;\n}\n\ninterface Int32ArrayConstructor {\n    readonly prototype: Int32Array;\n    new (length: number): Int32Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Int32Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int32Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Int32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Int32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array;\n}\ndeclare var Int32Array: Int32ArrayConstructor;\n\n/**\n * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint32Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Uint32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Uint32Array) => any, thisArg?: any): Uint32Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Uint32Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Uint32Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Uint32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Uint32Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Uint32Array;\n\n    [index: number]: number;\n}\n\ninterface Uint32ArrayConstructor {\n    readonly prototype: Uint32Array;\n    new (length: number): Uint32Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Uint32Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint32Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array;\n}\ndeclare var Uint32Array: Uint32ArrayConstructor;\n\n/**\n * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\n * of bytes could not be allocated an exception is raised.\n */\ninterface Float32Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Float32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Float32Array) => any, thisArg?: any): Float32Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Float32Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Float32Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Float32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Float32Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Float32Array;\n\n    [index: number]: number;\n}\n\ninterface Float32ArrayConstructor {\n    readonly prototype: Float32Array;\n    new (length: number): Float32Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Float32Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float32Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Float32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Float32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array;\n}\ndeclare var Float32Array: Float32ArrayConstructor;\n\n/**\n * A typed array of 64-bit float values. The contents are initialized to 0. If the requested\n * number of bytes could not be allocated an exception is raised.\n */\ninterface Float64Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Float64Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Float64Array) => any, thisArg?: any): Float64Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Float64Array;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Float64Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: Float64Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Float64Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Float64Array;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Float64Array;\n\n    [index: number]: number;\n}\n\ninterface Float64ArrayConstructor {\n    readonly prototype: Float64Array;\n    new (length: number): Float64Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Float64Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float64Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Float64Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Float64Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array;\n}\ndeclare var Float64Array: Float64ArrayConstructor;\n\n/////////////////////////////\n/// ECMAScript Internationalization API\n/////////////////////////////\n\ndeclare namespace Intl {\n    interface CollatorOptions {\n        usage?: "sort" | "search" | undefined;\n        localeMatcher?: "lookup" | "best fit" | undefined;\n        numeric?: boolean | undefined;\n        caseFirst?: "upper" | "lower" | "false" | undefined;\n        sensitivity?: "base" | "accent" | "case" | "variant" | undefined;\n        collation?: "big5han" | "compat" | "dict" | "direct" | "ducet" | "emoji" | "eor" | "gb2312" | "phonebk" | "phonetic" | "pinyin" | "reformed" | "searchjl" | "stroke" | "trad" | "unihan" | "zhuyin" | undefined;\n        ignorePunctuation?: boolean | undefined;\n    }\n\n    interface ResolvedCollatorOptions {\n        locale: string;\n        usage: string;\n        sensitivity: string;\n        ignorePunctuation: boolean;\n        collation: string;\n        caseFirst: string;\n        numeric: boolean;\n    }\n\n    interface Collator {\n        compare(x: string, y: string): number;\n        resolvedOptions(): ResolvedCollatorOptions;\n    }\n\n    interface CollatorConstructor {\n        new (locales?: string | string[], options?: CollatorOptions): Collator;\n        (locales?: string | string[], options?: CollatorOptions): Collator;\n        supportedLocalesOf(locales: string | string[], options?: CollatorOptions): string[];\n    }\n\n    var Collator: CollatorConstructor;\n\n    interface NumberFormatOptionsStyleRegistry {\n        decimal: never;\n        percent: never;\n        currency: never;\n    }\n\n    type NumberFormatOptionsStyle = keyof NumberFormatOptionsStyleRegistry;\n\n    interface NumberFormatOptionsCurrencyDisplayRegistry {\n        code: never;\n        symbol: never;\n        name: never;\n    }\n\n    type NumberFormatOptionsCurrencyDisplay = keyof NumberFormatOptionsCurrencyDisplayRegistry;\n\n    interface NumberFormatOptionsUseGroupingRegistry {}\n\n    type NumberFormatOptionsUseGrouping = {} extends NumberFormatOptionsUseGroupingRegistry ? boolean : keyof NumberFormatOptionsUseGroupingRegistry | "true" | "false" | boolean;\n    type ResolvedNumberFormatOptionsUseGrouping = {} extends NumberFormatOptionsUseGroupingRegistry ? boolean : keyof NumberFormatOptionsUseGroupingRegistry | false;\n\n    interface NumberFormatOptions {\n        localeMatcher?: "lookup" | "best fit" | undefined;\n        style?: NumberFormatOptionsStyle | undefined;\n        currency?: string | undefined;\n        currencyDisplay?: NumberFormatOptionsCurrencyDisplay | undefined;\n        useGrouping?: NumberFormatOptionsUseGrouping | undefined;\n        minimumIntegerDigits?: number | undefined;\n        minimumFractionDigits?: number | undefined;\n        maximumFractionDigits?: number | undefined;\n        minimumSignificantDigits?: number | undefined;\n        maximumSignificantDigits?: number | undefined;\n    }\n\n    interface ResolvedNumberFormatOptions {\n        locale: string;\n        numberingSystem: string;\n        style: NumberFormatOptionsStyle;\n        currency?: string;\n        currencyDisplay?: NumberFormatOptionsCurrencyDisplay;\n        minimumIntegerDigits: number;\n        minimumFractionDigits?: number;\n        maximumFractionDigits?: number;\n        minimumSignificantDigits?: number;\n        maximumSignificantDigits?: number;\n        useGrouping: ResolvedNumberFormatOptionsUseGrouping;\n    }\n\n    interface NumberFormat {\n        format(value: number): string;\n        resolvedOptions(): ResolvedNumberFormatOptions;\n    }\n\n    interface NumberFormatConstructor {\n        new (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\n        (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\n        supportedLocalesOf(locales: string | string[], options?: NumberFormatOptions): string[];\n        readonly prototype: NumberFormat;\n    }\n\n    var NumberFormat: NumberFormatConstructor;\n\n    interface DateTimeFormatOptions {\n        localeMatcher?: "best fit" | "lookup" | undefined;\n        weekday?: "long" | "short" | "narrow" | undefined;\n        era?: "long" | "short" | "narrow" | undefined;\n        year?: "numeric" | "2-digit" | undefined;\n        month?: "numeric" | "2-digit" | "long" | "short" | "narrow" | undefined;\n        day?: "numeric" | "2-digit" | undefined;\n        hour?: "numeric" | "2-digit" | undefined;\n        minute?: "numeric" | "2-digit" | undefined;\n        second?: "numeric" | "2-digit" | undefined;\n        timeZoneName?: "short" | "long" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;\n        formatMatcher?: "best fit" | "basic" | undefined;\n        hour12?: boolean | undefined;\n        timeZone?: string | undefined;\n    }\n\n    interface ResolvedDateTimeFormatOptions {\n        locale: string;\n        calendar: string;\n        numberingSystem: string;\n        timeZone: string;\n        hour12?: boolean;\n        weekday?: string;\n        era?: string;\n        year?: string;\n        month?: string;\n        day?: string;\n        hour?: string;\n        minute?: string;\n        second?: string;\n        timeZoneName?: string;\n    }\n\n    interface DateTimeFormat {\n        format(date?: Date | number): string;\n        resolvedOptions(): ResolvedDateTimeFormatOptions;\n    }\n\n    interface DateTimeFormatConstructor {\n        new (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\n        (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\n        supportedLocalesOf(locales: string | string[], options?: DateTimeFormatOptions): string[];\n        readonly prototype: DateTimeFormat;\n    }\n\n    var DateTimeFormat: DateTimeFormatConstructor;\n}\n\ninterface String {\n    /**\n     * Determines whether two strings are equivalent in the current or specified locale.\n     * @param that String to compare to target string\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n     * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\n     */\n    localeCompare(that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;\n}\n\ninterface Number {\n    /**\n     * Converts a number to a string by using the current or specified locale.\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Date {\n    /**\n     * Converts a date and time to a string by using the current or specified locale.\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n    /**\n     * Converts a date to a string by using the current or specified locale.\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n     * Converts a time to a string by using the current or specified locale.\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n}\n';
const createDTSMap = (files) => {
  const map = /* @__PURE__ */ new Map();
  for (const [path, content] of Object.entries(files)) {
    map.set(path, content);
  }
  return map;
};
const fixedEs5 = dts$1j.replace("declare function eval(x: string): any;", "// declare function eval(x: string): any;");
const VFS_TS_562_ES5_FILES = (options) => {
  return {
    "/lib.decorators.d.ts": dts$1m,
    "/lib.decorators.legacy.d.ts": dts$1l,
    ...options.full ? { "/lib.d.ts": dts$1k } : {},
    "/lib.es5.d.ts": (() => {
      var _a;
      const extendDts = (_a = options.extend) == null ? void 0 : _a.call(options);
      if (extendDts == null || extendDts.trim().length === 0) {
        return fixedEs5;
      } else {
        return `${fixedEs5}
${extendDts}`;
      }
    })()
  };
};
const dts$1e = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Map<K, V> {\n    clear(): void;\n    /**\n     * @returns true if an element in the Map existed and has been removed, or false if the element does not exist.\n     */\n    delete(key: K): boolean;\n    /**\n     * Executes a provided function once per each key/value pair in the Map, in insertion order.\n     */\n    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void;\n    /**\n     * Returns a specified element from the Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map.\n     * @returns Returns the element associated with the specified key. If no element is associated with the specified key, undefined is returned.\n     */\n    get(key: K): V | undefined;\n    /**\n     * @returns boolean indicating whether an element with the specified key exists or not.\n     */\n    has(key: K): boolean;\n    /**\n     * Adds a new element with a specified key and value to the Map. If an element with the same key already exists, the element will be updated.\n     */\n    set(key: K, value: V): this;\n    /**\n     * @returns the number of elements in the Map.\n     */\n    readonly size: number;\n}\n\ninterface MapConstructor {\n    new (): Map<any, any>;\n    new <K, V>(entries?: readonly (readonly [K, V])[] | null): Map<K, V>;\n    readonly prototype: Map<any, any>;\n}\ndeclare var Map: MapConstructor;\n\ninterface ReadonlyMap<K, V> {\n    forEach(callbackfn: (value: V, key: K, map: ReadonlyMap<K, V>) => void, thisArg?: any): void;\n    get(key: K): V | undefined;\n    has(key: K): boolean;\n    readonly size: number;\n}\n\ninterface WeakMap<K extends WeakKey, V> {\n    /**\n     * Removes the specified element from the WeakMap.\n     * @returns true if the element was successfully removed, or false if it was not present.\n     */\n    delete(key: K): boolean;\n    /**\n     * @returns a specified element.\n     */\n    get(key: K): V | undefined;\n    /**\n     * @returns a boolean indicating whether an element with the specified key exists or not.\n     */\n    has(key: K): boolean;\n    /**\n     * Adds a new element with a specified key and value.\n     * @param key Must be an object or symbol.\n     */\n    set(key: K, value: V): this;\n}\n\ninterface WeakMapConstructor {\n    new <K extends WeakKey = WeakKey, V = any>(entries?: readonly (readonly [K, V])[] | null): WeakMap<K, V>;\n    readonly prototype: WeakMap<WeakKey, any>;\n}\ndeclare var WeakMap: WeakMapConstructor;\n\ninterface Set<T> {\n    /**\n     * Appends a new element with a specified value to the end of the Set.\n     */\n    add(value: T): this;\n\n    clear(): void;\n    /**\n     * Removes a specified value from the Set.\n     * @returns Returns true if an element in the Set existed and has been removed, or false if the element does not exist.\n     */\n    delete(value: T): boolean;\n    /**\n     * Executes a provided function once per each value in the Set object, in insertion order.\n     */\n    forEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;\n    /**\n     * @returns a boolean indicating whether an element with the specified value exists in the Set or not.\n     */\n    has(value: T): boolean;\n    /**\n     * @returns the number of (unique) elements in Set.\n     */\n    readonly size: number;\n}\n\ninterface SetConstructor {\n    new <T = any>(values?: readonly T[] | null): Set<T>;\n    readonly prototype: Set<any>;\n}\ndeclare var Set: SetConstructor;\n\ninterface ReadonlySet<T> {\n    forEach(callbackfn: (value: T, value2: T, set: ReadonlySet<T>) => void, thisArg?: any): void;\n    has(value: T): boolean;\n    readonly size: number;\n}\n\ninterface WeakSet<T extends WeakKey> {\n    /**\n     * Appends a new value to the end of the WeakSet.\n     */\n    add(value: T): this;\n    /**\n     * Removes the specified element from the WeakSet.\n     * @returns Returns true if the element existed and has been removed, or false if the element does not exist.\n     */\n    delete(value: T): boolean;\n    /**\n     * @returns a boolean indicating whether a value exists in the WeakSet or not.\n     */\n    has(value: T): boolean;\n}\n\ninterface WeakSetConstructor {\n    new <T extends WeakKey = WeakKey>(values?: readonly T[] | null): WeakSet<T>;\n    readonly prototype: WeakSet<WeakKey>;\n}\ndeclare var WeakSet: WeakSetConstructor;\n';
const dts$1d = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Array<T> {\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find<S extends T>(predicate: (value: T, index: number, obj: T[]) => value is S, thisArg?: any): S | undefined;\n    find(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): number;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: T, start?: number, end?: number): this;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;\n}\n\ninterface ArrayConstructor {\n    /**\n     * Creates an array from an array-like object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from<T>(arrayLike: ArrayLike<T>): T[];\n\n    /**\n     * Creates an array from an iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of<T>(...items: T[]): T[];\n}\n\ninterface DateConstructor {\n    new (value: number | string | Date): Date;\n}\n\ninterface Function {\n    /**\n     * Returns the name of the function. Function names are read-only and can not be changed.\n     */\n    readonly name: string;\n}\n\ninterface Math {\n    /**\n     * Returns the number of leading zero bits in the 32-bit binary representation of a number.\n     * @param x A numeric expression.\n     */\n    clz32(x: number): number;\n\n    /**\n     * Returns the result of 32-bit multiplication of two numbers.\n     * @param x First number\n     * @param y Second number\n     */\n    imul(x: number, y: number): number;\n\n    /**\n     * Returns the sign of the x, indicating whether x is positive, negative or zero.\n     * @param x The numeric expression to test\n     */\n    sign(x: number): number;\n\n    /**\n     * Returns the base 10 logarithm of a number.\n     * @param x A numeric expression.\n     */\n    log10(x: number): number;\n\n    /**\n     * Returns the base 2 logarithm of a number.\n     * @param x A numeric expression.\n     */\n    log2(x: number): number;\n\n    /**\n     * Returns the natural logarithm of 1 + x.\n     * @param x A numeric expression.\n     */\n    log1p(x: number): number;\n\n    /**\n     * Returns the result of (e^x - 1), which is an implementation-dependent approximation to\n     * subtracting 1 from the exponential function of x (e raised to the power of x, where e\n     * is the base of the natural logarithms).\n     * @param x A numeric expression.\n     */\n    expm1(x: number): number;\n\n    /**\n     * Returns the hyperbolic cosine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    cosh(x: number): number;\n\n    /**\n     * Returns the hyperbolic sine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    sinh(x: number): number;\n\n    /**\n     * Returns the hyperbolic tangent of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    tanh(x: number): number;\n\n    /**\n     * Returns the inverse hyperbolic cosine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    acosh(x: number): number;\n\n    /**\n     * Returns the inverse hyperbolic sine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    asinh(x: number): number;\n\n    /**\n     * Returns the inverse hyperbolic tangent of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    atanh(x: number): number;\n\n    /**\n     * Returns the square root of the sum of squares of its arguments.\n     * @param values Values to compute the square root for.\n     *     If no arguments are passed, the result is +0.\n     *     If there is only one argument, the result is the absolute value.\n     *     If any argument is +Infinity or -Infinity, the result is +Infinity.\n     *     If any argument is NaN, the result is NaN.\n     *     If all arguments are either +0 or −0, the result is +0.\n     */\n    hypot(...values: number[]): number;\n\n    /**\n     * Returns the integral part of the a numeric expression, x, removing any fractional digits.\n     * If x is already an integer, the result is x.\n     * @param x A numeric expression.\n     */\n    trunc(x: number): number;\n\n    /**\n     * Returns the nearest single precision float representation of a number.\n     * @param x A numeric expression.\n     */\n    fround(x: number): number;\n\n    /**\n     * Returns an implementation-dependent approximation to the cube root of number.\n     * @param x A numeric expression.\n     */\n    cbrt(x: number): number;\n}\n\ninterface NumberConstructor {\n    /**\n     * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1\n     * that is representable as a Number value, which is approximately:\n     * 2.2204460492503130808472633361816 x 10‍−‍16.\n     */\n    readonly EPSILON: number;\n\n    /**\n     * Returns true if passed value is finite.\n     * Unlike the global isFinite, Number.isFinite doesn\'t forcibly convert the parameter to a\n     * number. Only finite values of the type number, result in true.\n     * @param number A numeric value.\n     */\n    isFinite(number: unknown): boolean;\n\n    /**\n     * Returns true if the value passed is an integer, false otherwise.\n     * @param number A numeric value.\n     */\n    isInteger(number: unknown): boolean;\n\n    /**\n     * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a\n     * number). Unlike the global isNaN(), Number.isNaN() doesn\'t forcefully convert the parameter\n     * to a number. Only values of the type number, that are also NaN, result in true.\n     * @param number A numeric value.\n     */\n    isNaN(number: unknown): boolean;\n\n    /**\n     * Returns true if the value passed is a safe integer.\n     * @param number A numeric value.\n     */\n    isSafeInteger(number: unknown): boolean;\n\n    /**\n     * The value of the largest integer n such that n and n + 1 are both exactly representable as\n     * a Number value.\n     * The value of Number.MAX_SAFE_INTEGER is 9007199254740991 2^53 − 1.\n     */\n    readonly MAX_SAFE_INTEGER: number;\n\n    /**\n     * The value of the smallest integer n such that n and n − 1 are both exactly representable as\n     * a Number value.\n     * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).\n     */\n    readonly MIN_SAFE_INTEGER: number;\n\n    /**\n     * Converts a string to a floating-point number.\n     * @param string A string that contains a floating-point number.\n     */\n    parseFloat(string: string): number;\n\n    /**\n     * Converts A string to an integer.\n     * @param string A string to convert into a number.\n     * @param radix A value between 2 and 36 that specifies the base of the number in `string`.\n     * If this argument is not supplied, strings with a prefix of \'0x\' are considered hexadecimal.\n     * All other strings are considered decimal.\n     */\n    parseInt(string: string, radix?: number): number;\n}\n\ninterface ObjectConstructor {\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param source The source object from which to copy properties.\n     */\n    assign<T extends {}, U>(target: T, source: U): T & U;\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param source1 The first source object from which to copy properties.\n     * @param source2 The second source object from which to copy properties.\n     */\n    assign<T extends {}, U, V>(target: T, source1: U, source2: V): T & U & V;\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param source1 The first source object from which to copy properties.\n     * @param source2 The second source object from which to copy properties.\n     * @param source3 The third source object from which to copy properties.\n     */\n    assign<T extends {}, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param sources One or more source objects from which to copy properties\n     */\n    assign(target: object, ...sources: any[]): any;\n\n    /**\n     * Returns an array of all symbol properties found directly on object o.\n     * @param o Object to retrieve the symbols from.\n     */\n    getOwnPropertySymbols(o: any): symbol[];\n\n    /**\n     * Returns the names of the enumerable string properties and methods of an object.\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    keys(o: {}): string[];\n\n    /**\n     * Returns true if the values are the same value, false otherwise.\n     * @param value1 The first value.\n     * @param value2 The second value.\n     */\n    is(value1: any, value2: any): boolean;\n\n    /**\n     * Sets the prototype of a specified object o to object proto or null. Returns the object o.\n     * @param o The object to change its prototype.\n     * @param proto The value of the new prototype or null.\n     */\n    setPrototypeOf(o: any, proto: object | null): any;\n}\n\ninterface ReadonlyArray<T> {\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find<S extends T>(predicate: (value: T, index: number, obj: readonly T[]) => value is S, thisArg?: any): S | undefined;\n    find(predicate: (value: T, index: number, obj: readonly T[]) => unknown, thisArg?: any): T | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: T, index: number, obj: readonly T[]) => unknown, thisArg?: any): number;\n\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;\n}\n\ninterface RegExp {\n    /**\n     * Returns a string indicating the flags of the regular expression in question. This field is read-only.\n     * The characters in this string are sequenced and concatenated in the following order:\n     *\n     *    - "g" for global\n     *    - "i" for ignoreCase\n     *    - "m" for multiline\n     *    - "u" for unicode\n     *    - "y" for sticky\n     *\n     * If no flags are set, the value is the empty string.\n     */\n    readonly flags: string;\n\n    /**\n     * Returns a Boolean value indicating the state of the sticky flag (y) used with a regular\n     * expression. Default is false. Read-only.\n     */\n    readonly sticky: boolean;\n\n    /**\n     * Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular\n     * expression. Default is false. Read-only.\n     */\n    readonly unicode: boolean;\n}\n\ninterface RegExpConstructor {\n    new (pattern: RegExp | string, flags?: string): RegExp;\n    (pattern: RegExp | string, flags?: string): RegExp;\n}\n\ninterface String {\n    /**\n     * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\n     * value of the UTF-16 encoded code point starting at the string element at position pos in\n     * the String resulting from converting this object to a String.\n     * If there is no element at that position, the result is undefined.\n     * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.\n     */\n    codePointAt(pos: number): number | undefined;\n\n    /**\n     * Returns true if searchString appears as a substring of the result of converting this\n     * object to a String, at one or more positions that are\n     * greater than or equal to position; otherwise, returns false.\n     * @param searchString search string\n     * @param position If position is undefined, 0 is assumed, so as to search all of the String.\n     */\n    includes(searchString: string, position?: number): boolean;\n\n    /**\n     * Returns true if the sequence of elements of searchString converted to a String is the\n     * same as the corresponding elements of this object (converted to a String) starting at\n     * endPosition – length(this). Otherwise returns false.\n     */\n    endsWith(searchString: string, endPosition?: number): boolean;\n\n    /**\n     * Returns the String value result of normalizing the string into the normalization form\n     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n     * @param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default\n     * is "NFC"\n     */\n    normalize(form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;\n\n    /**\n     * Returns the String value result of normalizing the string into the normalization form\n     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n     * @param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default\n     * is "NFC"\n     */\n    normalize(form?: string): string;\n\n    /**\n     * Returns a String value that is made from count copies appended together. If count is 0,\n     * the empty string is returned.\n     * @param count number of copies to append\n     */\n    repeat(count: number): string;\n\n    /**\n     * Returns true if the sequence of elements of searchString converted to a String is the\n     * same as the corresponding elements of this object (converted to a String) starting at\n     * position. Otherwise returns false.\n     */\n    startsWith(searchString: string, position?: number): boolean;\n\n    /**\n     * Returns an `<a>` HTML anchor element and sets the name attribute to the text value\n     * @deprecated A legacy feature for browser compatibility\n     * @param name\n     */\n    anchor(name: string): string;\n\n    /**\n     * Returns a `<big>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    big(): string;\n\n    /**\n     * Returns a `<blink>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    blink(): string;\n\n    /**\n     * Returns a `<b>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    bold(): string;\n\n    /**\n     * Returns a `<tt>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fixed(): string;\n\n    /**\n     * Returns a `<font>` HTML element and sets the color attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fontcolor(color: string): string;\n\n    /**\n     * Returns a `<font>` HTML element and sets the size attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fontsize(size: number): string;\n\n    /**\n     * Returns a `<font>` HTML element and sets the size attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fontsize(size: string): string;\n\n    /**\n     * Returns an `<i>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    italics(): string;\n\n    /**\n     * Returns an `<a>` HTML element and sets the href attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    link(url: string): string;\n\n    /**\n     * Returns a `<small>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    small(): string;\n\n    /**\n     * Returns a `<strike>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    strike(): string;\n\n    /**\n     * Returns a `<sub>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    sub(): string;\n\n    /**\n     * Returns a `<sup>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    sup(): string;\n}\n\ninterface StringConstructor {\n    /**\n     * Return the String value whose elements are, in order, the elements in the List elements.\n     * If length is 0, the empty string is returned.\n     */\n    fromCodePoint(...codePoints: number[]): string;\n\n    /**\n     * String.raw is usually used as a tag function of a Tagged Template String. When called as\n     * such, the first argument will be a well formed template call site object and the rest\n     * parameter will contain the substitution values. It can also be called directly, for example,\n     * to interleave strings and values from your own tag function, and in this case the only thing\n     * it needs from the first argument is the raw property.\n     * @param template A well-formed template string call site representation.\n     * @param substitutions A set of substitution values.\n     */\n    raw(template: { raw: readonly string[] | ArrayLike<string>; }, ...substitutions: any[]): string;\n}\n\ninterface Int8Array {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Uint8Array {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Uint8ClampedArray {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Int16Array {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Uint16Array {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Int32Array {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Uint32Array {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Float32Array {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Float64Array {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n';
const dts$1c = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es5" />\n/// <reference lib="es2015.core" />\n/// <reference lib="es2015.collection" />\n/// <reference lib="es2015.iterable" />\n/// <reference lib="es2015.generator" />\n/// <reference lib="es2015.promise" />\n/// <reference lib="es2015.proxy" />\n/// <reference lib="es2015.reflect" />\n/// <reference lib="es2015.symbol" />\n/// <reference lib="es2015.symbol.wellknown" />\n';
const dts$1b = `/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


/// <reference no-default-lib="true"/>

/// <reference lib="es2015.iterable" />

interface Generator<T = unknown, TReturn = any, TNext = any> extends IteratorObject<T, TReturn, TNext> {
    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.
    next(...[value]: [] | [TNext]): IteratorResult<T, TReturn>;
    return(value: TReturn): IteratorResult<T, TReturn>;
    throw(e: any): IteratorResult<T, TReturn>;
    [Symbol.iterator](): Generator<T, TReturn, TNext>;
}

interface GeneratorFunction {
    /**
     * Creates a new Generator object.
     * @param args A list of arguments the function accepts.
     */
    new (...args: any[]): Generator;
    /**
     * Creates a new Generator object.
     * @param args A list of arguments the function accepts.
     */
    (...args: any[]): Generator;
    /**
     * The length of the arguments.
     */
    readonly length: number;
    /**
     * Returns the name of the function.
     */
    readonly name: string;
    /**
     * A reference to the prototype.
     */
    readonly prototype: Generator;
}

interface GeneratorFunctionConstructor {
    /**
     * Creates a new Generator function.
     * @param args A list of arguments the function accepts.
     */
    new (...args: string[]): GeneratorFunction;
    /**
     * Creates a new Generator function.
     * @param args A list of arguments the function accepts.
     */
    (...args: string[]): GeneratorFunction;
    /**
     * The length of the arguments.
     */
    readonly length: number;
    /**
     * Returns the name of the function.
     */
    readonly name: string;
    /**
     * A reference to the prototype.
     */
    readonly prototype: GeneratorFunction;
}
`;
const dts$1a = "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib=\"true\"/>\n\n/// <reference lib=\"es2015.symbol\" />\n\ninterface SymbolConstructor {\n    /**\n     * A method that returns the default iterator for an object. Called by the semantics of the\n     * for-of statement.\n     */\n    readonly iterator: unique symbol;\n}\n\ninterface IteratorYieldResult<TYield> {\n    done?: false;\n    value: TYield;\n}\n\ninterface IteratorReturnResult<TReturn> {\n    done: true;\n    value: TReturn;\n}\n\ntype IteratorResult<T, TReturn = any> = IteratorYieldResult<T> | IteratorReturnResult<TReturn>;\n\ninterface Iterator<T, TReturn = any, TNext = any> {\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\n    next(...[value]: [] | [TNext]): IteratorResult<T, TReturn>;\n    return?(value?: TReturn): IteratorResult<T, TReturn>;\n    throw?(e?: any): IteratorResult<T, TReturn>;\n}\n\ninterface Iterable<T, TReturn = any, TNext = any> {\n    [Symbol.iterator](): Iterator<T, TReturn, TNext>;\n}\n\n/**\n * Describes a user-defined {@link Iterator} that is also iterable.\n */\ninterface IterableIterator<T, TReturn = any, TNext = any> extends Iterator<T, TReturn, TNext> {\n    [Symbol.iterator](): IterableIterator<T, TReturn, TNext>;\n}\n\n/**\n * Describes an {@link Iterator} produced by the runtime that inherits from the intrinsic `Iterator.prototype`.\n */\ninterface IteratorObject<T, TReturn = unknown, TNext = unknown> extends Iterator<T, TReturn, TNext> {\n    [Symbol.iterator](): IteratorObject<T, TReturn, TNext>;\n}\n\n/**\n * Defines the `TReturn` type used for built-in iterators produced by `Array`, `Map`, `Set`, and others.\n * This is `undefined` when `strictBuiltInIteratorReturn` is `true`; otherwise, this is `any`.\n */\ntype BuiltinIteratorReturn = intrinsic;\n\ninterface ArrayIterator<T> extends IteratorObject<T, BuiltinIteratorReturn, unknown> {\n    [Symbol.iterator](): ArrayIterator<T>;\n}\n\ninterface Array<T> {\n    /** Iterator */\n    [Symbol.iterator](): ArrayIterator<T>;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, T]>;\n\n    /**\n     * Returns an iterable of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an iterable of values in the array\n     */\n    values(): ArrayIterator<T>;\n}\n\ninterface ArrayConstructor {\n    /**\n     * Creates an array from an iterable object.\n     * @param iterable An iterable object to convert to an array.\n     */\n    from<T>(iterable: Iterable<T> | ArrayLike<T>): T[];\n\n    /**\n     * Creates an array from an iterable object.\n     * @param iterable An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];\n}\n\ninterface ReadonlyArray<T> {\n    /** Iterator of values in the array. */\n    [Symbol.iterator](): ArrayIterator<T>;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, T]>;\n\n    /**\n     * Returns an iterable of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an iterable of values in the array\n     */\n    values(): ArrayIterator<T>;\n}\n\ninterface IArguments {\n    /** Iterator */\n    [Symbol.iterator](): ArrayIterator<any>;\n}\n\ninterface MapIterator<T> extends IteratorObject<T, BuiltinIteratorReturn, unknown> {\n    [Symbol.iterator](): MapIterator<T>;\n}\n\ninterface Map<K, V> {\n    /** Returns an iterable of entries in the map. */\n    [Symbol.iterator](): MapIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the map.\n     */\n    entries(): MapIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of keys in the map\n     */\n    keys(): MapIterator<K>;\n\n    /**\n     * Returns an iterable of values in the map\n     */\n    values(): MapIterator<V>;\n}\n\ninterface ReadonlyMap<K, V> {\n    /** Returns an iterable of entries in the map. */\n    [Symbol.iterator](): MapIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the map.\n     */\n    entries(): MapIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of keys in the map\n     */\n    keys(): MapIterator<K>;\n\n    /**\n     * Returns an iterable of values in the map\n     */\n    values(): MapIterator<V>;\n}\n\ninterface MapConstructor {\n    new (): Map<any, any>;\n    new <K, V>(iterable?: Iterable<readonly [K, V]> | null): Map<K, V>;\n}\n\ninterface WeakMap<K extends WeakKey, V> {}\n\ninterface WeakMapConstructor {\n    new <K extends WeakKey, V>(iterable: Iterable<readonly [K, V]>): WeakMap<K, V>;\n}\n\ninterface SetIterator<T> extends IteratorObject<T, BuiltinIteratorReturn, unknown> {\n    [Symbol.iterator](): SetIterator<T>;\n}\n\ninterface Set<T> {\n    /** Iterates over values in the set. */\n    [Symbol.iterator](): SetIterator<T>;\n    /**\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\n     */\n    entries(): SetIterator<[T, T]>;\n    /**\n     * Despite its name, returns an iterable of the values in the set.\n     */\n    keys(): SetIterator<T>;\n\n    /**\n     * Returns an iterable of values in the set.\n     */\n    values(): SetIterator<T>;\n}\n\ninterface ReadonlySet<T> {\n    /** Iterates over values in the set. */\n    [Symbol.iterator](): SetIterator<T>;\n\n    /**\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\n     */\n    entries(): SetIterator<[T, T]>;\n\n    /**\n     * Despite its name, returns an iterable of the values in the set.\n     */\n    keys(): SetIterator<T>;\n\n    /**\n     * Returns an iterable of values in the set.\n     */\n    values(): SetIterator<T>;\n}\n\ninterface SetConstructor {\n    new <T>(iterable?: Iterable<T> | null): Set<T>;\n}\n\ninterface WeakSet<T extends WeakKey> {}\n\ninterface WeakSetConstructor {\n    new <T extends WeakKey = WeakKey>(iterable: Iterable<T>): WeakSet<T>;\n}\n\ninterface Promise<T> {}\n\ninterface PromiseConstructor {\n    /**\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\n     * resolve, or rejected when any Promise is rejected.\n     * @param values An iterable of Promises.\n     * @returns A new Promise.\n     */\n    all<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>;\n\n    /**\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n     * or rejected.\n     * @param values An iterable of Promises.\n     * @returns A new Promise.\n     */\n    race<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>>;\n}\n\ninterface StringIterator<T> extends IteratorObject<T, BuiltinIteratorReturn, unknown> {\n    [Symbol.iterator](): StringIterator<T>;\n}\n\ninterface String {\n    /** Iterator */\n    [Symbol.iterator](): StringIterator<string>;\n}\n\ninterface Int8Array {\n    [Symbol.iterator](): ArrayIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Int8ArrayConstructor {\n    new (elements: Iterable<number>): Int8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array;\n}\n\ninterface Uint8Array {\n    [Symbol.iterator](): ArrayIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Uint8ArrayConstructor {\n    new (elements: Iterable<number>): Uint8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;\n}\n\ninterface Uint8ClampedArray {\n    [Symbol.iterator](): ArrayIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Uint8ClampedArrayConstructor {\n    new (elements: Iterable<number>): Uint8ClampedArray;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray;\n}\n\ninterface Int16Array {\n    [Symbol.iterator](): ArrayIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Int16ArrayConstructor {\n    new (elements: Iterable<number>): Int16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int16Array;\n}\n\ninterface Uint16Array {\n    [Symbol.iterator](): ArrayIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Uint16ArrayConstructor {\n    new (elements: Iterable<number>): Uint16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array;\n}\n\ninterface Int32Array {\n    [Symbol.iterator](): ArrayIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Int32ArrayConstructor {\n    new (elements: Iterable<number>): Int32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array;\n}\n\ninterface Uint32Array {\n    [Symbol.iterator](): ArrayIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Uint32ArrayConstructor {\n    new (elements: Iterable<number>): Uint32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array;\n}\n\ninterface Float32Array {\n    [Symbol.iterator](): ArrayIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Float32ArrayConstructor {\n    new (elements: Iterable<number>): Float32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array;\n}\n\ninterface Float64Array {\n    [Symbol.iterator](): ArrayIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Float64ArrayConstructor {\n    new (elements: Iterable<number>): Float64Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array;\n}\n";
const dts$19 = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface PromiseConstructor {\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: Promise<any>;\n\n    /**\n     * Creates a new Promise.\n     * @param executor A callback used to initialize the promise. This callback is passed two arguments:\n     * a resolve callback used to resolve the promise with a value or the result of another promise,\n     * and a reject callback used to reject the promise with a provided reason or error.\n     */\n    new <T>(executor: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\n\n    /**\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\n     * resolve, or rejected when any Promise is rejected.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    all<T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>;\n\n    // see: lib.es2015.iterable.d.ts\n    // all<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>;\n\n    /**\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n     * or rejected.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    race<T extends readonly unknown[] | []>(values: T): Promise<Awaited<T[number]>>;\n\n    // see: lib.es2015.iterable.d.ts\n    // race<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>>;\n\n    /**\n     * Creates a new rejected promise for the provided reason.\n     * @param reason The reason the promise was rejected.\n     * @returns A new rejected Promise.\n     */\n    reject<T = never>(reason?: any): Promise<T>;\n\n    /**\n     * Creates a new resolved promise.\n     * @returns A resolved promise.\n     */\n    resolve(): Promise<void>;\n    /**\n     * Creates a new resolved promise for the provided value.\n     * @param value A promise.\n     * @returns A promise whose internal state matches the provided promise.\n     */\n    resolve<T>(value: T): Promise<Awaited<T>>;\n    /**\n     * Creates a new resolved promise for the provided value.\n     * @param value A promise.\n     * @returns A promise whose internal state matches the provided promise.\n     */\n    resolve<T>(value: T | PromiseLike<T>): Promise<Awaited<T>>;\n}\n\ndeclare var Promise: PromiseConstructor;\n';
const dts$18 = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface ProxyHandler<T extends object> {\n    /**\n     * A trap method for a function call.\n     * @param target The original callable object which is being proxied.\n     */\n    apply?(target: T, thisArg: any, argArray: any[]): any;\n\n    /**\n     * A trap for the `new` operator.\n     * @param target The original object which is being proxied.\n     * @param newTarget The constructor that was originally called.\n     */\n    construct?(target: T, argArray: any[], newTarget: Function): object;\n\n    /**\n     * A trap for `Object.defineProperty()`.\n     * @param target The original object which is being proxied.\n     * @returns A `Boolean` indicating whether or not the property has been defined.\n     */\n    defineProperty?(target: T, property: string | symbol, attributes: PropertyDescriptor): boolean;\n\n    /**\n     * A trap for the `delete` operator.\n     * @param target The original object which is being proxied.\n     * @param p The name or `Symbol` of the property to delete.\n     * @returns A `Boolean` indicating whether or not the property was deleted.\n     */\n    deleteProperty?(target: T, p: string | symbol): boolean;\n\n    /**\n     * A trap for getting a property value.\n     * @param target The original object which is being proxied.\n     * @param p The name or `Symbol` of the property to get.\n     * @param receiver The proxy or an object that inherits from the proxy.\n     */\n    get?(target: T, p: string | symbol, receiver: any): any;\n\n    /**\n     * A trap for `Object.getOwnPropertyDescriptor()`.\n     * @param target The original object which is being proxied.\n     * @param p The name of the property whose description should be retrieved.\n     */\n    getOwnPropertyDescriptor?(target: T, p: string | symbol): PropertyDescriptor | undefined;\n\n    /**\n     * A trap for the `[[GetPrototypeOf]]` internal method.\n     * @param target The original object which is being proxied.\n     */\n    getPrototypeOf?(target: T): object | null;\n\n    /**\n     * A trap for the `in` operator.\n     * @param target The original object which is being proxied.\n     * @param p The name or `Symbol` of the property to check for existence.\n     */\n    has?(target: T, p: string | symbol): boolean;\n\n    /**\n     * A trap for `Object.isExtensible()`.\n     * @param target The original object which is being proxied.\n     */\n    isExtensible?(target: T): boolean;\n\n    /**\n     * A trap for `Reflect.ownKeys()`.\n     * @param target The original object which is being proxied.\n     */\n    ownKeys?(target: T): ArrayLike<string | symbol>;\n\n    /**\n     * A trap for `Object.preventExtensions()`.\n     * @param target The original object which is being proxied.\n     */\n    preventExtensions?(target: T): boolean;\n\n    /**\n     * A trap for setting a property value.\n     * @param target The original object which is being proxied.\n     * @param p The name or `Symbol` of the property to set.\n     * @param receiver The object to which the assignment was originally directed.\n     * @returns A `Boolean` indicating whether or not the property was set.\n     */\n    set?(target: T, p: string | symbol, newValue: any, receiver: any): boolean;\n\n    /**\n     * A trap for `Object.setPrototypeOf()`.\n     * @param target The original object which is being proxied.\n     * @param newPrototype The object\'s new prototype or `null`.\n     */\n    setPrototypeOf?(target: T, v: object | null): boolean;\n}\n\ninterface ProxyConstructor {\n    /**\n     * Creates a revocable Proxy object.\n     * @param target A target object to wrap with Proxy.\n     * @param handler An object whose properties define the behavior of Proxy when an operation is attempted on it.\n     */\n    revocable<T extends object>(target: T, handler: ProxyHandler<T>): { proxy: T; revoke: () => void; };\n\n    /**\n     * Creates a Proxy object. The Proxy object allows you to create an object that can be used in place of the\n     * original object, but which may redefine fundamental Object operations like getting, setting, and defining\n     * properties. Proxy objects are commonly used to log property accesses, validate, format, or sanitize inputs.\n     * @param target A target object to wrap with Proxy.\n     * @param handler An object whose properties define the behavior of Proxy when an operation is attempted on it.\n     */\n    new <T extends object>(target: T, handler: ProxyHandler<T>): T;\n}\ndeclare var Proxy: ProxyConstructor;\n';
const dts$17 = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare namespace Reflect {\n    /**\n     * Calls the function with the specified object as the this value\n     * and the elements of specified array as the arguments.\n     * @param target The function to call.\n     * @param thisArgument The object to be used as the this object.\n     * @param argumentsList An array of argument values to be passed to the function.\n     */\n    function apply<T, A extends readonly any[], R>(\n        target: (this: T, ...args: A) => R,\n        thisArgument: T,\n        argumentsList: Readonly<A>,\n    ): R;\n    function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;\n\n    /**\n     * Constructs the target with the elements of specified array as the arguments\n     * and the specified constructor as the `new.target` value.\n     * @param target The constructor to invoke.\n     * @param argumentsList An array of argument values to be passed to the constructor.\n     * @param newTarget The constructor to be used as the `new.target` object.\n     */\n    function construct<A extends readonly any[], R>(\n        target: new (...args: A) => R,\n        argumentsList: Readonly<A>,\n        newTarget?: new (...args: any) => any,\n    ): R;\n    function construct(target: Function, argumentsList: ArrayLike<any>, newTarget?: Function): any;\n\n    /**\n     * Adds a property to an object, or modifies attributes of an existing property.\n     * @param target Object on which to add or modify the property. This can be a native JavaScript object\n     *        (that is, a user-defined object or a built in object) or a DOM object.\n     * @param propertyKey The property name.\n     * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\n     */\n    function defineProperty(target: object, propertyKey: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): boolean;\n\n    /**\n     * Removes a property from an object, equivalent to `delete target[propertyKey]`,\n     * except it won\'t throw if `target[propertyKey]` is non-configurable.\n     * @param target Object from which to remove the own property.\n     * @param propertyKey The property name.\n     */\n    function deleteProperty(target: object, propertyKey: PropertyKey): boolean;\n\n    /**\n     * Gets the property of target, equivalent to `target[propertyKey]` when `receiver === target`.\n     * @param target Object that contains the property on itself or in its prototype chain.\n     * @param propertyKey The property name.\n     * @param receiver The reference to use as the `this` value in the getter function,\n     *        if `target[propertyKey]` is an accessor property.\n     */\n    function get<T extends object, P extends PropertyKey>(\n        target: T,\n        propertyKey: P,\n        receiver?: unknown,\n    ): P extends keyof T ? T[P] : any;\n\n    /**\n     * Gets the own property descriptor of the specified object.\n     * An own property descriptor is one that is defined directly on the object and is not inherited from the object\'s prototype.\n     * @param target Object that contains the property.\n     * @param propertyKey The property name.\n     */\n    function getOwnPropertyDescriptor<T extends object, P extends PropertyKey>(\n        target: T,\n        propertyKey: P,\n    ): TypedPropertyDescriptor<P extends keyof T ? T[P] : any> | undefined;\n\n    /**\n     * Returns the prototype of an object.\n     * @param target The object that references the prototype.\n     */\n    function getPrototypeOf(target: object): object | null;\n\n    /**\n     * Equivalent to `propertyKey in target`.\n     * @param target Object that contains the property on itself or in its prototype chain.\n     * @param propertyKey Name of the property.\n     */\n    function has(target: object, propertyKey: PropertyKey): boolean;\n\n    /**\n     * Returns a value that indicates whether new properties can be added to an object.\n     * @param target Object to test.\n     */\n    function isExtensible(target: object): boolean;\n\n    /**\n     * Returns the string and symbol keys of the own properties of an object. The own properties of an object\n     * are those that are defined directly on that object, and are not inherited from the object\'s prototype.\n     * @param target Object that contains the own properties.\n     */\n    function ownKeys(target: object): (string | symbol)[];\n\n    /**\n     * Prevents the addition of new properties to an object.\n     * @param target Object to make non-extensible.\n     * @return Whether the object has been made non-extensible.\n     */\n    function preventExtensions(target: object): boolean;\n\n    /**\n     * Sets the property of target, equivalent to `target[propertyKey] = value` when `receiver === target`.\n     * @param target Object that contains the property on itself or in its prototype chain.\n     * @param propertyKey Name of the property.\n     * @param receiver The reference to use as the `this` value in the setter function,\n     *        if `target[propertyKey]` is an accessor property.\n     */\n    function set<T extends object, P extends PropertyKey>(\n        target: T,\n        propertyKey: P,\n        value: P extends keyof T ? T[P] : any,\n        receiver?: any,\n    ): boolean;\n    function set(target: object, propertyKey: PropertyKey, value: any, receiver?: any): boolean;\n\n    /**\n     * Sets the prototype of a specified object o to object proto or null.\n     * @param target The object to change its prototype.\n     * @param proto The value of the new prototype or null.\n     * @return Whether setting the prototype was successful.\n     */\n    function setPrototypeOf(target: object, proto: object | null): boolean;\n}\n';
const dts$16 = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface SymbolConstructor {\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: Symbol;\n\n    /**\n     * Returns a new unique Symbol value.\n     * @param  description Description of the new Symbol object.\n     */\n    (description?: string | number): symbol;\n\n    /**\n     * Returns a Symbol object from the global symbol registry matching the given key if found.\n     * Otherwise, returns a new symbol with this key.\n     * @param key key to search for.\n     */\n    for(key: string): symbol;\n\n    /**\n     * Returns a key from the global symbol registry matching the given Symbol if found.\n     * Otherwise, returns a undefined.\n     * @param sym Symbol to find the key for.\n     */\n    keyFor(sym: symbol): string | undefined;\n}\n\ndeclare var Symbol: SymbolConstructor;\n';
const dts$15 = `/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


/// <reference no-default-lib="true"/>

/// <reference lib="es2015.symbol" />

interface SymbolConstructor {
    /**
     * A method that determines if a constructor object recognizes an object as one of the
     * constructor’s instances. Called by the semantics of the instanceof operator.
     */
    readonly hasInstance: unique symbol;

    /**
     * A Boolean value that if true indicates that an object should flatten to its array elements
     * by Array.prototype.concat.
     */
    readonly isConcatSpreadable: unique symbol;

    /**
     * A regular expression method that matches the regular expression against a string. Called
     * by the String.prototype.match method.
     */
    readonly match: unique symbol;

    /**
     * A regular expression method that replaces matched substrings of a string. Called by the
     * String.prototype.replace method.
     */
    readonly replace: unique symbol;

    /**
     * A regular expression method that returns the index within a string that matches the
     * regular expression. Called by the String.prototype.search method.
     */
    readonly search: unique symbol;

    /**
     * A function valued property that is the constructor function that is used to create
     * derived objects.
     */
    readonly species: unique symbol;

    /**
     * A regular expression method that splits a string at the indices that match the regular
     * expression. Called by the String.prototype.split method.
     */
    readonly split: unique symbol;

    /**
     * A method that converts an object to a corresponding primitive value.
     * Called by the ToPrimitive abstract operation.
     */
    readonly toPrimitive: unique symbol;

    /**
     * A String value that is used in the creation of the default string description of an object.
     * Called by the built-in method Object.prototype.toString.
     */
    readonly toStringTag: unique symbol;

    /**
     * An Object whose truthy properties are properties that are excluded from the 'with'
     * environment bindings of the associated objects.
     */
    readonly unscopables: unique symbol;
}

interface Symbol {
    /**
     * Converts a Symbol object to a symbol.
     */
    [Symbol.toPrimitive](hint: string): symbol;

    readonly [Symbol.toStringTag]: string;
}

interface Array<T> {
    /**
     * Is an object whose properties have the value 'true'
     * when they will be absent when used in a 'with' statement.
     */
    readonly [Symbol.unscopables]: {
        [K in keyof any[]]?: boolean;
    };
}

interface ReadonlyArray<T> {
    /**
     * Is an object whose properties have the value 'true'
     * when they will be absent when used in a 'with' statement.
     */
    readonly [Symbol.unscopables]: {
        [K in keyof readonly any[]]?: boolean;
    };
}

interface Date {
    /**
     * Converts a Date object to a string.
     */
    [Symbol.toPrimitive](hint: "default"): string;
    /**
     * Converts a Date object to a string.
     */
    [Symbol.toPrimitive](hint: "string"): string;
    /**
     * Converts a Date object to a number.
     */
    [Symbol.toPrimitive](hint: "number"): number;
    /**
     * Converts a Date object to a string or number.
     *
     * @param hint The strings "number", "string", or "default" to specify what primitive to return.
     *
     * @throws {TypeError} If 'hint' was given something other than "number", "string", or "default".
     * @returns A number if 'hint' was "number", a string if 'hint' was "string" or "default".
     */
    [Symbol.toPrimitive](hint: string): string | number;
}

interface Map<K, V> {
    readonly [Symbol.toStringTag]: string;
}

interface WeakMap<K extends WeakKey, V> {
    readonly [Symbol.toStringTag]: string;
}

interface Set<T> {
    readonly [Symbol.toStringTag]: string;
}

interface WeakSet<T extends WeakKey> {
    readonly [Symbol.toStringTag]: string;
}

interface JSON {
    readonly [Symbol.toStringTag]: string;
}

interface Function {
    /**
     * Determines whether the given value inherits from this function if this function was used
     * as a constructor function.
     *
     * A constructor function can control which objects are recognized as its instances by
     * 'instanceof' by overriding this method.
     */
    [Symbol.hasInstance](value: any): boolean;
}

interface GeneratorFunction {
    readonly [Symbol.toStringTag]: string;
}

interface Math {
    readonly [Symbol.toStringTag]: string;
}

interface Promise<T> {
    readonly [Symbol.toStringTag]: string;
}

interface PromiseConstructor {
    readonly [Symbol.species]: PromiseConstructor;
}

interface RegExp {
    /**
     * Matches a string with this regular expression, and returns an array containing the results of
     * that search.
     * @param string A string to search within.
     */
    [Symbol.match](string: string): RegExpMatchArray | null;

    /**
     * Replaces text in a string, using this regular expression.
     * @param string A String object or string literal whose contents matching against
     *               this regular expression will be replaced
     * @param replaceValue A String object or string literal containing the text to replace for every
     *                     successful match of this regular expression.
     */
    [Symbol.replace](string: string, replaceValue: string): string;

    /**
     * Replaces text in a string, using this regular expression.
     * @param string A String object or string literal whose contents matching against
     *               this regular expression will be replaced
     * @param replacer A function that returns the replacement text.
     */
    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;

    /**
     * Finds the position beginning first substring match in a regular expression search
     * using this regular expression.
     *
     * @param string The string to search within.
     */
    [Symbol.search](string: string): number;

    /**
     * Returns an array of substrings that were delimited by strings in the original input that
     * match against this regular expression.
     *
     * If the regular expression contains capturing parentheses, then each time this
     * regular expression matches, the results (including any undefined results) of the
     * capturing parentheses are spliced.
     *
     * @param string string value to split
     * @param limit if not undefined, the output array is truncated so that it contains no more
     * than 'limit' elements.
     */
    [Symbol.split](string: string, limit?: number): string[];
}

interface RegExpConstructor {
    readonly [Symbol.species]: RegExpConstructor;
}

interface String {
    /**
     * Matches a string or an object that supports being matched against, and returns an array
     * containing the results of that search, or null if no matches are found.
     * @param matcher An object that supports being matched against.
     */
    match(matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null;

    /**
     * Passes a string and {@linkcode replaceValue} to the \`[Symbol.replace]\` method on {@linkcode searchValue}. This method is expected to implement its own replacement algorithm.
     * @param searchValue An object that supports searching for and replacing matches within a string.
     * @param replaceValue The replacement text.
     */
    replace(searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string;

    /**
     * Replaces text in a string, using an object that supports replacement within a string.
     * @param searchValue A object can search for and replace matches within a string.
     * @param replacer A function that returns the replacement text.
     */
    replace(searchValue: { [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string; }, replacer: (substring: string, ...args: any[]) => string): string;

    /**
     * Finds the first substring match in a regular expression search.
     * @param searcher An object which supports searching within a string.
     */
    search(searcher: { [Symbol.search](string: string): number; }): number;

    /**
     * Split a string into substrings using the specified separator and return them as an array.
     * @param splitter An object that can split a string.
     * @param limit A value used to limit the number of elements returned in the array.
     */
    split(splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[];
}

interface ArrayBuffer {
    readonly [Symbol.toStringTag]: string;
}

interface DataView {
    readonly [Symbol.toStringTag]: string;
}

interface Int8Array {
    readonly [Symbol.toStringTag]: "Int8Array";
}

interface Uint8Array {
    readonly [Symbol.toStringTag]: "Uint8Array";
}

interface Uint8ClampedArray {
    readonly [Symbol.toStringTag]: "Uint8ClampedArray";
}

interface Int16Array {
    readonly [Symbol.toStringTag]: "Int16Array";
}

interface Uint16Array {
    readonly [Symbol.toStringTag]: "Uint16Array";
}

interface Int32Array {
    readonly [Symbol.toStringTag]: "Int32Array";
}

interface Uint32Array {
    readonly [Symbol.toStringTag]: "Uint32Array";
}

interface Float32Array {
    readonly [Symbol.toStringTag]: "Float32Array";
}

interface Float64Array {
    readonly [Symbol.toStringTag]: "Float64Array";
}

interface ArrayConstructor {
    readonly [Symbol.species]: ArrayConstructor;
}
interface MapConstructor {
    readonly [Symbol.species]: MapConstructor;
}
interface SetConstructor {
    readonly [Symbol.species]: SetConstructor;
}
interface ArrayBufferConstructor {
    readonly [Symbol.species]: ArrayBufferConstructor;
}
`;
const dts$14 = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015" />\n/// <reference lib="dom" />\n/// <reference lib="dom.iterable" />\n/// <reference lib="webworker.importscripts" />\n/// <reference lib="scripthost" />\n';
const VFS_TS_562_ES2015_FILES = (options) => {
  return {
    ...VFS_TS_562_ES5_FILES(options),
    "/lib.es6.d.ts": options.full ? dts$14 : dts$1c,
    "/lib.es2015.collection.d.ts": dts$1e,
    "/lib.es2015.core.d.ts": dts$1d,
    "/lib.es2015.d.ts": dts$1c,
    "/lib.es2015.generator.d.ts": dts$1b,
    "/lib.es2015.iterable.d.ts": dts$1a,
    "/lib.es2015.promise.d.ts": dts$19,
    "/lib.es2015.proxy.d.ts": dts$18,
    "/lib.es2015.reflect.d.ts": dts$17,
    "/lib.es2015.symbol.d.ts": dts$16,
    "/lib.es2015.symbol.wellknown.d.ts": dts$15
  };
};
const dts$13 = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Array<T> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: T, fromIndex?: number): boolean;\n}\n\ninterface ReadonlyArray<T> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: T, fromIndex?: number): boolean;\n}\n\ninterface Int8Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Uint8Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Uint8ClampedArray {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Int16Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Uint16Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Int32Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Uint32Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Float32Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Float64Array {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n';
const dts$12 = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015" />\n/// <reference lib="es2016.array.include" />\n/// <reference lib="es2016.intl" />\n';
const dts$11 = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2016" />\n/// <reference lib="dom" />\n/// <reference lib="webworker.importscripts" />\n/// <reference lib="scripthost" />\n/// <reference lib="dom.iterable" />\n';
const dts$10 = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare namespace Intl {\n    /**\n     * The `Intl.getCanonicalLocales()` method returns an array containing\n     * the canonical locale names. Duplicates will be omitted and elements\n     * will be validated as structurally valid language tags.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/getCanonicalLocales)\n     *\n     * @param locale A list of String values for which to get the canonical locale names\n     * @returns An array containing the canonical and validated locale names.\n     */\n    function getCanonicalLocales(locale?: string | readonly string[]): string[];\n}\n';
const VFS_TS_562_ES2016_FILES = (options) => {
  return {
    ...VFS_TS_562_ES2015_FILES(options),
    "/lib.es2016.array.include.d.ts": dts$13,
    "/lib.es2016.d.ts": options.full ? dts$11 : dts$12,
    "/lib.es2016.full.d.ts": dts$12,
    "/lib.es2016.intl.d.ts": dts$10
  };
};
const dts$$ = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface DateConstructor {\n    /**\n     * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.\n     * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n     * @param monthIndex The month as a number between 0 and 11 (January to December).\n     * @param date The date as a number between 1 and 31.\n     * @param hours Must be supplied if minutes is supplied. A number from 0 to 23 (midnight to 11pm) that specifies the hour.\n     * @param minutes Must be supplied if seconds is supplied. A number from 0 to 59 that specifies the minutes.\n     * @param seconds Must be supplied if milliseconds is supplied. A number from 0 to 59 that specifies the seconds.\n     * @param ms A number from 0 to 999 that specifies the milliseconds.\n     */\n    UTC(year: number, monthIndex?: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\n}\n';
const dts$_ = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2016" />\n/// <reference lib="es2017.object" />\n/// <reference lib="es2017.sharedmemory" />\n/// <reference lib="es2017.string" />\n/// <reference lib="es2017.intl" />\n/// <reference lib="es2017.typedarrays" />\n/// <reference lib="es2017.date" />\n';
const dts$Z = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2017" />\n/// <reference lib="dom" />\n/// <reference lib="webworker.importscripts" />\n/// <reference lib="scripthost" />\n/// <reference lib="dom.iterable" />\n';
const dts$Y = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare namespace Intl {\n    interface DateTimeFormatPartTypesRegistry {\n        day: any;\n        dayPeriod: any;\n        era: any;\n        hour: any;\n        literal: any;\n        minute: any;\n        month: any;\n        second: any;\n        timeZoneName: any;\n        weekday: any;\n        year: any;\n    }\n\n    type DateTimeFormatPartTypes = keyof DateTimeFormatPartTypesRegistry;\n\n    interface DateTimeFormatPart {\n        type: DateTimeFormatPartTypes;\n        value: string;\n    }\n\n    interface DateTimeFormat {\n        formatToParts(date?: Date | number): DateTimeFormatPart[];\n    }\n}\n';
const dts$X = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface ObjectConstructor {\n    /**\n     * Returns an array of values of the enumerable own properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    values<T>(o: { [s: string]: T; } | ArrayLike<T>): T[];\n\n    /**\n     * Returns an array of values of the enumerable own properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    values(o: {}): any[];\n\n    /**\n     * Returns an array of key/values of the enumerable own properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    entries<T>(o: { [s: string]: T; } | ArrayLike<T>): [string, T][];\n\n    /**\n     * Returns an array of key/values of the enumerable own properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    entries(o: {}): [string, any][];\n\n    /**\n     * Returns an object containing all own property descriptors of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    getOwnPropertyDescriptors<T>(o: T): { [P in keyof T]: TypedPropertyDescriptor<T[P]>; } & { [x: string]: PropertyDescriptor; };\n}\n';
const dts$W = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015.symbol" />\n/// <reference lib="es2015.symbol.wellknown" />\n\ninterface SharedArrayBuffer {\n    /**\n     * Read-only. The length of the ArrayBuffer (in bytes).\n     */\n    readonly byteLength: number;\n\n    /**\n     * Returns a section of an SharedArrayBuffer.\n     */\n    slice(begin: number, end?: number): SharedArrayBuffer;\n    readonly [Symbol.species]: SharedArrayBuffer;\n    readonly [Symbol.toStringTag]: "SharedArrayBuffer";\n}\n\ninterface SharedArrayBufferConstructor {\n    readonly prototype: SharedArrayBuffer;\n    new (byteLength: number): SharedArrayBuffer;\n}\ndeclare var SharedArrayBuffer: SharedArrayBufferConstructor;\n\ninterface ArrayBufferTypes {\n    SharedArrayBuffer: SharedArrayBuffer;\n}\n\ninterface Atomics {\n    /**\n     * Adds a value to the value at the given position in the array, returning the original value.\n     * Until this atomic operation completes, any other read or write operation against the array\n     * will block.\n     */\n    add(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    /**\n     * Stores the bitwise AND of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or\n     * write operation against the array will block.\n     */\n    and(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    /**\n     * Replaces the value at the given position in the array if the original value equals the given\n     * expected value, returning the original value. Until this atomic operation completes, any\n     * other read or write operation against the array will block.\n     */\n    compareExchange(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, expectedValue: number, replacementValue: number): number;\n\n    /**\n     * Replaces the value at the given position in the array, returning the original value. Until\n     * this atomic operation completes, any other read or write operation against the array will\n     * block.\n     */\n    exchange(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    /**\n     * Returns a value indicating whether high-performance algorithms can use atomic operations\n     * (`true`) or must use locks (`false`) for the given number of bytes-per-element of a typed\n     * array.\n     */\n    isLockFree(size: number): boolean;\n\n    /**\n     * Returns the value at the given position in the array. Until this atomic operation completes,\n     * any other read or write operation against the array will block.\n     */\n    load(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number): number;\n\n    /**\n     * Stores the bitwise OR of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or write\n     * operation against the array will block.\n     */\n    or(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    /**\n     * Stores a value at the given position in the array, returning the new value. Until this\n     * atomic operation completes, any other read or write operation against the array will block.\n     */\n    store(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    /**\n     * Subtracts a value from the value at the given position in the array, returning the original\n     * value. Until this atomic operation completes, any other read or write operation against the\n     * array will block.\n     */\n    sub(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    /**\n     * If the value at the given position in the array is equal to the provided value, the current\n     * agent is put to sleep causing execution to suspend until the timeout expires (returning\n     * `"timed-out"`) or until the agent is awoken (returning `"ok"`); otherwise, returns\n     * `"not-equal"`.\n     */\n    wait(typedArray: Int32Array, index: number, value: number, timeout?: number): "ok" | "not-equal" | "timed-out";\n\n    /**\n     * Wakes up sleeping agents that are waiting on the given index of the array, returning the\n     * number of agents that were awoken.\n     * @param typedArray A shared Int32Array.\n     * @param index The position in the typedArray to wake up on.\n     * @param count The number of sleeping agents to notify. Defaults to +Infinity.\n     */\n    notify(typedArray: Int32Array, index: number, count?: number): number;\n\n    /**\n     * Stores the bitwise XOR of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or write\n     * operation against the array will block.\n     */\n    xor(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n\n    readonly [Symbol.toStringTag]: "Atomics";\n}\n\ndeclare var Atomics: Atomics;\n';
const dts$V = `/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


/// <reference no-default-lib="true"/>

interface String {
    /**
     * Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.
     * The padding is applied from the start (left) of the current string.
     *
     * @param maxLength The length of the resulting string once the current string has been padded.
     *        If this parameter is smaller than the current string's length, the current string will be returned as it is.
     *
     * @param fillString The string to pad the current string with.
     *        If this string is too long, it will be truncated and the left-most part will be applied.
     *        The default value for this parameter is " " (U+0020).
     */
    padStart(maxLength: number, fillString?: string): string;

    /**
     * Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.
     * The padding is applied from the end (right) of the current string.
     *
     * @param maxLength The length of the resulting string once the current string has been padded.
     *        If this parameter is smaller than the current string's length, the current string will be returned as it is.
     *
     * @param fillString The string to pad the current string with.
     *        If this string is too long, it will be truncated and the left-most part will be applied.
     *        The default value for this parameter is " " (U+0020).
     */
    padEnd(maxLength: number, fillString?: string): string;
}
`;
const dts$U = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Int8ArrayConstructor {\n    new (): Int8Array;\n}\n\ninterface Uint8ArrayConstructor {\n    new (): Uint8Array;\n}\n\ninterface Uint8ClampedArrayConstructor {\n    new (): Uint8ClampedArray;\n}\n\ninterface Int16ArrayConstructor {\n    new (): Int16Array;\n}\n\ninterface Uint16ArrayConstructor {\n    new (): Uint16Array;\n}\n\ninterface Int32ArrayConstructor {\n    new (): Int32Array;\n}\n\ninterface Uint32ArrayConstructor {\n    new (): Uint32Array;\n}\n\ninterface Float32ArrayConstructor {\n    new (): Float32Array;\n}\n\ninterface Float64ArrayConstructor {\n    new (): Float64Array;\n}\n';
const VFS_TS_562_ES2017_FILES = (options) => {
  return {
    ...VFS_TS_562_ES2016_FILES(options),
    "/lib.es2017.date.d.ts": dts$$,
    "/lib.es2017.d.ts": dts$_,
    "/lib.es2017.full.d.ts": options.full ? dts$Z : dts$_,
    "/lib.es2017.intl.d.ts": dts$Y,
    "/lib.es2017.object.d.ts": dts$X,
    "/lib.es2017.sharedmemory.d.ts": dts$W,
    "/lib.es2017.string.d.ts": dts$V,
    "/lib.es2017.typedarrays.d.ts": dts$U
  };
};
const dts$T = `/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


/// <reference no-default-lib="true"/>

/// <reference lib="es2018.asynciterable" />

interface AsyncGenerator<T = unknown, TReturn = any, TNext = any> extends AsyncIteratorObject<T, TReturn, TNext> {
    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.
    next(...[value]: [] | [TNext]): Promise<IteratorResult<T, TReturn>>;
    return(value: TReturn | PromiseLike<TReturn>): Promise<IteratorResult<T, TReturn>>;
    throw(e: any): Promise<IteratorResult<T, TReturn>>;
    [Symbol.asyncIterator](): AsyncGenerator<T, TReturn, TNext>;
}

interface AsyncGeneratorFunction {
    /**
     * Creates a new AsyncGenerator object.
     * @param args A list of arguments the function accepts.
     */
    new (...args: any[]): AsyncGenerator;
    /**
     * Creates a new AsyncGenerator object.
     * @param args A list of arguments the function accepts.
     */
    (...args: any[]): AsyncGenerator;
    /**
     * The length of the arguments.
     */
    readonly length: number;
    /**
     * Returns the name of the function.
     */
    readonly name: string;
    /**
     * A reference to the prototype.
     */
    readonly prototype: AsyncGenerator;
}

interface AsyncGeneratorFunctionConstructor {
    /**
     * Creates a new AsyncGenerator function.
     * @param args A list of arguments the function accepts.
     */
    new (...args: string[]): AsyncGeneratorFunction;
    /**
     * Creates a new AsyncGenerator function.
     * @param args A list of arguments the function accepts.
     */
    (...args: string[]): AsyncGeneratorFunction;
    /**
     * The length of the arguments.
     */
    readonly length: number;
    /**
     * Returns the name of the function.
     */
    readonly name: string;
    /**
     * A reference to the prototype.
     */
    readonly prototype: AsyncGeneratorFunction;
}
`;
const dts$S = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015.symbol" />\n/// <reference lib="es2015.iterable" />\n\ninterface SymbolConstructor {\n    /**\n     * A method that returns the default async iterator for an object. Called by the semantics of\n     * the for-await-of statement.\n     */\n    readonly asyncIterator: unique symbol;\n}\n\ninterface AsyncIterator<T, TReturn = any, TNext = any> {\n    // NOTE: \'next\' is defined using a tuple to ensure we report the correct assignability errors in all places.\n    next(...[value]: [] | [TNext]): Promise<IteratorResult<T, TReturn>>;\n    return?(value?: TReturn | PromiseLike<TReturn>): Promise<IteratorResult<T, TReturn>>;\n    throw?(e?: any): Promise<IteratorResult<T, TReturn>>;\n}\n\ninterface AsyncIterable<T, TReturn = any, TNext = any> {\n    [Symbol.asyncIterator](): AsyncIterator<T, TReturn, TNext>;\n}\n\n/**\n * Describes a user-defined {@link AsyncIterator} that is also async iterable.\n */\ninterface AsyncIterableIterator<T, TReturn = any, TNext = any> extends AsyncIterator<T, TReturn, TNext> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<T, TReturn, TNext>;\n}\n\n/**\n * Describes an {@link AsyncIterator} produced by the runtime that inherits from the intrinsic `AsyncIterator.prototype`.\n */\ninterface AsyncIteratorObject<T, TReturn = unknown, TNext = unknown> extends AsyncIterator<T, TReturn, TNext> {\n    [Symbol.asyncIterator](): AsyncIteratorObject<T, TReturn, TNext>;\n}\n';
const dts$R = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2017" />\n/// <reference lib="es2018.asynciterable" />\n/// <reference lib="es2018.asyncgenerator" />\n/// <reference lib="es2018.promise" />\n/// <reference lib="es2018.regexp" />\n/// <reference lib="es2018.intl" />\n';
const dts$Q = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2018" />\n/// <reference lib="dom" />\n/// <reference lib="webworker.importscripts" />\n/// <reference lib="scripthost" />\n/// <reference lib="dom.iterable" />\n/// <reference lib="dom.asynciterable" />\n';
const dts$P = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare namespace Intl {\n    // http://cldr.unicode.org/index/cldr-spec/plural-rules#TOC-Determining-Plural-Categories\n    type LDMLPluralRule = "zero" | "one" | "two" | "few" | "many" | "other";\n    type PluralRuleType = "cardinal" | "ordinal";\n\n    interface PluralRulesOptions {\n        localeMatcher?: "lookup" | "best fit" | undefined;\n        type?: PluralRuleType | undefined;\n        minimumIntegerDigits?: number | undefined;\n        minimumFractionDigits?: number | undefined;\n        maximumFractionDigits?: number | undefined;\n        minimumSignificantDigits?: number | undefined;\n        maximumSignificantDigits?: number | undefined;\n    }\n\n    interface ResolvedPluralRulesOptions {\n        locale: string;\n        pluralCategories: LDMLPluralRule[];\n        type: PluralRuleType;\n        minimumIntegerDigits: number;\n        minimumFractionDigits: number;\n        maximumFractionDigits: number;\n        minimumSignificantDigits?: number;\n        maximumSignificantDigits?: number;\n    }\n\n    interface PluralRules {\n        resolvedOptions(): ResolvedPluralRulesOptions;\n        select(n: number): LDMLPluralRule;\n    }\n\n    interface PluralRulesConstructor {\n        new (locales?: string | readonly string[], options?: PluralRulesOptions): PluralRules;\n        (locales?: string | readonly string[], options?: PluralRulesOptions): PluralRules;\n        supportedLocalesOf(locales: string | readonly string[], options?: { localeMatcher?: "lookup" | "best fit"; }): string[];\n    }\n\n    const PluralRules: PluralRulesConstructor;\n\n    interface NumberFormatPartTypeRegistry {\n        literal: never;\n        nan: never;\n        infinity: never;\n        percent: never;\n        integer: never;\n        group: never;\n        decimal: never;\n        fraction: never;\n        plusSign: never;\n        minusSign: never;\n        percentSign: never;\n        currency: never;\n    }\n\n    type NumberFormatPartTypes = keyof NumberFormatPartTypeRegistry;\n\n    interface NumberFormatPart {\n        type: NumberFormatPartTypes;\n        value: string;\n    }\n\n    interface NumberFormat {\n        formatToParts(number?: number | bigint): NumberFormatPart[];\n    }\n}\n';
const dts$O = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/**\n * Represents the completion of an asynchronous operation\n */\ninterface Promise<T> {\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): Promise<T>;\n}\n';
const dts$N = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface RegExpMatchArray {\n    groups?: {\n        [key: string]: string;\n    };\n}\n\ninterface RegExpExecArray {\n    groups?: {\n        [key: string]: string;\n    };\n}\n\ninterface RegExp {\n    /**\n     * Returns a Boolean value indicating the state of the dotAll flag (s) used with a regular expression.\n     * Default is false. Read-only.\n     */\n    readonly dotAll: boolean;\n}\n';
const VFS_TS_562_ES2018_FILES = (options) => {
  return {
    ...VFS_TS_562_ES2017_FILES(options),
    "/lib.es2018.asyncgenerator.d.ts": dts$T,
    "/lib.es2018.asynciterable.d.ts": dts$S,
    "/lib.es2018.d.ts": dts$R,
    "/lib.es2018.full.d.ts": options.full ? dts$Q : dts$R,
    "/lib.es2018.intl.d.ts": dts$P,
    "/lib.es2018.promise.d.ts": dts$O,
    "/lib.es2018.regexp.d.ts": dts$N
  };
};
const dts$M = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ntype FlatArray<Arr, Depth extends number> = {\n    done: Arr;\n    recur: Arr extends ReadonlyArray<infer InnerArr> ? FlatArray<InnerArr, [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][Depth]>\n        : Arr;\n}[Depth extends -1 ? "done" : "recur"];\n\ninterface ReadonlyArray<T> {\n    /**\n     * Calls a defined callback function on each element of an array. Then, flattens the result into\n     * a new array.\n     * This is identical to a map followed by flat with depth 1.\n     *\n     * @param callback A function that accepts up to three arguments. The flatMap method calls the\n     * callback function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callback function. If\n     * thisArg is omitted, undefined is used as the this value.\n     */\n    flatMap<U, This = undefined>(\n        callback: (this: This, value: T, index: number, array: T[]) => U | ReadonlyArray<U>,\n        thisArg?: This,\n    ): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<A, D extends number = 1>(\n        this: A,\n        depth?: D,\n    ): FlatArray<A, D>[];\n}\n\ninterface Array<T> {\n    /**\n     * Calls a defined callback function on each element of an array. Then, flattens the result into\n     * a new array.\n     * This is identical to a map followed by flat with depth 1.\n     *\n     * @param callback A function that accepts up to three arguments. The flatMap method calls the\n     * callback function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callback function. If\n     * thisArg is omitted, undefined is used as the this value.\n     */\n    flatMap<U, This = undefined>(\n        callback: (this: This, value: T, index: number, array: T[]) => U | ReadonlyArray<U>,\n        thisArg?: This,\n    ): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<A, D extends number = 1>(\n        this: A,\n        depth?: D,\n    ): FlatArray<A, D>[];\n}\n';
const dts$L = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2018" />\n/// <reference lib="es2019.array" />\n/// <reference lib="es2019.object" />\n/// <reference lib="es2019.string" />\n/// <reference lib="es2019.symbol" />\n/// <reference lib="es2019.intl" />\n';
const dts$K = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2019" />\n/// <reference lib="dom" />\n/// <reference lib="webworker.importscripts" />\n/// <reference lib="scripthost" />\n/// <reference lib="dom.iterable" />\n/// <reference lib="dom.asynciterable" />\n';
const dts$J = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare namespace Intl {\n    interface DateTimeFormatPartTypesRegistry {\n        unknown: never;\n    }\n}\n';
const dts$I = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015.iterable" />\n\ninterface ObjectConstructor {\n    /**\n     * Returns an object created by key-value entries for properties and methods\n     * @param entries An iterable object that contains key-value entries for properties and methods.\n     */\n    fromEntries<T = any>(entries: Iterable<readonly [PropertyKey, T]>): { [k: string]: T; };\n\n    /**\n     * Returns an object created by key-value entries for properties and methods\n     * @param entries An iterable object that contains key-value entries for properties and methods.\n     */\n    fromEntries(entries: Iterable<readonly any[]>): any;\n}\n';
const dts$H = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface String {\n    /** Removes the trailing white space and line terminator characters from a string. */\n    trimEnd(): string;\n\n    /** Removes the leading white space and line terminator characters from a string. */\n    trimStart(): string;\n\n    /**\n     * Removes the leading white space and line terminator characters from a string.\n     * @deprecated A legacy feature for browser compatibility. Use `trimStart` instead\n     */\n    trimLeft(): string;\n\n    /**\n     * Removes the trailing white space and line terminator characters from a string.\n     * @deprecated A legacy feature for browser compatibility. Use `trimEnd` instead\n     */\n    trimRight(): string;\n}\n';
const dts$G = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Symbol {\n    /**\n     * Expose the [[Description]] internal slot of a symbol directly.\n     */\n    readonly description: string | undefined;\n}\n';
const VFS_TS_562_ES2019_FILES = (options) => {
  return {
    ...VFS_TS_562_ES2018_FILES(options),
    "/lib.es2019.array.d.ts": dts$M,
    "/lib.es2019.d.ts": dts$L,
    "/lib.es2019.full.d.ts": options.full ? dts$K : dts$L,
    "/lib.es2019.intl.d.ts": dts$J,
    "/lib.es2019.object.d.ts": dts$I,
    "/lib.es2019.string.d.ts": dts$H,
    "/lib.es2019.symbol.d.ts": dts$G
  };
};
const dts$F = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2020.intl" />\n\ninterface BigIntToLocaleStringOptions {\n    /**\n     * The locale matching algorithm to use.The default is "best fit". For information about this option, see the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation Intl page}.\n     */\n    localeMatcher?: string;\n    /**\n     * The formatting style to use , the default is "decimal".\n     */\n    style?: string;\n\n    numberingSystem?: string;\n    /**\n     * The unit to use in unit formatting, Possible values are core unit identifiers, defined in UTS #35, Part 2, Section 6. A subset of units from the full list was selected for use in ECMAScript. Pairs of simple units can be concatenated with "-per-" to make a compound unit. There is no default value; if the style is "unit", the unit property must be provided.\n     */\n    unit?: string;\n\n    /**\n     * The unit formatting style to use in unit formatting, the defaults is "short".\n     */\n    unitDisplay?: string;\n\n    /**\n     * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the Current currency & funds code list. There is no default value; if the style is "currency", the currency property must be provided. It is only used when [[Style]] has the value "currency".\n     */\n    currency?: string;\n\n    /**\n     * How to display the currency in currency formatting. It is only used when [[Style]] has the value "currency". The default is "symbol".\n     *\n     * "symbol" to use a localized currency symbol such as €,\n     *\n     * "code" to use the ISO currency code,\n     *\n     * "name" to use a localized currency name such as "dollar"\n     */\n    currencyDisplay?: string;\n\n    /**\n     * Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. The default is true.\n     */\n    useGrouping?: boolean;\n\n    /**\n     * The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.\n     */\n    minimumIntegerDigits?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;\n\n    /**\n     * The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn\'t provide that information).\n     */\n    minimumFractionDigits?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20;\n\n    /**\n     * The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn\'t provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.\n     */\n    maximumFractionDigits?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20;\n\n    /**\n     * The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.\n     */\n    minimumSignificantDigits?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;\n\n    /**\n     * The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21.\n     */\n    maximumSignificantDigits?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;\n\n    /**\n     * The formatting that should be displayed for the number, the defaults is "standard"\n     *\n     *     "standard" plain number formatting\n     *\n     *     "scientific" return the order-of-magnitude for formatted number.\n     *\n     *     "engineering" return the exponent of ten when divisible by three\n     *\n     *     "compact" string representing exponent, defaults is using the "short" form\n     */\n    notation?: string;\n\n    /**\n     * used only when notation is "compact"\n     */\n    compactDisplay?: string;\n}\n\ninterface BigInt {\n    /**\n     * Returns a string representation of an object.\n     * @param radix Specifies a radix for converting numeric values to strings.\n     */\n    toString(radix?: number): string;\n\n    /** Returns a string representation appropriate to the host environment\'s current locale. */\n    toLocaleString(locales?: Intl.LocalesArgument, options?: BigIntToLocaleStringOptions): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): bigint;\n\n    readonly [Symbol.toStringTag]: "BigInt";\n}\n\ninterface BigIntConstructor {\n    (value: bigint | boolean | number | string): bigint;\n    readonly prototype: BigInt;\n\n    /**\n     * Interprets the low bits of a BigInt as a 2\'s-complement signed integer.\n     * All higher bits are discarded.\n     * @param bits The number of low bits to use\n     * @param int The BigInt whose bits to extract\n     */\n    asIntN(bits: number, int: bigint): bigint;\n    /**\n     * Interprets the low bits of a BigInt as an unsigned integer.\n     * All higher bits are discarded.\n     * @param bits The number of low bits to use\n     * @param int The BigInt whose bits to extract\n     */\n    asUintN(bits: number, int: bigint): bigint;\n}\n\ndeclare var BigInt: BigIntConstructor;\n\n/**\n * A typed array of 64-bit signed integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated, an exception is raised.\n */\ninterface BigInt64Array {\n    /** The size in bytes of each element in the array. */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /** The ArrayBuffer instance referenced by the array. */\n    readonly buffer: ArrayBufferLike;\n\n    /** The length in bytes of the array. */\n    readonly byteLength: number;\n\n    /** The offset in bytes of the array. */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /** Yields index, value pairs for every entry in the array. */\n    entries(): ArrayIterator<[number, bigint]>;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns false,\n     * or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: bigint, index: number, array: BigInt64Array) => boolean, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: bigint, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: bigint, index: number, array: BigInt64Array) => any, thisArg?: any): BigInt64Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: bigint, index: number, array: BigInt64Array) => boolean, thisArg?: any): bigint | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: bigint, index: number, array: BigInt64Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: bigint, index: number, array: BigInt64Array) => void, thisArg?: any): void;\n\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: bigint, fromIndex?: number): boolean;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: bigint, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /** Yields each index in the array. */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: bigint, fromIndex?: number): number;\n\n    /** The length of the array. */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: bigint, index: number, array: BigInt64Array) => bigint, thisArg?: any): BigInt64Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigInt64Array) => bigint): bigint;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigInt64Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigInt64Array) => bigint): bigint;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigInt64Array) => U, initialValue: U): U;\n\n    /** Reverses the elements in the array. */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<bigint>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array.\n     */\n    slice(start?: number, end?: number): BigInt64Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls the\n     * predicate function for each element in the array until the predicate returns true, or until\n     * the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: bigint, index: number, array: BigInt64Array) => boolean, thisArg?: any): boolean;\n\n    /**\n     * Sorts the array.\n     * @param compareFn The function used to determine the order of the elements. If omitted, the elements are sorted in ascending order.\n     */\n    sort(compareFn?: (a: bigint, b: bigint) => number | bigint): this;\n\n    /**\n     * Gets a new BigInt64Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): BigInt64Array;\n\n    /** Converts the array to a string by using the current locale. */\n    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;\n\n    /** Returns a string representation of the array. */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): BigInt64Array;\n\n    /** Yields each value in the array. */\n    values(): ArrayIterator<bigint>;\n\n    [Symbol.iterator](): ArrayIterator<bigint>;\n\n    readonly [Symbol.toStringTag]: "BigInt64Array";\n\n    [index: number]: bigint;\n}\n\ninterface BigInt64ArrayConstructor {\n    readonly prototype: BigInt64Array;\n    new (length?: number): BigInt64Array;\n    new (array: Iterable<bigint>): BigInt64Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): BigInt64Array;\n\n    /** The size in bytes of each element in the array. */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: bigint[]): BigInt64Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from(arrayLike: ArrayLike<bigint>): BigInt64Array;\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => bigint, thisArg?: any): BigInt64Array;\n}\n\ndeclare var BigInt64Array: BigInt64ArrayConstructor;\n\n/**\n * A typed array of 64-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated, an exception is raised.\n */\ninterface BigUint64Array {\n    /** The size in bytes of each element in the array. */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /** The ArrayBuffer instance referenced by the array. */\n    readonly buffer: ArrayBufferLike;\n\n    /** The length in bytes of the array. */\n    readonly byteLength: number;\n\n    /** The offset in bytes of the array. */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /** Yields index, value pairs for every entry in the array. */\n    entries(): ArrayIterator<[number, bigint]>;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns false,\n     * or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: bigint, index: number, array: BigUint64Array) => boolean, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: bigint, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: bigint, index: number, array: BigUint64Array) => any, thisArg?: any): BigUint64Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: bigint, index: number, array: BigUint64Array) => boolean, thisArg?: any): bigint | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: bigint, index: number, array: BigUint64Array) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: bigint, index: number, array: BigUint64Array) => void, thisArg?: any): void;\n\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: bigint, fromIndex?: number): boolean;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: bigint, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /** Yields each index in the array. */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: bigint, fromIndex?: number): number;\n\n    /** The length of the array. */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: bigint, index: number, array: BigUint64Array) => bigint, thisArg?: any): BigUint64Array;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigUint64Array) => bigint): bigint;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigUint64Array) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigUint64Array) => bigint): bigint;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigUint64Array) => U, initialValue: U): U;\n\n    /** Reverses the elements in the array. */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<bigint>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array.\n     */\n    slice(start?: number, end?: number): BigUint64Array;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls the\n     * predicate function for each element in the array until the predicate returns true, or until\n     * the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: bigint, index: number, array: BigUint64Array) => boolean, thisArg?: any): boolean;\n\n    /**\n     * Sorts the array.\n     * @param compareFn The function used to determine the order of the elements. If omitted, the elements are sorted in ascending order.\n     */\n    sort(compareFn?: (a: bigint, b: bigint) => number | bigint): this;\n\n    /**\n     * Gets a new BigUint64Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): BigUint64Array;\n\n    /** Converts the array to a string by using the current locale. */\n    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;\n\n    /** Returns a string representation of the array. */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): BigUint64Array;\n\n    /** Yields each value in the array. */\n    values(): ArrayIterator<bigint>;\n\n    [Symbol.iterator](): ArrayIterator<bigint>;\n\n    readonly [Symbol.toStringTag]: "BigUint64Array";\n\n    [index: number]: bigint;\n}\n\ninterface BigUint64ArrayConstructor {\n    readonly prototype: BigUint64Array;\n    new (length?: number): BigUint64Array;\n    new (array: Iterable<bigint>): BigUint64Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): BigUint64Array;\n\n    /** The size in bytes of each element in the array. */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: bigint[]): BigUint64Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from(arrayLike: ArrayLike<bigint>): BigUint64Array;\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => bigint, thisArg?: any): BigUint64Array;\n}\n\ndeclare var BigUint64Array: BigUint64ArrayConstructor;\n\ninterface DataView {\n    /**\n     * Gets the BigInt64 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getBigInt64(byteOffset: number, littleEndian?: boolean): bigint;\n\n    /**\n     * Gets the BigUint64 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getBigUint64(byteOffset: number, littleEndian?: boolean): bigint;\n\n    /**\n     * Stores a BigInt64 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setBigInt64(byteOffset: number, value: bigint, littleEndian?: boolean): void;\n\n    /**\n     * Stores a BigUint64 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setBigUint64(byteOffset: number, value: bigint, littleEndian?: boolean): void;\n}\n\ndeclare namespace Intl {\n    interface NumberFormat {\n        format(value: number | bigint): string;\n    }\n}\n';
const dts$E = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2020.intl" />\n\ninterface Date {\n    /**\n     * Converts a date and time to a string by using the current or specified locale.\n     * @param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n     * Converts a date to a string by using the current or specified locale.\n     * @param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n     * Converts a time to a string by using the current or specified locale.\n     * @param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;\n}\n';
const dts$D = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2019" />\n/// <reference lib="es2020.bigint" />\n/// <reference lib="es2020.date" />\n/// <reference lib="es2020.number" />\n/// <reference lib="es2020.promise" />\n/// <reference lib="es2020.sharedmemory" />\n/// <reference lib="es2020.string" />\n/// <reference lib="es2020.symbol.wellknown" />\n/// <reference lib="es2020.intl" />\n';
const dts$C = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2020" />\n/// <reference lib="dom" />\n/// <reference lib="webworker.importscripts" />\n/// <reference lib="scripthost" />\n/// <reference lib="dom.iterable" />\n/// <reference lib="dom.asynciterable" />\n';
const dts$B = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2018.intl" />\ndeclare namespace Intl {\n    /**\n     * A string that is a valid [Unicode BCP 47 Locale Identifier](https://unicode.org/reports/tr35/#Unicode_locale_identifier).\n     *\n     * For example: "fa", "es-MX", "zh-Hant-TW".\n     *\n     * See [MDN - Intl - locales argument](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n     */\n    type UnicodeBCP47LocaleIdentifier = string;\n\n    /**\n     * Unit to use in the relative time internationalized message.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/format#Parameters).\n     */\n    type RelativeTimeFormatUnit =\n        | "year"\n        | "years"\n        | "quarter"\n        | "quarters"\n        | "month"\n        | "months"\n        | "week"\n        | "weeks"\n        | "day"\n        | "days"\n        | "hour"\n        | "hours"\n        | "minute"\n        | "minutes"\n        | "second"\n        | "seconds";\n\n    /**\n     * Value of the `unit` property in objects returned by\n     * `Intl.RelativeTimeFormat.prototype.formatToParts()`. `formatToParts` and\n     * `format` methods accept either singular or plural unit names as input,\n     * but `formatToParts` only outputs singular (e.g. "day") not plural (e.g.\n     * "days").\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts#Using_formatToParts).\n     */\n    type RelativeTimeFormatUnitSingular =\n        | "year"\n        | "quarter"\n        | "month"\n        | "week"\n        | "day"\n        | "hour"\n        | "minute"\n        | "second";\n\n    /**\n     * The locale matching algorithm to use.\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).\n     */\n    type RelativeTimeFormatLocaleMatcher = "lookup" | "best fit";\n\n    /**\n     * The format of output message.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters).\n     */\n    type RelativeTimeFormatNumeric = "always" | "auto";\n\n    /**\n     * The length of the internationalized message.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters).\n     */\n    type RelativeTimeFormatStyle = "long" | "short" | "narrow";\n\n    /**\n     * The locale or locales to use\n     *\n     * See [MDN - Intl - locales argument](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n     */\n    type LocalesArgument = UnicodeBCP47LocaleIdentifier | Locale | readonly (UnicodeBCP47LocaleIdentifier | Locale)[] | undefined;\n\n    /**\n     * An object with some or all of properties of `options` parameter\n     * of `Intl.RelativeTimeFormat` constructor.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters).\n     */\n    interface RelativeTimeFormatOptions {\n        /** The locale matching algorithm to use. For information about this option, see [Intl page](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation). */\n        localeMatcher?: RelativeTimeFormatLocaleMatcher;\n        /** The format of output message. */\n        numeric?: RelativeTimeFormatNumeric;\n        /** The length of the internationalized message. */\n        style?: RelativeTimeFormatStyle;\n    }\n\n    /**\n     * An object with properties reflecting the locale\n     * and formatting options computed during initialization\n     * of the `Intl.RelativeTimeFormat` object\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/resolvedOptions#Description).\n     */\n    interface ResolvedRelativeTimeFormatOptions {\n        locale: UnicodeBCP47LocaleIdentifier;\n        style: RelativeTimeFormatStyle;\n        numeric: RelativeTimeFormatNumeric;\n        numberingSystem: string;\n    }\n\n    /**\n     * An object representing the relative time format in parts\n     * that can be used for custom locale-aware formatting.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts#Using_formatToParts).\n     */\n    type RelativeTimeFormatPart =\n        | {\n            type: "literal";\n            value: string;\n        }\n        | {\n            type: Exclude<NumberFormatPartTypes, "literal">;\n            value: string;\n            unit: RelativeTimeFormatUnitSingular;\n        };\n\n    interface RelativeTimeFormat {\n        /**\n         * Formats a value and a unit according to the locale\n         * and formatting options of the given\n         * [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat)\n         * object.\n         *\n         * While this method automatically provides the correct plural forms,\n         * the grammatical form is otherwise as neutral as possible.\n         *\n         * It is the caller\'s responsibility to handle cut-off logic\n         * such as deciding between displaying "in 7 days" or "in 1 week".\n         * This API does not support relative dates involving compound units.\n         * e.g "in 5 days and 4 hours".\n         *\n         * @param value -  Numeric value to use in the internationalized relative time message\n         *\n         * @param unit - [Unit](https://tc39.es/ecma402/#sec-singularrelativetimeunit) to use in the relative time internationalized message.\n         *\n         * @throws `RangeError` if `unit` was given something other than `unit` possible values\n         *\n         * @returns {string} Internationalized relative time message as string\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/format).\n         */\n        format(value: number, unit: RelativeTimeFormatUnit): string;\n\n        /**\n         *  Returns an array of objects representing the relative time format in parts that can be used for custom locale-aware formatting.\n         *\n         *  @param value - Numeric value to use in the internationalized relative time message\n         *\n         *  @param unit - [Unit](https://tc39.es/ecma402/#sec-singularrelativetimeunit) to use in the relative time internationalized message.\n         *\n         *  @throws `RangeError` if `unit` was given something other than `unit` possible values\n         *\n         *  [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts).\n         */\n        formatToParts(value: number, unit: RelativeTimeFormatUnit): RelativeTimeFormatPart[];\n\n        /**\n         * Provides access to the locale and options computed during initialization of this `Intl.RelativeTimeFormat` object.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/resolvedOptions).\n         */\n        resolvedOptions(): ResolvedRelativeTimeFormatOptions;\n    }\n\n    /**\n     * The [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat)\n     * object is a constructor for objects that enable language-sensitive relative time formatting.\n     *\n     * [Compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat#Browser_compatibility).\n     */\n    const RelativeTimeFormat: {\n        /**\n         * Creates [Intl.RelativeTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat) objects\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the locales argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options - An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters)\n         *  with some or all of options of `RelativeTimeFormatOptions`.\n         *\n         * @returns [Intl.RelativeTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat) object.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat).\n         */\n        new (\n            locales?: LocalesArgument,\n            options?: RelativeTimeFormatOptions,\n        ): RelativeTimeFormat;\n\n        /**\n         * Returns an array containing those of the provided locales\n         * that are supported in date and time formatting\n         * without having to fall back to the runtime\'s default locale.\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the locales argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options - An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters)\n         *  with some or all of options of the formatting.\n         *\n         * @returns An array containing those of the provided locales\n         *  that are supported in date and time formatting\n         *  without having to fall back to the runtime\'s default locale.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/supportedLocalesOf).\n         */\n        supportedLocalesOf(\n            locales?: LocalesArgument,\n            options?: RelativeTimeFormatOptions,\n        ): UnicodeBCP47LocaleIdentifier[];\n    };\n\n    interface NumberFormatOptionsStyleRegistry {\n        unit: never;\n    }\n\n    interface NumberFormatOptionsCurrencyDisplayRegistry {\n        narrowSymbol: never;\n    }\n\n    interface NumberFormatOptionsSignDisplayRegistry {\n        auto: never;\n        never: never;\n        always: never;\n        exceptZero: never;\n    }\n\n    type NumberFormatOptionsSignDisplay = keyof NumberFormatOptionsSignDisplayRegistry;\n\n    interface NumberFormatOptions {\n        numberingSystem?: string | undefined;\n        compactDisplay?: "short" | "long" | undefined;\n        notation?: "standard" | "scientific" | "engineering" | "compact" | undefined;\n        signDisplay?: NumberFormatOptionsSignDisplay | undefined;\n        unit?: string | undefined;\n        unitDisplay?: "short" | "long" | "narrow" | undefined;\n        currencySign?: "standard" | "accounting" | undefined;\n    }\n\n    interface ResolvedNumberFormatOptions {\n        compactDisplay?: "short" | "long";\n        notation: "standard" | "scientific" | "engineering" | "compact";\n        signDisplay: NumberFormatOptionsSignDisplay;\n        unit?: string;\n        unitDisplay?: "short" | "long" | "narrow";\n        currencySign?: "standard" | "accounting";\n    }\n\n    interface NumberFormatPartTypeRegistry {\n        compact: never;\n        exponentInteger: never;\n        exponentMinusSign: never;\n        exponentSeparator: never;\n        unit: never;\n        unknown: never;\n    }\n\n    interface DateTimeFormatOptions {\n        calendar?: string | undefined;\n        dayPeriod?: "narrow" | "short" | "long" | undefined;\n        numberingSystem?: string | undefined;\n\n        dateStyle?: "full" | "long" | "medium" | "short" | undefined;\n        timeStyle?: "full" | "long" | "medium" | "short" | undefined;\n        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;\n    }\n\n    type LocaleHourCycleKey = "h12" | "h23" | "h11" | "h24";\n    type LocaleCollationCaseFirst = "upper" | "lower" | "false";\n\n    interface LocaleOptions {\n        /** A string containing the language, and the script and region if available. */\n        baseName?: string;\n        /** The part of the Locale that indicates the locale\'s calendar era. */\n        calendar?: string;\n        /** Flag that defines whether case is taken into account for the locale\'s collation rules. */\n        caseFirst?: LocaleCollationCaseFirst;\n        /** The collation type used for sorting */\n        collation?: string;\n        /** The time keeping format convention used by the locale. */\n        hourCycle?: LocaleHourCycleKey;\n        /** The primary language subtag associated with the locale. */\n        language?: string;\n        /** The numeral system used by the locale. */\n        numberingSystem?: string;\n        /** Flag that defines whether the locale has special collation handling for numeric characters. */\n        numeric?: boolean;\n        /** The region of the world (usually a country) associated with the locale. Possible values are region codes as defined by ISO 3166-1. */\n        region?: string;\n        /** The script used for writing the particular language used in the locale. Possible values are script codes as defined by ISO 15924. */\n        script?: string;\n    }\n\n    interface Locale extends LocaleOptions {\n        /** A string containing the language, and the script and region if available. */\n        baseName: string;\n        /** The primary language subtag associated with the locale. */\n        language: string;\n        /** Gets the most likely values for the language, script, and region of the locale based on existing values. */\n        maximize(): Locale;\n        /** Attempts to remove information about the locale that would be added by calling `Locale.maximize()`. */\n        minimize(): Locale;\n        /** Returns the locale\'s full locale identifier string. */\n        toString(): UnicodeBCP47LocaleIdentifier;\n    }\n\n    /**\n     * Constructor creates [Intl.Locale](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale)\n     * objects\n     *\n     * @param tag - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646).\n     *  For the general form and interpretation of the locales argument,\n     *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n     *\n     * @param options - An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale#Parameters) with some or all of options of the locale.\n     *\n     * @returns [Intl.Locale](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale).\n     */\n    const Locale: {\n        new (tag: UnicodeBCP47LocaleIdentifier | Locale, options?: LocaleOptions): Locale;\n    };\n\n    type DisplayNamesFallback =\n        | "code"\n        | "none";\n\n    type DisplayNamesType =\n        | "language"\n        | "region"\n        | "script"\n        | "calendar"\n        | "dateTimeField"\n        | "currency";\n\n    type DisplayNamesLanguageDisplay =\n        | "dialect"\n        | "standard";\n\n    interface DisplayNamesOptions {\n        localeMatcher?: RelativeTimeFormatLocaleMatcher;\n        style?: RelativeTimeFormatStyle;\n        type: DisplayNamesType;\n        languageDisplay?: DisplayNamesLanguageDisplay;\n        fallback?: DisplayNamesFallback;\n    }\n\n    interface ResolvedDisplayNamesOptions {\n        locale: UnicodeBCP47LocaleIdentifier;\n        style: RelativeTimeFormatStyle;\n        type: DisplayNamesType;\n        fallback: DisplayNamesFallback;\n        languageDisplay?: DisplayNamesLanguageDisplay;\n    }\n\n    interface DisplayNames {\n        /**\n         * Receives a code and returns a string based on the locale and options provided when instantiating\n         * [`Intl.DisplayNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames)\n         *\n         * @param code The `code` to provide depends on the `type` passed to display name during creation:\n         *  - If the type is `"region"`, code should be either an [ISO-3166 two letters region code](https://www.iso.org/iso-3166-country-codes.html),\n         *    or a [three digits UN M49 Geographic Regions](https://unstats.un.org/unsd/methodology/m49/).\n         *  - If the type is `"script"`, code should be an [ISO-15924 four letters script code](https://unicode.org/iso15924/iso15924-codes.html).\n         *  - If the type is `"language"`, code should be a `languageCode` ["-" `scriptCode`] ["-" `regionCode` ] *("-" `variant` )\n         *    subsequence of the unicode_language_id grammar in [UTS 35\'s Unicode Language and Locale Identifiers grammar](https://unicode.org/reports/tr35/#Unicode_language_identifier).\n         *    `languageCode` is either a two letters ISO 639-1 language code or a three letters ISO 639-2 language code.\n         *  - If the type is `"currency"`, code should be a [3-letter ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/of).\n         */\n        of(code: string): string | undefined;\n        /**\n         * Returns a new object with properties reflecting the locale and style formatting options computed during the construction of the current\n         * [`Intl/DisplayNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) object.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/resolvedOptions).\n         */\n        resolvedOptions(): ResolvedDisplayNamesOptions;\n    }\n\n    /**\n     * The [`Intl.DisplayNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames)\n     * object enables the consistent translation of language, region and script display names.\n     *\n     * [Compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames#browser_compatibility).\n     */\n    const DisplayNames: {\n        prototype: DisplayNames;\n\n        /**\n         * @param locales A string with a BCP 47 language tag, or an array of such strings.\n         *   For the general form and interpretation of the `locales` argument, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n         *   page.\n         *\n         * @param options An object for setting up a display name.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/DisplayNames).\n         */\n        new (locales: LocalesArgument, options: DisplayNamesOptions): DisplayNames;\n\n        /**\n         * Returns an array containing those of the provided locales that are supported in display names without having to fall back to the runtime\'s default locale.\n         *\n         * @param locales A string with a BCP 47 language tag, or an array of such strings.\n         *   For the general form and interpretation of the `locales` argument, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n         *   page.\n         *\n         * @param options An object with a locale matcher.\n         *\n         * @returns An array of strings representing a subset of the given locale tags that are supported in display names without having to fall back to the runtime\'s default locale.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/supportedLocalesOf).\n         */\n        supportedLocalesOf(locales?: LocalesArgument, options?: { localeMatcher?: RelativeTimeFormatLocaleMatcher; }): UnicodeBCP47LocaleIdentifier[];\n    };\n\n    interface CollatorConstructor {\n        new (locales?: LocalesArgument, options?: CollatorOptions): Collator;\n        (locales?: LocalesArgument, options?: CollatorOptions): Collator;\n        supportedLocalesOf(locales: LocalesArgument, options?: CollatorOptions): string[];\n    }\n\n    interface DateTimeFormatConstructor {\n        new (locales?: LocalesArgument, options?: DateTimeFormatOptions): DateTimeFormat;\n        (locales?: LocalesArgument, options?: DateTimeFormatOptions): DateTimeFormat;\n        supportedLocalesOf(locales: LocalesArgument, options?: DateTimeFormatOptions): string[];\n    }\n\n    interface NumberFormatConstructor {\n        new (locales?: LocalesArgument, options?: NumberFormatOptions): NumberFormat;\n        (locales?: LocalesArgument, options?: NumberFormatOptions): NumberFormat;\n        supportedLocalesOf(locales: LocalesArgument, options?: NumberFormatOptions): string[];\n    }\n\n    interface PluralRulesConstructor {\n        new (locales?: LocalesArgument, options?: PluralRulesOptions): PluralRules;\n        (locales?: LocalesArgument, options?: PluralRulesOptions): PluralRules;\n\n        supportedLocalesOf(locales: LocalesArgument, options?: { localeMatcher?: "lookup" | "best fit"; }): string[];\n    }\n}\n';
const dts$A = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2020.intl" />\n\ninterface Number {\n    /**\n     * Converts a number to a string by using the current or specified locale.\n     * @param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string;\n}\n';
const dts$z = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface PromiseFulfilledResult<T> {\n    status: "fulfilled";\n    value: T;\n}\n\ninterface PromiseRejectedResult {\n    status: "rejected";\n    reason: any;\n}\n\ntype PromiseSettledResult<T> = PromiseFulfilledResult<T> | PromiseRejectedResult;\n\ninterface PromiseConstructor {\n    /**\n     * Creates a Promise that is resolved with an array of results when all\n     * of the provided Promises resolve or reject.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    allSettled<T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: PromiseSettledResult<Awaited<T[P]>>; }>;\n\n    /**\n     * Creates a Promise that is resolved with an array of results when all\n     * of the provided Promises resolve or reject.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    allSettled<T>(values: Iterable<T | PromiseLike<T>>): Promise<PromiseSettledResult<Awaited<T>>[]>;\n}\n';
const dts$y = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Atomics {\n    /**\n     * Adds a value to the value at the given position in the array, returning the original value.\n     * Until this atomic operation completes, any other read or write operation against the array\n     * will block.\n     */\n    add(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n\n    /**\n     * Stores the bitwise AND of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or\n     * write operation against the array will block.\n     */\n    and(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n\n    /**\n     * Replaces the value at the given position in the array if the original value equals the given\n     * expected value, returning the original value. Until this atomic operation completes, any\n     * other read or write operation against the array will block.\n     */\n    compareExchange(typedArray: BigInt64Array | BigUint64Array, index: number, expectedValue: bigint, replacementValue: bigint): bigint;\n\n    /**\n     * Replaces the value at the given position in the array, returning the original value. Until\n     * this atomic operation completes, any other read or write operation against the array will\n     * block.\n     */\n    exchange(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n\n    /**\n     * Returns the value at the given position in the array. Until this atomic operation completes,\n     * any other read or write operation against the array will block.\n     */\n    load(typedArray: BigInt64Array | BigUint64Array, index: number): bigint;\n\n    /**\n     * Stores the bitwise OR of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or write\n     * operation against the array will block.\n     */\n    or(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n\n    /**\n     * Stores a value at the given position in the array, returning the new value. Until this\n     * atomic operation completes, any other read or write operation against the array will block.\n     */\n    store(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n\n    /**\n     * Subtracts a value from the value at the given position in the array, returning the original\n     * value. Until this atomic operation completes, any other read or write operation against the\n     * array will block.\n     */\n    sub(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n\n    /**\n     * If the value at the given position in the array is equal to the provided value, the current\n     * agent is put to sleep causing execution to suspend until the timeout expires (returning\n     * `"timed-out"`) or until the agent is awoken (returning `"ok"`); otherwise, returns\n     * `"not-equal"`.\n     */\n    wait(typedArray: BigInt64Array, index: number, value: bigint, timeout?: number): "ok" | "not-equal" | "timed-out";\n\n    /**\n     * Wakes up sleeping agents that are waiting on the given index of the array, returning the\n     * number of agents that were awoken.\n     * @param typedArray A shared BigInt64Array.\n     * @param index The position in the typedArray to wake up on.\n     * @param count The number of sleeping agents to notify. Defaults to +Infinity.\n     */\n    notify(typedArray: BigInt64Array, index: number, count?: number): number;\n\n    /**\n     * Stores the bitwise XOR of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or write\n     * operation against the array will block.\n     */\n    xor(typedArray: BigInt64Array | BigUint64Array, index: number, value: bigint): bigint;\n}\n';
const dts$x = `/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


/// <reference no-default-lib="true"/>

/// <reference lib="es2020.symbol.wellknown" />

interface String {
    /**
     * Matches a string with a regular expression, and returns an iterable of matches
     * containing the results of that search.
     * @param regexp A variable name or string literal containing the regular expression pattern and flags.
     */
    matchAll(regexp: RegExp): RegExpStringIterator<RegExpExecArray>;

    /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */
    toLocaleLowerCase(locales?: Intl.LocalesArgument): string;

    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */
    toLocaleUpperCase(locales?: Intl.LocalesArgument): string;

    /**
     * Determines whether two strings are equivalent in the current or specified locale.
     * @param that String to compare to target string
     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.
     * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.
     */
    localeCompare(that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
}
`;
const dts$w = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015.iterable" />\n/// <reference lib="es2015.symbol" />\n\ninterface SymbolConstructor {\n    /**\n     * A regular expression method that matches the regular expression against a string. Called\n     * by the String.prototype.matchAll method.\n     */\n    readonly matchAll: unique symbol;\n}\n\ninterface RegExpStringIterator<T> extends IteratorObject<T, BuiltinIteratorReturn, unknown> {\n    [Symbol.iterator](): RegExpStringIterator<T>;\n}\n\ninterface RegExp {\n    /**\n     * Matches a string with this regular expression, and returns an iterable of matches\n     * containing the results of that search.\n     * @param string A string to search within.\n     */\n    [Symbol.matchAll](str: string): RegExpStringIterator<RegExpMatchArray>;\n}\n';
const VFS_TS_562_ES2020_FILES = (options) => {
  return {
    ...VFS_TS_562_ES2019_FILES(options),
    "/lib.es2020.bigint.d.ts": dts$F,
    "/lib.es2020.date.d.ts": dts$E,
    "/lib.es2020.d.ts": dts$D,
    "/lib.es2020.full.d.ts": options.full ? dts$C : dts$D,
    "/lib.es2020.intl.d.ts": dts$B,
    "/lib.es2020.number.d.ts": dts$A,
    "/lib.es2020.promise.d.ts": dts$z,
    "/lib.es2020.sharedmemory.d.ts": dts$y,
    "/lib.es2020.string.d.ts": dts$x,
    "/lib.es2020.symbol.wellknown.d.ts": dts$w
  };
};
const dts$v = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2020" />\n/// <reference lib="es2021.promise" />\n/// <reference lib="es2021.string" />\n/// <reference lib="es2021.weakref" />\n/// <reference lib="es2021.intl" />\n';
const dts$u = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2021" />\n/// <reference lib="dom" />\n/// <reference lib="webworker.importscripts" />\n/// <reference lib="scripthost" />\n/// <reference lib="dom.iterable" />\n/// <reference lib="dom.asynciterable" />\n';
const dts$t = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare namespace Intl {\n    interface DateTimeFormatPartTypesRegistry {\n        fractionalSecond: any;\n    }\n\n    interface DateTimeFormatOptions {\n        formatMatcher?: "basic" | "best fit" | "best fit" | undefined;\n        dateStyle?: "full" | "long" | "medium" | "short" | undefined;\n        timeStyle?: "full" | "long" | "medium" | "short" | undefined;\n        dayPeriod?: "narrow" | "short" | "long" | undefined;\n        fractionalSecondDigits?: 1 | 2 | 3 | undefined;\n    }\n\n    interface DateTimeRangeFormatPart extends DateTimeFormatPart {\n        source: "startRange" | "endRange" | "shared";\n    }\n\n    interface DateTimeFormat {\n        formatRange(startDate: Date | number | bigint, endDate: Date | number | bigint): string;\n        formatRangeToParts(startDate: Date | number | bigint, endDate: Date | number | bigint): DateTimeRangeFormatPart[];\n    }\n\n    interface ResolvedDateTimeFormatOptions {\n        formatMatcher?: "basic" | "best fit" | "best fit";\n        dateStyle?: "full" | "long" | "medium" | "short";\n        timeStyle?: "full" | "long" | "medium" | "short";\n        hourCycle?: "h11" | "h12" | "h23" | "h24";\n        dayPeriod?: "narrow" | "short" | "long";\n        fractionalSecondDigits?: 1 | 2 | 3;\n    }\n\n    /**\n     * The locale matching algorithm to use.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat#parameters).\n     */\n    type ListFormatLocaleMatcher = "lookup" | "best fit";\n\n    /**\n     * The format of output message.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat#parameters).\n     */\n    type ListFormatType = "conjunction" | "disjunction" | "unit";\n\n    /**\n     * The length of the formatted message.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat#parameters).\n     */\n    type ListFormatStyle = "long" | "short" | "narrow";\n\n    /**\n     * An object with some or all properties of the `Intl.ListFormat` constructor `options` parameter.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat#parameters).\n     */\n    interface ListFormatOptions {\n        /** The locale matching algorithm to use. For information about this option, see [Intl page](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation). */\n        localeMatcher?: ListFormatLocaleMatcher | undefined;\n        /** The format of output message. */\n        type?: ListFormatType | undefined;\n        /** The length of the internationalized message. */\n        style?: ListFormatStyle | undefined;\n    }\n\n    interface ResolvedListFormatOptions {\n        locale: string;\n        style: ListFormatStyle;\n        type: ListFormatType;\n    }\n\n    interface ListFormat {\n        /**\n         * Returns a string with a language-specific representation of the list.\n         *\n         * @param list - An iterable object, such as an [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n         *\n         * @throws `TypeError` if `list` includes something other than the possible values.\n         *\n         * @returns {string} A language-specific formatted string representing the elements of the list.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/format).\n         */\n        format(list: Iterable<string>): string;\n\n        /**\n         * Returns an Array of objects representing the different components that can be used to format a list of values in a locale-aware fashion.\n         *\n         * @param list - An iterable object, such as an [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), to be formatted according to a locale.\n         *\n         * @throws `TypeError` if `list` includes something other than the possible values.\n         *\n         * @returns {{ type: "element" | "literal", value: string; }[]} An Array of components which contains the formatted parts from the list.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/formatToParts).\n         */\n        formatToParts(list: Iterable<string>): { type: "element" | "literal"; value: string; }[];\n\n        /**\n         * Returns a new object with properties reflecting the locale and style\n         * formatting options computed during the construction of the current\n         * `Intl.ListFormat` object.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/resolvedOptions).\n         */\n        resolvedOptions(): ResolvedListFormatOptions;\n    }\n\n    const ListFormat: {\n        prototype: ListFormat;\n\n        /**\n         * Creates [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) objects that\n         * enable language-sensitive list formatting.\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the `locales` argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options - An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat#parameters)\n         *  with some or all options of `ListFormatOptions`.\n         *\n         * @returns [Intl.ListFormatOptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) object.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat).\n         */\n        new (locales?: LocalesArgument, options?: ListFormatOptions): ListFormat;\n\n        /**\n         * Returns an array containing those of the provided locales that are\n         * supported in list formatting without having to fall back to the runtime\'s default locale.\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the `locales` argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options - An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/supportedLocalesOf#parameters).\n         *  with some or all possible options.\n         *\n         * @returns An array of strings representing a subset of the given locale tags that are supported in list\n         *  formatting without having to fall back to the runtime\'s default locale.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/supportedLocalesOf).\n         */\n        supportedLocalesOf(locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">): UnicodeBCP47LocaleIdentifier[];\n    };\n}\n';
const dts$s = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface AggregateError extends Error {\n    errors: any[];\n}\n\ninterface AggregateErrorConstructor {\n    new (errors: Iterable<any>, message?: string): AggregateError;\n    (errors: Iterable<any>, message?: string): AggregateError;\n    readonly prototype: AggregateError;\n}\n\ndeclare var AggregateError: AggregateErrorConstructor;\n\n/**\n * Represents the completion of an asynchronous operation\n */\ninterface PromiseConstructor {\n    /**\n     * The any function returns a promise that is fulfilled by the first given promise to be fulfilled, or rejected with an AggregateError containing an array of rejection reasons if all of the given promises are rejected. It resolves all elements of the passed iterable to promises as it runs this algorithm.\n     * @param values An array or iterable of Promises.\n     * @returns A new Promise.\n     */\n    any<T extends readonly unknown[] | []>(values: T): Promise<Awaited<T[number]>>;\n\n    /**\n     * The any function returns a promise that is fulfilled by the first given promise to be fulfilled, or rejected with an AggregateError containing an array of rejection reasons if all of the given promises are rejected. It resolves all elements of the passed iterable to promises as it runs this algorithm.\n     * @param values An array or iterable of Promises.\n     * @returns A new Promise.\n     */\n    any<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>>;\n}\n';
const dts$r = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface String {\n    /**\n     * Replace all instances of a substring in a string, using a regular expression or search string.\n     * @param searchValue A string to search for.\n     * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n     */\n    replaceAll(searchValue: string | RegExp, replaceValue: string): string;\n\n    /**\n     * Replace all instances of a substring in a string, using a regular expression or search string.\n     * @param searchValue A string to search for.\n     * @param replacer A function that returns the replacement text.\n     */\n    replaceAll(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;\n}\n';
const dts$q = `/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


/// <reference no-default-lib="true"/>

interface WeakRef<T extends WeakKey> {
    readonly [Symbol.toStringTag]: "WeakRef";

    /**
     * Returns the WeakRef instance's target value, or undefined if the target value has been
     * reclaimed.
     * In es2023 the value can be either a symbol or an object, in previous versions only object is permissible.
     */
    deref(): T | undefined;
}

interface WeakRefConstructor {
    readonly prototype: WeakRef<any>;

    /**
     * Creates a WeakRef instance for the given target value.
     * In es2023 the value can be either a symbol or an object, in previous versions only object is permissible.
     * @param target The target value for the WeakRef instance.
     */
    new <T extends WeakKey>(target: T): WeakRef<T>;
}

declare var WeakRef: WeakRefConstructor;

interface FinalizationRegistry<T> {
    readonly [Symbol.toStringTag]: "FinalizationRegistry";

    /**
     * Registers a value with the registry.
     * In es2023 the value can be either a symbol or an object, in previous versions only object is permissible.
     * @param target The target value to register.
     * @param heldValue The value to pass to the finalizer for this value. This cannot be the
     * target value.
     * @param unregisterToken The token to pass to the unregister method to unregister the target
     * value. If not provided, the target cannot be unregistered.
     */
    register(target: WeakKey, heldValue: T, unregisterToken?: WeakKey): void;

    /**
     * Unregisters a value from the registry.
     * In es2023 the value can be either a symbol or an object, in previous versions only object is permissible.
     * @param unregisterToken The token that was used as the unregisterToken argument when calling
     * register to register the target value.
     */
    unregister(unregisterToken: WeakKey): boolean;
}

interface FinalizationRegistryConstructor {
    readonly prototype: FinalizationRegistry<any>;

    /**
     * Creates a finalization registry with an associated cleanup callback
     * @param cleanupCallback The callback to call after a value in the registry has been reclaimed.
     */
    new <T>(cleanupCallback: (heldValue: T) => void): FinalizationRegistry<T>;
}

declare var FinalizationRegistry: FinalizationRegistryConstructor;
`;
const VFS_TS_562_ES2021_FILES = (options) => {
  return {
    ...VFS_TS_562_ES2020_FILES(options),
    "/lib.es2021.d.ts": dts$v,
    "/lib.es2021.full.d.ts": options.full ? dts$u : dts$v,
    "/lib.es2021.intl.d.ts": dts$t,
    "/lib.es2021.promise.d.ts": dts$s,
    "/lib.es2021.string.d.ts": dts$r,
    "/lib.es2021.weakref.d.ts": dts$q
  };
};
const dts$p = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Array<T> {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): T | undefined;\n}\n\ninterface ReadonlyArray<T> {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): T | undefined;\n}\n\ninterface Int8Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Uint8Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Uint8ClampedArray {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Int16Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Uint16Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Int32Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Uint32Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Float32Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface Float64Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): number | undefined;\n}\n\ninterface BigInt64Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): bigint | undefined;\n}\n\ninterface BigUint64Array {\n    /**\n     * Returns the item located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): bigint | undefined;\n}\n';
const dts$o = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2021" />\n/// <reference lib="es2022.array" />\n/// <reference lib="es2022.error" />\n/// <reference lib="es2022.intl" />\n/// <reference lib="es2022.object" />\n/// <reference lib="es2022.sharedmemory" />\n/// <reference lib="es2022.string" />\n/// <reference lib="es2022.regexp" />\n';
const dts$n = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface ErrorOptions {\n    cause?: unknown;\n}\n\ninterface Error {\n    cause?: unknown;\n}\n\ninterface ErrorConstructor {\n    new (message?: string, options?: ErrorOptions): Error;\n    (message?: string, options?: ErrorOptions): Error;\n}\n\ninterface EvalErrorConstructor {\n    new (message?: string, options?: ErrorOptions): EvalError;\n    (message?: string, options?: ErrorOptions): EvalError;\n}\n\ninterface RangeErrorConstructor {\n    new (message?: string, options?: ErrorOptions): RangeError;\n    (message?: string, options?: ErrorOptions): RangeError;\n}\n\ninterface ReferenceErrorConstructor {\n    new (message?: string, options?: ErrorOptions): ReferenceError;\n    (message?: string, options?: ErrorOptions): ReferenceError;\n}\n\ninterface SyntaxErrorConstructor {\n    new (message?: string, options?: ErrorOptions): SyntaxError;\n    (message?: string, options?: ErrorOptions): SyntaxError;\n}\n\ninterface TypeErrorConstructor {\n    new (message?: string, options?: ErrorOptions): TypeError;\n    (message?: string, options?: ErrorOptions): TypeError;\n}\n\ninterface URIErrorConstructor {\n    new (message?: string, options?: ErrorOptions): URIError;\n    (message?: string, options?: ErrorOptions): URIError;\n}\n\ninterface AggregateErrorConstructor {\n    new (\n        errors: Iterable<any>,\n        message?: string,\n        options?: ErrorOptions,\n    ): AggregateError;\n    (\n        errors: Iterable<any>,\n        message?: string,\n        options?: ErrorOptions,\n    ): AggregateError;\n}\n';
const dts$m = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2022" />\n/// <reference lib="dom" />\n/// <reference lib="webworker.importscripts" />\n/// <reference lib="scripthost" />\n/// <reference lib="dom.iterable" />\n/// <reference lib="dom.asynciterable" />\n';
const dts$l = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare namespace Intl {\n    /**\n     * An object with some or all properties of the `Intl.Segmenter` constructor `options` parameter.\n     *\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/Segmenter#parameters)\n     */\n    interface SegmenterOptions {\n        /** The locale matching algorithm to use. For information about this option, see [Intl page](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation). */\n        localeMatcher?: "best fit" | "lookup" | undefined;\n        /** The type of input to be split */\n        granularity?: "grapheme" | "word" | "sentence" | undefined;\n    }\n\n    interface Segmenter {\n        /**\n         * Returns `Segments` object containing the segments of the input string, using the segmenter\'s locale and granularity.\n         *\n         * @param input - The text to be segmented as a `string`.\n         *\n         * @returns A new iterable Segments object containing the segments of the input string, using the segmenter\'s locale and granularity.\n         */\n        segment(input: string): Segments;\n        resolvedOptions(): ResolvedSegmenterOptions;\n    }\n\n    interface ResolvedSegmenterOptions {\n        locale: string;\n        granularity: "grapheme" | "word" | "sentence";\n    }\n\n    interface SegmentIterator<T> extends IteratorObject<T, BuiltinIteratorReturn, unknown> {\n        [Symbol.iterator](): SegmentIterator<T>;\n    }\n\n    interface Segments {\n        /**\n         * Returns an object describing the segment in the original string that includes the code unit at a specified index.\n         *\n         * @param codeUnitIndex - A number specifying the index of the code unit in the original input string. If the value is omitted, it defaults to `0`.\n         */\n        containing(codeUnitIndex?: number): SegmentData;\n\n        /** Returns an iterator to iterate over the segments. */\n        [Symbol.iterator](): SegmentIterator<SegmentData>;\n    }\n\n    interface SegmentData {\n        /** A string containing the segment extracted from the original input string. */\n        segment: string;\n        /** The code unit index in the original input string at which the segment begins. */\n        index: number;\n        /** The complete input string that was segmented. */\n        input: string;\n        /**\n         * A boolean value only if granularity is "word"; otherwise, undefined.\n         * If granularity is "word", then isWordLike is true when the segment is word-like (i.e., consists of letters/numbers/ideographs/etc.); otherwise, false.\n         */\n        isWordLike?: boolean;\n    }\n\n    const Segmenter: {\n        prototype: Segmenter;\n\n        /**\n         * Creates a new `Intl.Segmenter` object.\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the `locales` argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options - An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/Segmenter#parameters)\n         *  with some or all options of `SegmenterOptions`.\n         *\n         * @returns [Intl.Segmenter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segments) object.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter).\n         */\n        new (locales?: LocalesArgument, options?: SegmenterOptions): Segmenter;\n\n        /**\n         * Returns an array containing those of the provided locales that are supported without having to fall back to the runtime\'s default locale.\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the `locales` argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options An [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/supportedLocalesOf#parameters).\n         *  with some or all possible options.\n         *\n         * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/supportedLocalesOf)\n         */\n        supportedLocalesOf(locales: LocalesArgument, options?: Pick<SegmenterOptions, "localeMatcher">): UnicodeBCP47LocaleIdentifier[];\n    };\n\n    /**\n     * Returns a sorted array of the supported collation, calendar, currency, numbering system, timezones, and units by the implementation.\n     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf)\n     *\n     * @param key A string indicating the category of values to return.\n     * @returns A sorted array of the supported values.\n     */\n    function supportedValuesOf(key: "calendar" | "collation" | "currency" | "numberingSystem" | "timeZone" | "unit"): string[];\n}\n';
const dts$k = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface ObjectConstructor {\n    /**\n     * Determines whether an object has a property with the specified name.\n     * @param o An object.\n     * @param v A property name.\n     */\n    hasOwn(o: object, v: PropertyKey): boolean;\n}\n';
const dts$j = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface RegExpMatchArray {\n    indices?: RegExpIndicesArray;\n}\n\ninterface RegExpExecArray {\n    indices?: RegExpIndicesArray;\n}\n\ninterface RegExpIndicesArray extends Array<[number, number]> {\n    groups?: {\n        [key: string]: [number, number];\n    };\n}\n\ninterface RegExp {\n    /**\n     * Returns a Boolean value indicating the state of the hasIndices flag (d) used with a regular expression.\n     * Default is false. Read-only.\n     */\n    readonly hasIndices: boolean;\n}\n';
const dts$i = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Atomics {\n    /**\n     * A non-blocking, asynchronous version of wait which is usable on the main thread.\n     * Waits asynchronously on a shared memory location and returns a Promise\n     * @param typedArray A shared Int32Array or BigInt64Array.\n     * @param index The position in the typedArray to wait on.\n     * @param value The expected value to test.\n     * @param [timeout] The expected value to test.\n     */\n    waitAsync(typedArray: Int32Array, index: number, value: number, timeout?: number): { async: false; value: "not-equal" | "timed-out"; } | { async: true; value: Promise<"ok" | "timed-out">; };\n\n    /**\n     * A non-blocking, asynchronous version of wait which is usable on the main thread.\n     * Waits asynchronously on a shared memory location and returns a Promise\n     * @param typedArray A shared Int32Array or BigInt64Array.\n     * @param index The position in the typedArray to wait on.\n     * @param value The expected value to test.\n     * @param [timeout] The expected value to test.\n     */\n    waitAsync(typedArray: BigInt64Array, index: number, value: bigint, timeout?: number): { async: false; value: "not-equal" | "timed-out"; } | { async: true; value: Promise<"ok" | "timed-out">; };\n}\n';
const dts$h = '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface String {\n    /**\n     * Returns a new String consisting of the single UTF-16 code unit located at the specified index.\n     * @param index The zero-based index of the desired code unit. A negative index will count back from the last item.\n     */\n    at(index: number): string | undefined;\n}\n';
const VFS_TS_562_ES2022_FILES = (options) => {
  return {
    ...VFS_TS_562_ES2021_FILES(options),
    "/lib.es2022.array.d.ts": dts$p,
    "/lib.es2022.d.ts": dts$o,
    "/lib.es2022.error.d.ts": dts$n,
    "/lib.es2022.full.d.ts": options.full ? dts$m : dts$o,
    "/lib.es2022.intl.d.ts": dts$l,
    "/lib.es2022.object.d.ts": dts$k,
    "/lib.es2022.regexp.d.ts": dts$j,
    "/lib.es2022.sharedmemory.d.ts": dts$i,
    "/lib.es2022.string.d.ts": dts$h
  };
};
const VFS_TS_562_ES2022 = (options) => {
  return createDTSMap(VFS_TS_562_ES2022_FILES({ ...options, full: false }));
};
const createVirtualTypeScriptEnvironment = (sys, rootFiles, compilerOptions = {}, customTransformers) => {
  const mergedCompilerOpts = { ...defaultCompilerOptions(), ...compilerOptions };
  const { languageServiceHost, updateFile, deleteFile } = createVirtualLanguageServiceHost(sys, rootFiles, mergedCompilerOpts, customTransformers);
  const languageService = ts.createLanguageService(languageServiceHost);
  const diagnostics = languageService.getCompilerOptionsDiagnostics();
  if (diagnostics.length) {
    const compilerHost = createVirtualCompilerHost(sys, compilerOptions);
    throw new Error(ts.formatDiagnostics(diagnostics, compilerHost.compilerHost));
  }
  return {
    name: "vfs",
    sys,
    languageService,
    getSourceFile: (fileName) => {
      var _a;
      return (_a = languageService.getProgram()) == null ? void 0 : _a.getSourceFile(fileName);
    },
    createFile: (fileName, content) => {
      updateFile(ts.createSourceFile(fileName, content, mergedCompilerOpts.target, false));
    },
    updateFile: (fileName, content, optPrevTextSpan) => {
      const prevSourceFile = languageService.getProgram().getSourceFile(fileName);
      if (!prevSourceFile) {
        throw new Error("Did not find a source file for " + fileName);
      }
      const prevFullContents = prevSourceFile.text;
      const prevTextSpan = optPrevTextSpan ?? ts.createTextSpan(0, prevFullContents.length);
      const newText = prevFullContents.slice(0, prevTextSpan.start) + content + prevFullContents.slice(prevTextSpan.start + prevTextSpan.length);
      const newSourceFile = ts.updateSourceFile(prevSourceFile, newText, {
        span: prevTextSpan,
        newLength: content.length
      });
      updateFile(newSourceFile);
    },
    deleteFile(fileName) {
      const sourceFile = languageService.getProgram().getSourceFile(fileName);
      if (sourceFile) {
        deleteFile(sourceFile);
      }
    }
  };
};
const notImplemented = (methodName) => {
  throw new Error(`Method '${methodName}' is not implemented.`);
};
const defaultCompilerOptions = () => {
  return {
    ...ts.getDefaultCompilerOptions(),
    target: typescriptExports.ScriptTarget.ES2022,
    jsx: typescriptExports.JsxEmit.None,
    strict: true,
    esModuleInterop: true,
    module: typescriptExports.ModuleKind.ES2022,
    suppressOutputPathCheck: true,
    skipLibCheck: true,
    skipDefaultLibCheck: true,
    moduleResolution: typescriptExports.ModuleResolutionKind.Node16
  };
};
const libize = (path) => path.replace("/", "/lib.").toLowerCase();
const createSystem = (files) => {
  return {
    args: [],
    createDirectory: () => notImplemented("createDirectory"),
    directoryExists: (directory) => {
      return Array.from(files.keys()).some((path) => path.startsWith(directory));
    },
    exit: () => notImplemented("exit"),
    fileExists: (fileName) => files.has(fileName) || files.has(libize(fileName)),
    getCurrentDirectory: () => "/",
    getDirectories: () => [],
    getExecutingFilePath: () => notImplemented("getExecutingFilePath"),
    readDirectory: (directory) => directory === "/" ? Array.from(files.keys()) : [],
    readFile: (fileName) => files.get(fileName) ?? files.get(libize(fileName)),
    resolvePath: (path) => path,
    newLine: "\n",
    useCaseSensitiveFileNames: true,
    write: () => notImplemented("write"),
    writeFile: (fileName, contents) => {
      files.set(fileName, contents);
    },
    deleteFile: (fileName) => {
      files.delete(fileName);
    }
  };
};
const createVirtualCompilerHost = (sys, compilerOptions) => {
  const sourceFiles = /* @__PURE__ */ new Map();
  const save = (sourceFile) => {
    sourceFiles.set(sourceFile.fileName, sourceFile);
    return sourceFile;
  };
  return {
    compilerHost: {
      ...sys,
      getCanonicalFileName: (fileName) => fileName,
      getDefaultLibFileName: () => "/" + ts.getDefaultLibFileName(compilerOptions),
      getNewLine: () => sys.newLine,
      getSourceFile: (fileName, languageVersionOrOptions) => {
        return sourceFiles.get(fileName) || save(ts.createSourceFile(fileName, sys.readFile(fileName), languageVersionOrOptions ?? compilerOptions.target ?? defaultCompilerOptions().target, false));
      },
      useCaseSensitiveFileNames: () => sys.useCaseSensitiveFileNames
    },
    updateFile: (sourceFile) => {
      const alreadyExists = sourceFiles.has(sourceFile.fileName);
      sys.writeFile(sourceFile.fileName, sourceFile.text);
      sourceFiles.set(sourceFile.fileName, sourceFile);
      return alreadyExists;
    },
    deleteFile: (sourceFile) => {
      const alreadyExists = sourceFiles.has(sourceFile.fileName);
      sourceFiles.delete(sourceFile.fileName);
      sys.deleteFile(sourceFile.fileName);
      return alreadyExists;
    }
  };
};
const createVirtualLanguageServiceHost = (sys, rootFiles, compilerOptions, customTransformers) => {
  const fileNames = [...rootFiles];
  const { compilerHost, updateFile, deleteFile } = createVirtualCompilerHost(sys, compilerOptions);
  const fileVersions = /* @__PURE__ */ new Map();
  let projectVersion = 0;
  const languageServiceHost = {
    ...compilerHost,
    getProjectVersion: () => projectVersion.toString(),
    getCompilationSettings: () => compilerOptions,
    getCustomTransformers: () => customTransformers,
    getScriptFileNames: () => fileNames.slice(),
    getScriptSnapshot: (fileName) => {
      const contents = sys.readFile(fileName);
      if (contents && typeof contents === "string") {
        return typescriptExports.ScriptSnapshot.fromString(contents);
      }
      return;
    },
    getScriptVersion: (fileName) => {
      return fileVersions.get(fileName) || "0";
    },
    writeFile: sys.writeFile
  };
  return {
    languageServiceHost,
    updateFile: (sourceFile) => {
      projectVersion++;
      fileVersions.set(sourceFile.fileName, projectVersion.toString());
      if (!fileNames.includes(sourceFile.fileName)) {
        fileNames.push(sourceFile.fileName);
      }
      updateFile(sourceFile);
    },
    deleteFile: (sourceFile) => {
      projectVersion++;
      fileVersions.set(sourceFile.fileName, projectVersion.toString());
      const index = fileNames.indexOf(sourceFile.fileName);
      if (index !== -1) {
        fileNames.splice(index, 1);
      }
      deleteFile(sourceFile);
    }
  };
};
const DEFAULT_CODEMIRROR_TYPE_ICONS = /* @__PURE__ */ new Set([
  `class`,
  `constant`,
  `enum`,
  `function`,
  `interface`,
  `keyword`,
  `method`,
  `namespace`,
  `property`,
  `text`,
  `type`,
  `variable`
]);
const AUTOCOMPLETION_SYMBOLS = [
  "Object",
  "Function",
  "Array",
  "Number",
  "parseFloat",
  "parseInt",
  "Infinity",
  "NaN",
  "undefined",
  "Boolean",
  "String",
  "Symbol",
  "Date",
  "Promise",
  "RegExp",
  "Error",
  "JSON",
  "Math",
  "Intl",
  "ArrayBuffer",
  "Atomics",
  "Uint8Array",
  "Int8Array",
  "Uint16Array",
  "Int16Array",
  "Uint32Array",
  "Int32Array",
  "Float32Array",
  "Float64Array",
  "Uint8ClampedArray",
  "BigUint64Array",
  "BigInt64Array",
  "DataView",
  "Map",
  "BigInt",
  "Set",
  "WeakMap",
  "WeakSet",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "unescape",
  "isFinite",
  "isNaN",
  "Deno",
  "Blob",
  "FormData",
  "Request",
  "Response",
  "TextDecoder",
  "TextEncoder",
  "URL",
  "URLPattern",
  "URLSearchParams",
  "atob",
  "btoa",
  "crypto",
  "fetch",
  "clearInterval",
  "clearTimeout",
  "performance",
  "setInterval",
  "setTimeout"
];
const ensureAnchor = (expr, start) => {
  const { source } = expr;
  const addEnd = source[source.length - 1] != "$";
  if (!addEnd) {
    return expr;
  } else {
    return new RegExp(`${""}(?:${source})${addEnd ? "$" : ""}`, expr.flags ?? (expr.ignoreCase ? "i" : ""));
  }
};
const getLineAtPosition = (code, position) => {
  const from = code.lastIndexOf("\n", position - 1) + 1;
  let to = code.indexOf("\n", position);
  if (to === -1) {
    to = code.length;
  }
  const text = code.slice(from, to);
  return { from, to, text };
};
const matchBefore = (code, pos, expr) => {
  const line = getLineAtPosition(code, pos);
  const start = Math.max(line.from, pos - 250);
  const str = line.text.slice(start - line.from, pos - line.from);
  const found = str.search(ensureAnchor(expr));
  return found < 0 ? null : { from: start + found, to: pos, text: str.slice(found) };
};
const TS_COMPLETE_BLOCKLIST = [typescriptExports.ScriptElementKind.warning];
const getAutocompletion = async (options) => {
  var _a;
  const { env, path, context } = options;
  const { pos, explicit } = context;
  const rawContents = (_a = env.getSourceFile(path)) == null ? void 0 : _a.getFullText();
  if (!rawContents)
    return null;
  let word = matchBefore(rawContents, pos, /\w*/);
  if (!(word == null ? void 0 : word.text)) {
    word = matchBefore(rawContents, pos, /\./);
  }
  if (!(word == null ? void 0 : word.text) && !explicit) {
    return null;
  }
  const completionInfo = env.languageService.getCompletionsAtPosition(path, pos, {}, {});
  if (!completionInfo) {
    return null;
  }
  const optionsOfResult = completionInfo.entries.filter((entry) => {
    var _a2;
    return !TS_COMPLETE_BLOCKLIST.includes(entry.kind) && (entry.sortText < "15" || ((_a2 = completionInfo.optionalReplacementSpan) == null ? void 0 : _a2.length) && AUTOCOMPLETION_SYMBOLS.includes(entry.name));
  }).map((entry) => {
    const boost = -Number(entry.sortText) || 0;
    let type = entry.kind ? String(entry.kind) : void 0;
    if (type === "member") {
      type = "property";
    }
    if (type && !DEFAULT_CODEMIRROR_TYPE_ICONS.has(type)) {
      type = void 0;
    }
    return { label: entry.name, type, boost };
  });
  return {
    from: word ? word.text === "." ? word.to : word.from : pos,
    options: optionsOfResult
  };
};
const tsFacet = Facet.define({
  combine(configs) {
    return combineConfig(configs, {});
  }
});
Facet.define({
  combine(configs) {
    return combineConfig(configs, {});
  }
});
const tsAutocomplete = () => {
  return async (context) => {
    const config = context.state.facet(tsFacet);
    if (!config)
      return null;
    return getAutocompletion({ ...config, context });
  };
};
const getHover = (options) => {
  const { env, path, pos } = options;
  const sourcePos = pos;
  if (sourcePos === null) {
    return null;
  }
  const quickInfo = env.languageService.getQuickInfoAtPosition(path, sourcePos);
  if (!quickInfo) {
    return null;
  }
  const start = quickInfo.textSpan.start;
  const typeDef = env.languageService.getTypeDefinitionAtPosition(path, sourcePos) ?? env.languageService.getDefinitionAtPosition(path, sourcePos);
  return {
    start,
    end: start + quickInfo.textSpan.length,
    typeDef,
    quickInfo
  };
};
const defaultRenderer = (info) => {
  var _a;
  const div = document.createElement("div");
  if ((_a = info.quickInfo) == null ? void 0 : _a.displayParts) {
    for (const part of info.quickInfo.displayParts) {
      const span = div.appendChild(document.createElement("span"));
      span.className = `quick-info-${part.kind}`;
      span.innerText = part.text;
    }
  }
  return { dom: div };
};
const tsHover = (options) => {
  const { renderTooltip = defaultRenderer } = {};
  return hoverTooltip(async (view, pos) => {
    const config = view.state.facet(tsFacet);
    if (!config) {
      return null;
    }
    const hoverData = getHover({ ...config, pos });
    if (!hoverData) {
      return null;
    } else {
      return {
        pos: hoverData.start,
        end: hoverData.end,
        create: () => renderTooltip(hoverData, view)
      };
    }
  });
};
const tsCategoryToSeverity = (diagnostic) => {
  if (diagnostic.code === 7027) {
    return "warning";
  }
  switch (diagnostic.category) {
    case typescriptExports.DiagnosticCategory.Error:
      return "error";
    case typescriptExports.DiagnosticCategory.Message:
      return "info";
    case typescriptExports.DiagnosticCategory.Warning:
      return "warning";
    case typescriptExports.DiagnosticCategory.Suggestion:
      return "info";
  }
};
const isDiagnosticWithLocation = (diagnostic) => {
  const test = diagnostic;
  return !!(test.file && typeof test.start === "number" && typeof test.length === "number");
};
const tsDiagnosticMessage = (diagnostic) => {
  if (typeof diagnostic.messageText === "string") {
    return diagnostic.messageText;
  }
  return diagnostic.messageText.messageText;
};
const convertTSDiagnosticToCM = (d) => {
  const start = d.start;
  const message = tsDiagnosticMessage(d);
  return {
    from: start,
    to: start + d.length,
    message,
    severity: tsCategoryToSeverity(d)
  };
};
const getLintsOnImpExp = (view) => {
  const diagnostics = [];
  const tree = syntaxTree(view.state);
  tree.cursor().iterate((node) => {
    switch (node.name) {
      case "DynamicImport":
        diagnostics.push({
          from: node.from,
          to: node.to,
          severity: "error",
          message: "Dynamic import is not allowed."
        });
        break;
      case "ImportDeclaration":
        diagnostics.push({
          from: node.from,
          to: node.to,
          severity: "error",
          message: "Import declaration is not allowed."
        });
        break;
      case "ExportDeclaration":
        diagnostics.push({
          from: node.from,
          to: node.to,
          severity: "error",
          message: "Export declaration is not allowed."
        });
        break;
    }
  });
  return diagnostics;
};
const getLintsFromVfs = (options) => {
  const { env, path, diagnosticCodesToIgnore } = options;
  const exists = env.getSourceFile(path);
  if (!exists) {
    return [];
  }
  const syntacticDiagnostics = env.languageService.getSyntacticDiagnostics(path);
  const semanticDiagnostics = env.languageService.getSemanticDiagnostics(path);
  const diagnostics = [...syntacticDiagnostics, ...semanticDiagnostics].filter((diagnostic) => {
    return isDiagnosticWithLocation(diagnostic) && !diagnosticCodesToIgnore.includes(diagnostic.code);
  });
  return diagnostics.map(convertTSDiagnosticToCM);
};
const tsLinter = (options) => {
  const { diagnosticCodesToIgnore } = options || {};
  return linter(async (view) => {
    const diagnostics = getLintsOnImpExp(view);
    const config = view.state.facet(tsFacet);
    if (config == null) {
      return diagnostics;
    } else {
      return [
        ...diagnostics,
        ...getLintsFromVfs({ ...config, diagnosticCodesToIgnore: diagnosticCodesToIgnore || [] })
      ];
    }
  });
};
const createOrUpdateFile = (env, path, code) => {
  if (!env.getSourceFile(path)) {
    env.createFile(path, code);
  } else {
    env.updateFile(path, code);
  }
};
const tsSync = () => {
  let first = true;
  return EditorView.updateListener.of((update) => {
    const config = update.view.state.facet(tsFacet);
    if (!config) {
      return;
    }
    if (!update.docChanged && !first) {
      return;
    }
    first = false;
    createOrUpdateFile(config.env, config.path, update.state.doc.toString() || " ");
  });
};
var DiagnosticCodes;
(function(DiagnosticCodes2) {
  DiagnosticCodes2[DiagnosticCodes2["C1118"] = 1108] = "C1118";
  DiagnosticCodes2[DiagnosticCodes2["C1375"] = 1375] = "C1375";
})(DiagnosticCodes || (DiagnosticCodes = {}));
const defaultCodeMirrorJavascriptExtensionsOptions = () => {
  return {
    diagnosticCodesToIgnore: [DiagnosticCodes.C1118, DiagnosticCodes.C1375]
  };
};
const createCodeMirrorJavascriptExtensions = (options) => {
  const { files, compilerOpts: fixedCompilerOptions } = options;
  return (options2 = defaultCodeMirrorJavascriptExtensionsOptions()) => {
    const { diagnosticCodesToIgnore } = options2;
    const system = createSystem(files);
    const compilerOpts = fixedCompilerOptions ?? {};
    const env = createVirtualTypeScriptEnvironment(system, [], compilerOpts);
    const path = "index.ts";
    return [
      tsFacet.of({ env, path }),
      tsSync(),
      tsLinter({ diagnosticCodesToIgnore }),
      autocompletion({ override: [tsAutocomplete()] }),
      tsHover()
    ];
  };
};
const createCodeMirrorTs562Es2022Extensions = (options = {}) => {
  const { extend, ...rest } = options;
  const create = createCodeMirrorJavascriptExtensions({
    files: VFS_TS_562_ES2022({ extend })
  });
  return create(rest);
};
const PlaygroundCssConstants = {
  BACKGROUND_COLOR: CssVars.BACKGROUND_COLOR,
  FONT_COLOR: CssVars.FONT_COLOR,
  INVERT_COLOR: CssVars.INVERT_COLOR,
  PRIMARY_COLOR: CssVars.PRIMARY_COLOR,
  SUCCESS_COLOR: CssVars.SUCCESS_COLOR,
  DANGER_COLOR: CssVars.DANGER_COLOR,
  WAIVE_COLOR: CssVars.WAIVE_COLOR,
  HOVER_COLOR: CssVars.HOVER_COLOR,
  BORDER_COLOR: CssVars.BORDER_COLOR,
  BORDER_RADIUS: CssVars.BORDER_RADIUS,
  BORDER: CssVars.BORDER,
  INPUT_HEIGHT: CssVars.INPUT_HEIGHT,
  EDITOR_BACKGROUND_BLOCK_SIZE: "48px",
  EDITOR_BACKGROUND_LINE_COLOR: color(CssConstants.PRIMARY_COLOR).alpha(0.08),
  EDITOR_ATTRIBUTE_BADGE_COLOR: "#9db6c6",
  EDIT_DIALOG_BACKDROP_COLOR: "rgba(71, 69, 84, 0.75)",
  EDIT_DIALOG_SHADOW: "0 0 10px 4px rgba(0, 0, 0, 0.2)",
  EDIT_DIALOG_HELP_DOC_TITLE_COLOR: "rgb(184, 184, 184)",
  CONFIGURABLE_ELEMENT_BORDER_COLOR: "rgb(236, 242, 248",
  CONFIGURABLE_ELEMENT_GROUP_BORDER_COLOR: "rgb(216, 222, 228)",
  TOOLBAR_BUTTON_ACTIVE_BACKGROUND_COLOR: "#7596bf",
  STEP_OPERATOR_COLOR: "#7596bf",
  NODE_START_COLOR: "#ffb56b",
  NODE_END_COLOR: "#e0b35f",
  NODE_JOIN_END_COLOR: "#c4c2bf",
  NODE_STEP_COLOR: "#54956b",
  NODE_STEP_HTTP_COLOR: "#8fabb0",
  NODE_STEP_SETS_COLOR: "#615cac",
  NODE_ASYNC_SETS_STEP_COLOR: "#ff714b",
  NODE_EACH_STEP_COLOR: "#c6a0d2",
  NODE_PARALLEL_STEP_COLOR: "#4785ff",
  NODE_CONDITIONAL_STEP_COLOR: "#d77c63",
  NODE_ROUTES_STEP_COLOR: "#d77c63",
  NODE_REF_PIPELINE_STEP_COLOR: "#b1062f",
  NODE_REF_STEP_STEP_COLOR: "#b1062f",
  NODE_TYPEORM_STEP_COLOR: "#bca18c",
  NEXT_STEP_PORT_COLOR: "#a3ab5b",
  PREVIOUS_STEP_PORT_COLOR: "#8454aa",
  PORT_FIRST_SUB_STEP_COLOR: "#8454aa",
  PORT_STEPS_COLOR: "#617ba0",
  PORT_ERROR_HANDLES_COLOR: "#c13a92",
  LINK_ERROR_HANDLES_COLOR: "#a97f98",
  PORT_LAST_SUB_STEP_JOIN_COLOR: "#00618b",
  PORT_ROUTE_TEST_COLOR: "#8454aa",
  PORT_OTHERWISE_COLOR: "#b352b3",
  PRE_PORT_COLOR: "#87a55f",
  POST_PORT_COLOR: "#c69dab",
  CODE_MIRROR_SEARCH_PANEL_BACKGROUND_COLOR: CssVars.BACKGROUND_COLOR,
  CODE_MIRROR_SEARCH_PANEL_BUTTON_BACKGROUND_COLOR: "transparent",
  CODE_MIRROR_ACTIVE_LINE_BACKGROUND_COLOR: "rgba(0,0,0,0.06)"
};
const createPlaygroundCssVars = (variables) => {
  return {
    EDITOR_BACKGROUND_BLOCK_SIZE: `var(--o23-playground-editor-background-block-size, ${variables.EDITOR_BACKGROUND_BLOCK_SIZE})`,
    EDITOR_BACKGROUND_LINE_COLOR: `var(--o23-playground-editor-background-line-color, ${variables.EDITOR_BACKGROUND_LINE_COLOR})`,
    EDITOR_BACKGROUND_IMAGE: `var(--o23-playground-editor-background-image, linear-gradient(to right, ${variables.EDITOR_BACKGROUND_LINE_COLOR} 1px, transparent 1px), linear-gradient(to bottom, ${variables.EDITOR_BACKGROUND_LINE_COLOR} 1px, transparent 1px))`,
    EDITOR_BACKGROUND_SIZE: `var(--o23-playground-editor-background-size, ${variables.EDITOR_BACKGROUND_BLOCK_SIZE} ${variables.EDITOR_BACKGROUND_BLOCK_SIZE})`,
    EDITOR_BACKGROUND_POSITION: "var(--o23-playground-editor-background-position, -1px -1px)",
    EDITOR_ERROR_COLOR: `var(--o23-playground-editor-error-color, ${variables.DANGER_COLOR})`,
    EDITOR_TOOLBAR_HEIGHT: "var(--o23-playground-editor-toolbar-height, 62px)",
    EDITOR_TOOLBAR_GUTTER_SIZE: "var(--o23-playground-editor-toolbar-gutter-size, 8px)",
    EDITOR_TOOLBAR_BORDER: `var(--o23-playground-editor-toolbar-border, 1px solid ${variables.BORDER_COLOR})`,
    EDITOR_TOOLBAR_BORDER_RADIUS: `var(--o23-playground-editor-toolbar-border-radius, ${variables.BORDER_RADIUS})`,
    EDITOR_TOOLBAR_BUTTON_HEIGHT: `var(--o23-playground-editor-toolbar-button-size, 30px)`,
    EDITOR_TOOLBAR_BUTTON_WIDTH: `var(--o23-playground-editor-toolbar-button-size, 32px)`,
    EDITOR_TOOLBAR_BUTTON_COLOR: `var(--o23-playground-editor-toolbar-button-color, ${variables.FONT_COLOR})`,
    EDITOR_TOOLBAR_BUTTON_ACTIVE_COLOR: `var(--o23-playground-editor-toolbar-button-active-color, ${variables.INVERT_COLOR})`,
    EDITOR_TOOLBAR_BUTTON_ACTIVE_BACKGROUND_COLOR: `var(--o23-playground-editor-toolbar-button-active-background-color, ${variables.TOOLBAR_BUTTON_ACTIVE_BACKGROUND_COLOR})`,
    EDITOR_TOOLBAR_TOC_HEIGHT: "var(--o23-playground-editor-toolbar-toc-height, 30px)",
    EDITOR_MAX_Z_INDEX: `var(--o23-playground-editor-max-z-index, 9999)`,
    MARKDOWN_FONT_SIZE: "var(--o23-playground-markdown-font-size, 14px)",
    MARKDOWN_COLOR: `var(--o23-playground-markdown-color, ${variables.FONT_COLOR})`,
    MARKDOWN_BACKGROUND_COLOR: `var(--o23-playground-markdown-background-color, ${variables.BACKGROUND_COLOR})`,
    MARKDOWN_TABLE_MARGIN: "var(--o23-playground-markdown-table-margin, 16px 0)",
    MARKDOWN_TABLE_HEADER_BACKGROUND_COLOR: "var(--o23-playground-markdown-table-header-background-color, var(--color-canvas-subtle))",
    MARKDOWN_TABLE_BORDER: "var(--o23-playground-markdown-table-border, 1px solid var(--color-border-default))",
    MARKDOWN_TABLE_BORDER_RADIUS: "var(--o23-playground-markdown-table-border-radius, 4px)",
    MARKDOWN_TABLE_ROW_BACKGROUND_COLOR: "var(--o23-playground-markdown-table-row-background-color, var(--color-canvas-default))",
    MARKDOWN_TABLE_ROW_EVEN_BACKGROUND_COLOR: "var(--o23-playground-markdown-table-even-row-background-color, var(--color-canvas-subtle))",
    SPECIFIC_MARKDOWN_FONT_SIZE: "var(--o23-playground-specific-markdown-font-size, 12px)",
    EDIT_DIALOG_BACKDROP_COLOR: `var(--o23-playground-dialog-backdrop-color, ${variables.EDIT_DIALOG_BACKDROP_COLOR})`,
    EDIT_DIALOG_Z_INDEX: "var(--o23-playground-dialog-z-index, 10000)",
    EDIT_DIALOG_MARGIN_TOP: "var(--o23-playground-dialog-margin-top, 32px)",
    EDIT_DIALOG_MARGIN_LEFT: "var(--o23-playground-dialog-margin-top, 24px)",
    EDIT_DIALOG_WIDTH: "var(--o23-playground-dialog-width, calc(100vw - 48px))",
    EDIT_DIALOG_HEIGHT: "var(--o23-playground-dialog-height, calc(100vh - 64px))",
    EDIT_DIALOG_BACKGROUND_COLOR: `var(--o23-playground-dialog-background-color, ${variables.BACKGROUND_COLOR})`,
    EDIT_DIALOG_PADDING: "var(--o23-playground-dialog-padding, 16px)",
    EDIT_DIALOG_PADDING_LEFT: "var(--o23-playground-dialog-padding-left, 16px)",
    EDIT_DIALOG_SHADOW: `var(--o23-playground-dialog-shadow, ${variables.EDIT_DIALOG_SHADOW})`,
    EDIT_DIALOG_BORDER_RADIUS: "var(--o23-playground-dialog-border-radius, 12px)",
    EDIT_DIALOG_BORDER: `var(--o23-playground-dialog-border, ${variables.BORDER})`,
    EDIT_DIALOG_CLOSER_TOP: "var(--o23-playground-dialog-closer-top, -8px)",
    EDIT_DIALOG_CLOSER_ICON_COLOR: `var(--o23-playground-dialog-closer-icon-color, ${variables.INVERT_COLOR})`,
    EDIT_DIALOG_CLOSER_ICON_SIZE: "var(--o23-playground-dialog-closer-icon-size, 20px)",
    EDIT_DIALOG_CLOSER_FONT_SIZE: "var(--o23-playground-dialog-closer-font-size, 16px)",
    EDIT_DIALOG_CLOSER_FONT_WEIGHT: "var(--o23-playground-dialog-closer-font-weight, 600)",
    EDIT_DIALOG_CLOSER_PADDING: "var(--o23-playground-dialog-closer-padding, 0 8px)",
    EDIT_DIALOG_PART_MARGIN: "var(--o23-playground-dialog-part-margin, 24px 0)",
    EDIT_DIALOG_PART_HEADER_HEIGHT: "var(--o23-playground-dialog-part-header-height, 32px)",
    EDIT_DIALOG_PART_TITLE_FONT_SIZE: "var(--o23-playground-dialog-part-title-font-size, 16px)",
    EDIT_DIALOG_PART_TITLE_FONT_WEIGHT: "var(--o23-playground-dialog-part-title-font-weight, 600)",
    EDIT_DIALOG_PART_BODY_MARGIN: `var(--o23-playground-dialog-part-body-margin, 0 -16px)`,
    EDIT_DIALOG_PART_BODY_PADDING: "var(--o23-playground-dialog-part-body-padding, 0 16px)",
    EDIT_DIALOG_HELP_DOC_MAX_WIDTH: "var(--o23-playground-dialog-help-doc-max-width, 600px)",
    EDIT_DIALOG_HELP_DOC_TITLE_COLOR: `var(--o23-playground-dialog-part-title-color, ${variables.EDIT_DIALOG_HELP_DOC_TITLE_COLOR})`,
    EDIT_DIALOG_HELP_DOC_OPEN_HANDLE_LEFT: "var(--o23-playground-dialog-help-doc-open-handle-left, 0)",
    EDIT_DIALOG_HELP_DOC_OPEN_HANDLE_WIDTH: "var(--o23-playground-dialog-help-doc-open-handle-width, 64px)",
    EDIT_DIALOG_HELP_DOC_OPEN_HANDLE_COLOR: `var(--o23-playground-dialog-help-doc-open-handle-color, ${variables.PRIMARY_COLOR})`,
    EDIT_DIALOG_HELP_DOC_MARGIN: "var(--o23-playground-dialog-help-doc-margin, 0 0 0 -16px)",
    EDIT_DIALOG_HELP_DOC_PADDING: "var(--o23-playground-dialog-help-doc-padding, 0 16px 0 16px)",
    EDIT_DIALOG_HELP_DOC_COLLAPSED_WIDTH: "var(--o23-playground-dialog-help-doc-collapsed-width, 64px)",
    EDIT_DIALOG_HELP_DOC_GUTTER_SIZE: "var(--o23-playground-dialog-help-doc-gutter-size, 16px)",
    EDIT_DIALOG_NAVIGATOR_WIDTH: "var(--o23-playground-dialog-navigator-width, 400px)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_HEIGHT: `var(--o23-playground-dialog-configurable-element-height, ${variables.INPUT_HEIGHT})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_MARGIN: "var(--o23-playground-dialog-configurable-element-margin, 0 -8px)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_PADDING: "var(--o23-playground-dialog-configurable-element-padding, 0 8px)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BORDER_RADIUS: `var(--o23-playground-dialog-configurable-element-border-radius, ${variables.BORDER_RADIUS})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BORDER: `var(--o23-playground-dialog-configurable-element-border, 1px solid ${variables.CONFIGURABLE_ELEMENT_BORDER_COLOR}))`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_HOVER_COLOR: `var(--o23-playground-dialog-configurable-element-hover-color, ${variables.HOVER_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_HOVER_FONT_WEIGHT: `var(--o23-playground-dialog-configurable-element-hover-font-weight, 600)`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_INDENT: "var(--o23-playground-dialog-configurable-element-indent, 8px)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_TREE_LINE_COLOR: `var(--o23-playground-dialog-configurable-element-tree-line-color, ${variables.BORDER_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_SIZE: `var(--o23-playground-dialog-configurable-element-badge-size-ratio, calc(0.6 * ${variables.INPUT_HEIGHT}))`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_SIZE_S: `var(--o23-playground-dialog-configurable-element-badge-size-ratio, calc(0.5 * ${variables.INPUT_HEIGHT}))`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_FONT_WEIGHT: "var(--o23-playground-dialog-configurable-element-badge-font-weight, 400)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_PADDING: "var(--o23-playground-dialog-configurable-element-badge-padding, 0 12px)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_BORDER_RADIUS: "var(--o23-playground-dialog-configurable-element-badge-border-radius, 6px)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_TEXT_FONT_SIZE: "var(--o23-playground-dialog-configurable-element-badge-text-font-size, 0.8em)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_TEXT_FONT_WEIGHT: "var(--o23-playground-dialog-configurable-element-badge-text-font-weight, 400)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_ICON_MARGIN: "var(--o23-playground-dialog-configurable-element-badge-icon-margin, 0 -8px 0 0)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_CHECKED_BACKGROUND_COLOR: "var(--o23-playground-dialog-configurable-element-badge-checked-background-color, transparent)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_CHECKED_COLOR: `var(--o23-playground-dialog-configurable-element-badge-checked-color, ${variables.SUCCESS_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_MISSED_BACKGROUND_COLOR: "var(--o23-playground-dialog-configurable-element-badge-missed-background-color, transparent)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_MISSED_COLOR: `var(--o23-playground-dialog-configurable-element-badge-missed-color, ${variables.DANGER_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_BANNED_BACKGROUND_COLOR: "var(--o23-playground-dialog-configurable-element-badge-banned-background-color, transparent)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_BANNED_COLOR: `var(--o23-playground-dialog-configurable-element-badge-banned-color, ${variables.DANGER_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_ALL_BACKGROUND_COLOR: `var(--o23-playground-dialog-configurable-element-badge-all-background-color, ${variables.SUCCESS_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_ALL_COLOR: `var(--o23-playground-dialog-configurable-element-badge-all-color, ${variables.INVERT_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_IGNORED_BACKGROUND_COLOR: `var(--o23-playground-dialog-configurable-element-badge-ignored-background-color, ${variables.WAIVE_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_IGNORED_COLOR: `var(--o23-playground-dialog-configurable-element-badge-ignored-color, ${variables.INVERT_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_NOT_AVAILABLE_BACKGROUND_COLOR: `var(--o23-playground-dialog-configurable-element-badge-not-available-background-color, ${variables.WAIVE_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_NOT_AVAILABLE_COLOR: `var(--o23-playground-dialog-configurable-element-badge-not-available-color, ${variables.INVERT_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_COUNT_BACKGROUND_COLOR: `var(--o23-playground-dialog-configurable-element-badge-count-background-color, ${variables.SUCCESS_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_COUNT_COLOR: `var(--o23-playground-dialog-configurable-element-badge-count-color, ${variables.INVERT_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_SNIPPET_BACKGROUND_COLOR: "var(--o23-playground-dialog-configurable-element-badge-snippet-background-color, transparent)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_SNIPPET_COLOR: `var(--o23-playground-dialog-configurable-element-badge-snippet-color, ${variables.PRIMARY_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_STEPS_BACKGROUND_COLOR: "var(--o23-playground-dialog-configurable-element-badge-steps-background-color, transparent)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_STEPS_COLOR: `var(--o23-playground-dialog-configurable-element-badge-steps-color, ${variables.PRIMARY_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_AS_IS_BACKGROUND_COLOR: `var(--o23-playground-dialog-configurable-element-badge-as-is-background-color, ${variables.WAIVE_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_AS_IS_COLOR: `var(--o23-playground-dialog-configurable-element-badge-as-is-color, ${variables.INVERT_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_USE_DEFAULT_BACKGROUND_COLOR: `var(--o23-playground-dialog-configurable-element-badge-use-default-background-color, ${variables.WAIVE_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_USE_DEFAULT_COLOR: `var(--o23-playground-dialog-configurable-element-badge-use-default-color, ${variables.INVERT_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_YES_BACKGROUND_COLOR: `var(--o23-playground-dialog-configurable-element-badge-yes-background-color, ${variables.EDITOR_ATTRIBUTE_BADGE_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_YES_COLOR: `var(--o23-playground-dialog-configurable-element-badge-yes-color, ${variables.INVERT_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_NO_BACKGROUND_COLOR: `var(--o23-playground-dialog-configurable-element-badge-no-background-color, ${variables.EDITOR_ATTRIBUTE_BADGE_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_NO_COLOR: `var(--o23-playground-dialog-configurable-element-badge-no-color, ${variables.INVERT_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_SPECIFIC_MARGIN: "var(--o23-playground-dialog-configurable-element-specific-margin, 0 -8px)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_SPECIFIC_PADDING: "var(--o23-playground-dialog-configurable-element-specific-padding, 8px 16px 8px)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_SPECIFIC_GRID_COLUMN_GAP: "var(--o23-playground-dialog-configurable-element-specific-grid-column-gap, 32px)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_SPECIFIC_GRID_ROW_GAP: "var(--o23-playground-dialog-configurable-element-specific-grid-row-gap, 8px)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_HELP_LABEL_HEIGHT: `var(--o23-playground-dialog-configurable-element-help-label-height, ${variables.INPUT_HEIGHT})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_HEIGHT: `var(--o23-playground-dialog-configurable-element-help-badge-height, ${variables.INPUT_HEIGHT})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_HELP_BADGE_COLOR: `var(--o23-playground-dialog-configurable-element-help-badge-color, ${variables.PRIMARY_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_EXPAND_BADGE_COLOR: `var(--o23-playground-dialog-configurable-element-expand-badge-color, ${variables.PRIMARY_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_COLLAPSE_BADGE_COLOR: `var(--o23-playground-dialog-configurable-element-collapse-badge-color, ${variables.PRIMARY_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_GROUP_FONT_WEIGHT: "var(--o23-playground-dialog-configurable-element-group-font-weight, 600)",
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_GROUP_BORDER: `var(--o23-playground-dialog-configurable-element-group-border, 1px solid ${variables.CONFIGURABLE_ELEMENT_GROUP_BORDER_COLOR})`,
    EDIT_DIALOG_CONFIGURABLE_ELEMENT_SPECIFIC_INPUT_PREFIX_FONT_SIZE: "var(--o23-playground-dialog-configurable-element-specific-input-prefix-font-size, max(0.8em, 12px))",
    NODE_BORDER_WIDTH: `var(--o23-playground-node-border-width, 2px)`,
    NODE_BORDER_RADIUS: "var(--o23-playground-node-border-radius, 8px)",
    NODE_BACKGROUND: `var(--o23-playground-node-background, ${variables.BACKGROUND_COLOR})`,
    NODE_TITLE_PADDING: "var(--o23-playground-node-title-padding, 0 10px)",
    NODE_TITLE_SPREADER_MIN_WIDTH: "var(--o23-playground-node-title-spreader-min-width, 40px)",
    NODE_MIN_WIDTH: "var(--o23-playground-node-min-width, 250px)",
    NODE_MAX_WIDTH: `var(--o23-playground-node-max-width, unset)`,
    NODE_ICON_SIZE: "var(--o23-playground-node-icon-size, 14px)",
    NODE_PORT_HEIGHT: "var(--o23-playground-node-port-height, 24px)",
    NODE_PORT_BORDER_WIDTH: `var(--o23-playground-node-port-border-width, 1px)`,
    NODE_PORT_RADIUS: "var(--o23-playground-node-link-port-radius, 8px)",
    NODE_NEXT_STEP_PORT_BACKGROUND_COLOR: `var(--o23-playground-node-next-step-port-background-color, ${variables.NEXT_STEP_PORT_COLOR})`,
    NODE_NEXT_STEP_PORT_BORDER: `var(--o23-playground-node-next-step-port-border, 2px solid ${color(variables.NEXT_STEP_PORT_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_PREVIOUS_STEP_PORT_BACKGROUND_COLOR: `var(--o23-playground-node-previous-step-port-background-color, ${variables.PREVIOUS_STEP_PORT_COLOR})`,
    NODE_PREVIOUS_STEP_PORT_BORDER: `var(--o23-playground-node-previous-step-port-border, 2px solid ${color(variables.PREVIOUS_STEP_PORT_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_PORT_STEPS_BORDER: `var(--o23-playground-port-sub-step-border, 1px solid ${variables.PORT_STEPS_COLOR})`,
    NODE_PORT_STEPS_BACKGROUND: `var(--o23-playground-port-sub-step-background, ${color(variables.PORT_STEPS_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_PORT_STEPS_ICON_COLOR: `var(--o23-playground-port-sub-step-icon-color, ${variables.INVERT_COLOR})`,
    NODE_PORT_ERROR_HANDLES_BORDER: `var(--o23-playground-port-error-handles-border, 1px solid ${variables.PORT_ERROR_HANDLES_COLOR})`,
    NODE_PORT_ERROR_HANDLES_BACKGROUND: `var(--o23-playground-port-error-handles-background, ${color(variables.PORT_ERROR_HANDLES_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_PORT_ERROR_HANDLES_ICON_COLOR: `var(--o23-playground-port-error-handles-icon-color, ${variables.INVERT_COLOR})`,
    NODE_PORT_FIRST_SUB_STEP_BACKGROUND: `var(--o23-playground-port-first-sub-step-background, ${variables.PORT_FIRST_SUB_STEP_COLOR})`,
    NODE_PORT_FIRST_SUB_STEP_BORDER: `var(--o23-playground-port-first-sub-step-border, 1px solid ${color(variables.PORT_FIRST_SUB_STEP_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_PORT_LAST_SUB_STEP_JOIN_BACKGROUND: `var(--o23-playground-port-last-sub-step-join-background, ${variables.PORT_LAST_SUB_STEP_JOIN_COLOR})`,
    NODE_PORT_LAST_SUB_STEP_JOIN_BORDER: `var(--o23-playground-port-last-sub-step-join-border, 1px solid ${color(variables.PORT_LAST_SUB_STEP_JOIN_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_PORT_ROUTE_TEST_COLOR: `var(--o23-playground-port-route-test-color, ${variables.INVERT_COLOR})`,
    NODE_PORT_ROUTE_TEST_BACKGROUND: `var(--o23-playground-port-route-test-background, ${variables.PORT_ROUTE_TEST_COLOR})`,
    NODE_PORT_ROUTE_TEST_BORDER: `var(--o23-playground-port-route-test-border, 1px solid ${color(variables.PORT_ROUTE_TEST_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_PORT_ROUTE_TEST_RADIUS: "var(--o23-playground-port-otherwise-radius, 10px)",
    NODE_PORT_OTHERWISE_COLOR: `var(--o23-playground-port-otherwise-color, ${variables.INVERT_COLOR})`,
    NODE_PORT_OTHERWISE_BACKGROUND: `var(--o23-playground-port-otherwise-background, ${variables.PORT_OTHERWISE_COLOR})`,
    NODE_PORT_OTHERWISE_BORDER: `var(--o23-playground-port-otherwise-border, 1px solid ${color(variables.PORT_OTHERWISE_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_PORT_OTHERWISE_RADIUS: "var(--o23-playground-port-otherwise-radius, 10px)",
    LINK_STROKE_LINECAP: "var(--o23-playground-link-stroke-linecap, round)",
    LINK_DEFAULT_STROKE_DASHARRAY: "var(--o23-playground-link-default-stroke-dasharray, unset)",
    LINK_DEFAULT_SELECTED_STROKE_DASHARRAY: "var(--o23-playground-link-default-selected-stroke-dasharray, 8 4)",
    LINK_SELECTED_STROKE_DASHOFFSET: "var(--o23-playground-link-selected-stroke-dashoffset, 24)",
    LINK_STEPS_DASHARRAY: "var(--o23-playground-link-steps-dasharray, unset)",
    LINK_STEPS_SELECTED_DASHARRAY: "var(--o23-playground-link-steps-selected-dasharray, var(--o23-playground-link-default-selected-stroke-dasharray, 8 4))",
    LINK_ERROR_HANDLES_COLOR: `var(--o23-playground-link-error-handles-color, ${variables.LINK_ERROR_HANDLES_COLOR})`,
    LINK_ERROR_HANDLES_SELECTED_COLOR: `var(--o23-playground-link-error-handles-selected-color, ${color(variables.LINK_ERROR_HANDLES_COLOR).lighten(0.1).opaquer(0.7)})`,
    LINK_ERROR_HANDLES_DASHARRAY: "var(--o23-playground-link-error-handles-dasharray, unset)",
    LINK_ERROR_HANDLES_SELECTED_DASHARRAY: "var(--o23-playground-link-error-handles-selected-dasharray, var(--o23-playground-link-default-selected-stroke-dasharray, 8 4))",
    LINK_LAST_SUB_STEP_JOIN_DASHARRAY: `var(--o23-playground-link-last-sub-step-join-dasharray, 6)`,
    LINK_LAST_SUB_STEP_JOIN_SELECTED_DASHARRAY: `var(--o23-playground-link-last-sub-step-join-selected-dasharray, 6)`,
    LINK_END_OF_ME_JOIN_DASHARRAY: "var(--o23-playground-link-end-of-me-join-dasharray, 6)",
    LINK_END_OF_ME_JOIN_SELECTED_DASHARRAY: "var(--o23-playground-link-end-of-me-join-selected-dasharray, 6)",
    NODE_PRE_PORT_FONT_SIZE: "var(--o23-playground-pre-port-font-size, 14px)",
    NODE_PRE_PORT_FONT_WEIGHT: "var(--o23-playground-pre-port-font-weight, 400)",
    NODE_PRE_PORT_COLOR: `var(--o23-playground-pre-port-color, ${variables.INVERT_COLOR})`,
    NODE_PRE_PORT_BACKGROUND: `var(--o23-playground-pre-port-background, ${variables.PRE_PORT_COLOR})`,
    NODE_PRE_PORT_BORDER: `var(--o23-playground-pre-port-border, 1px solid ${color(variables.PRE_PORT_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_PRE_PORT_PADDING: "var(--o23-playground-pre-port-padding, 0 12px 0 8px)",
    NODE_PRE_PORT_UNDEFINED_BACKGROUND: `var(--o23-playground-pre-port-undefined-background, ${CssConstants.WAIVE_COLOR})`,
    NODE_PRE_PORT_UNDEFINED_BORDER: `var(--o23-playground-pre-port-undefined-border, 1px solid ${color(CssConstants.WAIVE_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_PRE_PORT_LACKING_BACKGROUND: `var(--o23-playground-pre-port-lacking-background, ${variables.DANGER_COLOR})`,
    NODE_PRE_PORT_LACKING_BORDER: `var(--o23-playground-pre-port-lacking-border, 1px solid ${color(CssConstants.DANGER_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_PRE_PORT_DANGER_BORDER: `var(--o23-playground-pre-port-danger-border, 1px solid ${variables.DANGER_COLOR})`,
    NODE_PRE_PORT_DANGER_BACKGROUND: `var(--o23-playground-pre-port-danger-background, ${color(CssConstants.DANGER_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_PRE_PORT_BADGE_BACKGROUND: `var(--o23-playground-pre-port-badge-background, ${color(variables.PRE_PORT_COLOR).darken(0.1).opaquer(0.9)})`,
    NODE_PRE_PORT_BADGE_DANGER_BACKGROUND: `var(--o23-playground-pre-port-badge-danger-background, ${variables.DANGER_COLOR})`,
    NODE_PRE_PORT_BADGE_BORDER: `var(--o23-playground-pre-port-badge-background, 1px solid ${variables.INVERT_COLOR})`,
    NODE_POST_PORT_FONT_SIZE: "var(--o23-playground-post-port-font-size, 14px)",
    NODE_POST_PORT_FONT_WEIGHT: "var(--o23-playground-post-port-font-weight, 400)",
    NODE_POST_PORT_COLOR: `var(--o23-playground-post-port-color, ${variables.INVERT_COLOR})`,
    NODE_POST_PORT_BACKGROUND: `var(--o23-playground-post-port-background, ${variables.POST_PORT_COLOR})`,
    NODE_POST_PORT_BORDER: `var(--o23-playground-post-port-border, 1px solid ${color(variables.POST_PORT_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_POST_PORT_PADDING: "var(--o23-playground-post-port-padding, 0 8px 0 12px)",
    NODE_POST_PORT_UNDEFINED_BACKGROUND: `var(--o23-playground-post-port-undefined-background, ${CssConstants.WAIVE_COLOR})`,
    NODE_POST_PORT_UNDEFINED_BORDER: `var(--o23-playground-post-port-undefined-border, 1px solid ${color(CssConstants.WAIVE_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_POST_PORT_LACKING_BACKGROUND: `var(--o23-playground-post-port-lacking-background, ${variables.DANGER_COLOR})`,
    NODE_POST_PORT_LACKING_BORDER: `var(--o23-playground-post-port-lacking-border, 1px solid ${color(CssConstants.DANGER_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_POST_PORT_DANGER_BORDER: `var(--o23-playground-post-port-danger-border, 1px solid ${variables.DANGER_COLOR})`,
    NODE_POST_PORT_DANGER_BACKGROUND: `var(--o23-playground-post-port-danger-background, ${color(CssConstants.DANGER_COLOR).darken(0.1).opaquer(0.5)})`,
    NODE_POST_PORT_BADGE_BACKGROUND: `var(--o23-playground-post-port-badge-background, ${color(variables.POST_PORT_COLOR).darken(0.1).opaquer(0.9)})`,
    NODE_POST_PORT_BADGE_DANGER_BACKGROUND: `var(--o23-playground-post-port-badge-danger-background, ${variables.DANGER_COLOR})`,
    NODE_POST_PORT_BADGE_BORDER: `var(--o23-playground-post-port-badge-background, 1px solid ${variables.INVERT_COLOR})`,
    NODE_START_BORDER_COLOR: `var(--o23-playground-node-start-border-color, ${variables.NODE_START_COLOR})`,
    NODE_START_BORDER: `var(--o23-playground-node-start-border, 2px solid ${variables.NODE_START_COLOR})`,
    NODE_START_TITLE_FONT_SIZE: "var(--o23-playground-node-start-title-font-size, 16px)",
    NODE_START_TITLE_FONT_WEIGHT: "var(--o23-playground-node-start-title-font-weight, 600)",
    NODE_START_SECOND_TITLE_FONT_SIZE: "var(--o23-playground-node-start-second-title-font-size, 14px)",
    NODE_START_SECOND_TITLE_FONT_WEIGHT: "var(--o23-playground-node-start-second-title-font-weight, 600)",
    NODE_START_TITLE_COLOR: `var(--o23-playground-node-start-title-color, ${variables.INVERT_COLOR})`,
    NODE_START_TITLE_BACKGROUND: `var(--o23-playground-node-start-title-background, linear-gradient(135deg, ${variables.NODE_START_COLOR} 0%, ${color(variables.NODE_START_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_START_COLOR).alpha(0.5)} 100%))`,
    NODE_START_SECOND_TITLE_DECORATION: "var(--o23-playground-node-start-second-title-decoration, underline double)",
    NODE_START_BODY_HEIGHT: `var(--o23-playground-node-start-body-height, 32px)`,
    NODE_START_BODY_PADDING: "var(--o23-playground-node-start-body-padding, 8px 0)",
    NODE_END_BORDER_COLOR: `var(--o23-playground-node-end-border-color, ${variables.NODE_END_COLOR})`,
    NODE_END_BORDER: `var(--o23-playground-node-end-border, 2px solid ${variables.NODE_END_COLOR})`,
    NODE_END_TITLE_FONT_SIZE: "var(--o23-playground-node-end-title-font-size, 16px)",
    NODE_END_TITLE_FONT_WEIGHT: "var(--o23-playground-node-end-title-font-weight, 600)",
    NODE_END_TITLE_COLOR: `var(--o23-playground-node-end-title-color, ${variables.INVERT_COLOR})`,
    NODE_END_TITLE_BACKGROUND: `var(--o23-playground-node-end-title-background, linear-gradient(135deg, ${variables.NODE_END_COLOR} 0%, ${color(variables.NODE_END_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_END_COLOR).alpha(0.5)} 100%))`,
    NODE_END_BODY_HEIGHT: "var(--o23-playground-node-end-body-height, 32px)",
    NODE_END_BODY_PADDING: "var(--o23-playground-node-end-body-padding, 8px 0)",
    NODE_JOIN_END_BORDER_COLOR: `var(--o23-playground-node-join-end-border-color, ${variables.NODE_JOIN_END_COLOR})`,
    NODE_JOIN_END_BORDER: `var(--o23-playground-node-join-end-border, 2px solid ${variables.NODE_JOIN_END_COLOR})`,
    NODE_JOIN_END_TITLE_FONT_SIZE: "var(--o23-playground-node-join-end-title-font-size, 16px)",
    NODE_JOIN_END_TITLE_FONT_WEIGHT: "var(--o23-playground-node-join-end-title-font-weight, 600)",
    NODE_JOIN_END_TITLE_COLOR: `var(--o23-playground-node-join-end-title-color, ${variables.INVERT_COLOR})`,
    NODE_JOIN_END_TITLE_BACKGROUND: `var(--o23-playground-node-join-end-title-background, linear-gradient(135deg, ${variables.NODE_JOIN_END_COLOR} 0%, ${color(variables.NODE_JOIN_END_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_JOIN_END_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_BORDER: `var(--o23-playground-node-step-border, 2px solid ${variables.NODE_STEP_COLOR})`,
    NODE_STEP_TITLE_FONT_SIZE: "var(--o23-playground-node-step-title-font-size, 16px)",
    NODE_STEP_TITLE_FONT_WEIGHT: "var(--o23-playground-node-step-title-font-weight, 600)",
    NODE_STEP_TITLE_COLOR: `var(--o23-playground-node-step-title-color, ${variables.INVERT_COLOR})`,
    NODE_STEP_TITLE_BACKGROUND: `var(--o23-playground-node-step-title-background, linear-gradient(135deg, ${variables.NODE_STEP_COLOR} 0%, ${color(variables.NODE_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_BODY_HEIGHT: "var(--o23-playground-node-step-body-height, 32px)",
    NODE_STEP_BODY_PADDING: "var(--o23-playground-node-step-body-padding, 8px 0)",
    NODE_STEP_OPERATORS_HEIGHT: "var(--o23-playground-node-step-operators-height, 32px)",
    NODE_STEP_OPERATOR_HEIGHT: "var(--o23-playground-node-step-operator-height, 24px)",
    NODE_STEP_OPERATOR_COLOR: `var(--o23-playground-node-step-operator-color, ${variables.STEP_OPERATOR_COLOR})`,
    NODE_STEP_OPERATOR_DANGER_COLOR: `var(--o23-playground-node-step-operator-border-danger-color, ${variables.DANGER_COLOR})`,
    NODE_STEP_OPERATOR_BORDER: `var(--o23-playground-node-step-operator-border, 1px solid ${variables.STEP_OPERATOR_COLOR})`,
    NODE_STEP_OPERATOR_BORDER_RADIUS: "var(--o23-playground-node-step-operator-border-radius, 12px)",
    NODE_STEP_HTTP_FETCH_BORDER: `var(--o23-playground-node-step-http-fetch-border, 2px solid ${variables.NODE_STEP_HTTP_COLOR})`,
    NODE_STEP_HTTP_FETCH_TITLE_BACKGROUND: `var(--o23-playground-node-step-http-fetch-title-background, linear-gradient(135deg, ${variables.NODE_STEP_HTTP_COLOR} 0%, ${color(variables.NODE_STEP_HTTP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_STEP_HTTP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_HTTP_GET_BORDER: `var(--o23-playground-node-step-http-fetch-border, 2px solid ${variables.NODE_STEP_HTTP_COLOR})`,
    NODE_STEP_HTTP_GET_TITLE_BACKGROUND: `var(--o23-playground-node-step-http-fetch-title-background, linear-gradient(135deg, ${variables.NODE_STEP_HTTP_COLOR} 0%, ${color(variables.NODE_STEP_HTTP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_STEP_HTTP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_HTTP_POST_BORDER: `var(--o23-playground-node-step-http-fetch-border, 2px solid ${variables.NODE_STEP_HTTP_COLOR})`,
    NODE_STEP_HTTP_POST_TITLE_BACKGROUND: `var(--o23-playground-node-step-http-fetch-title-background, linear-gradient(135deg, ${variables.NODE_STEP_HTTP_COLOR} 0%, ${color(variables.NODE_STEP_HTTP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_STEP_HTTP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_SETS_BORDER: `var(--o23-playground-node-step-sets-border, 2px solid ${variables.NODE_STEP_SETS_COLOR})`,
    NODE_STEP_SETS_TITLE_BACKGROUND: `var(--o23-playground-node-step-sets-title-background, linear-gradient(135deg, ${variables.NODE_STEP_SETS_COLOR} 0%, ${color(variables.NODE_STEP_SETS_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_STEP_SETS_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_ASYNC_SETS_BORDER: `var(--o23-playground-node-step-async-sets-border, 2px solid ${variables.NODE_ASYNC_SETS_STEP_COLOR})`,
    NODE_STEP_ASYNC_SETS_TITLE_BACKGROUND: `var(--o23-playground-node-step-async-sets-title-background, linear-gradient(135deg, ${variables.NODE_ASYNC_SETS_STEP_COLOR} 0%, ${color(variables.NODE_ASYNC_SETS_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_ASYNC_SETS_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_EACH_BORDER: `var(--o23-playground-node-step-each-border, 2px solid ${variables.NODE_EACH_STEP_COLOR})`,
    NODE_STEP_EACH_TITLE_BACKGROUND: `var(--o23-playground-node-step-each-title-background, linear-gradient(135deg, ${variables.NODE_EACH_STEP_COLOR} 0%, ${color(variables.NODE_EACH_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_EACH_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_PARALLEL_BORDER: `var(--o23-playground-node-step-parallel-border, 2px solid ${variables.NODE_PARALLEL_STEP_COLOR})`,
    NODE_STEP_PARALLEL_TITLE_BACKGROUND: `var(--o23-playground-node-step-parallel-title-background, linear-gradient(135deg, ${variables.NODE_PARALLEL_STEP_COLOR} 0%, ${color(variables.NODE_PARALLEL_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_PARALLEL_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_CONDITIONAL_BORDER: `var(--o23-playground-node-step-conditional-border, 2px solid ${variables.NODE_CONDITIONAL_STEP_COLOR})`,
    NODE_STEP_CONDITIONAL_TITLE_BACKGROUND: `var(--o23-playground-node-step-conditional-title-background, linear-gradient(135deg, ${variables.NODE_CONDITIONAL_STEP_COLOR} 0%, ${color(variables.NODE_CONDITIONAL_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_CONDITIONAL_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_ROUTES_BORDER: `var(--o23-playground-node-step-routes-border, 2px solid ${variables.NODE_ROUTES_STEP_COLOR})`,
    NODE_STEP_ROUTES_TITLE_BACKGROUND: `var(--o23-playground-node-step-routes-title-background, linear-gradient(135deg, ${variables.NODE_ROUTES_STEP_COLOR} 0%, ${color(variables.NODE_ROUTES_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_ROUTES_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_REF_PIPELINE_BORDER: `var(--o23-playground-node-step-ref-pipeline-border, 2px solid ${variables.NODE_REF_PIPELINE_STEP_COLOR})`,
    NODE_STEP_REF_PIPELINE_TITLE_BACKGROUND: `var(--o23-playground-node-step-ref-pipeline-title-background, linear-gradient(135deg, ${variables.NODE_REF_PIPELINE_STEP_COLOR} 0%, ${color(variables.NODE_REF_PIPELINE_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_REF_PIPELINE_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_REF_STEP_BORDER: `var(--o23-playground-node-step-ref-step-border, 2px solid ${variables.NODE_REF_STEP_STEP_COLOR})`,
    NODE_STEP_REF_STEP_TITLE_BACKGROUND: `var(--o23-playground-node-step-ref-step-title-background, linear-gradient(135deg, ${variables.NODE_REF_STEP_STEP_COLOR} 0%, ${color(variables.NODE_REF_STEP_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_REF_STEP_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_TYPEORM_SNIPPET_BORDER: `var(--o23-playground-node-step-typeorm-border, 2px solid ${variables.NODE_TYPEORM_STEP_COLOR})`,
    NODE_STEP_TYPEORM_SNIPPET_TITLE_BACKGROUND: `var(--o23-playground-node-step-typeorm-title-background, linear-gradient(135deg, ${variables.NODE_TYPEORM_STEP_COLOR} 0%, ${color(variables.NODE_TYPEORM_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_TYPEORM_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_TYPEORM_BULK_SAVE_BORDER: `var(--o23-playground-node-step-typeorm-border, 2px solid ${variables.NODE_TYPEORM_STEP_COLOR})`,
    NODE_STEP_TYPEORM_BULK_SAVE_TITLE_BACKGROUND: `var(--o23-playground-node-step-typeorm-title-background, linear-gradient(135deg, ${variables.NODE_TYPEORM_STEP_COLOR} 0%, ${color(variables.NODE_TYPEORM_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_TYPEORM_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_TYPEORM_SAVE_BORDER: `var(--o23-playground-node-step-typeorm-border, 2px solid ${variables.NODE_TYPEORM_STEP_COLOR})`,
    NODE_STEP_TYPEORM_SAVE_TITLE_BACKGROUND: `var(--o23-playground-node-step-typeorm-title-background, linear-gradient(135deg, ${variables.NODE_TYPEORM_STEP_COLOR} 0%, ${color(variables.NODE_TYPEORM_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_TYPEORM_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_TYPEORM_LOAD_MANY_BORDER: `var(--o23-playground-node-step-typeorm-border, 2px solid ${variables.NODE_TYPEORM_STEP_COLOR})`,
    NODE_STEP_TYPEORM_LOAD_MANY_TITLE_BACKGROUND: `var(--o23-playground-node-step-typeorm-title-background, linear-gradient(135deg, ${variables.NODE_TYPEORM_STEP_COLOR} 0%, ${color(variables.NODE_TYPEORM_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_TYPEORM_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_TYPEORM_LOAD_ONE_BORDER: `var(--o23-playground-node-step-typeorm-border, 2px solid ${variables.NODE_TYPEORM_STEP_COLOR})`,
    NODE_STEP_TYPEORM_LOAD_ONE_TITLE_BACKGROUND: `var(--o23-playground-node-step-typeorm-title-background, linear-gradient(135deg, ${variables.NODE_TYPEORM_STEP_COLOR} 0%, ${color(variables.NODE_TYPEORM_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_TYPEORM_STEP_COLOR).alpha(0.5)} 100%))`,
    NODE_STEP_TYPEORM_TRANSACTIONAL_BORDER: `var(--o23-playground-node-step-typeorm-border, 2px solid ${variables.NODE_TYPEORM_STEP_COLOR})`,
    NODE_STEP_TYPEORM_TRANSACTIONAL_TITLE_BACKGROUND: `var(--o23-playground-node-step-typeorm-title-background, linear-gradient(135deg, ${variables.NODE_TYPEORM_STEP_COLOR} 0%, ${color(variables.NODE_TYPEORM_STEP_COLOR).alpha(0.7)} 70%, ${color(variables.NODE_TYPEORM_STEP_COLOR).alpha(0.5)} 100%))`,
    SNIPPET_BORDER: `var(--o23-playground-snippet-border, ${variables.BORDER})`,
    SNIPPET_BORDER_RADIUS: `var(--o23-playground-snippet-border-radius, ${variables.BORDER_RADIUS})`,
    SNIPPET_HEIGHT: "var(--o23-playground-snippet-height, 400px)",
    SNIPPET_IO_TRANSFORMER_HEIGHT: "var(--o23-playground-snippet-io-transformer-height, 200px)",
    SNIPPET_ERROR_HANDLES_HEIGHT: `var(--o23-playground-snippet-error-handles-height, 200px)`,
    SNIPPET_PARALLEL_CLONE_DATA_HEIGHT: "var(--o23-playground-snippet-parallel-clone-data-height, 300px)",
    SNIPPET_HTTP_DECORATE_URL_HEIGHT: "var(--o23-playground-snippet-http-decorate-url-height, 200px)",
    SNIPPET_HTTP_GENERATE_HEADERS_HEIGHT: "var(--o23-playground-snippet-http-generate-headers-height, 200px)",
    SNIPPET_HTTP_GENERATE_BODY_HEIGHT: "var(--o23-playground-snippet-http-generate-body-height, 200px)",
    SNIPPET_HTTP_READ_RESPONSE_HEIGHT: "var(--o23-playground-snippet-http-read-response-height, 200px)",
    SNIPPET_HTTP_RESPONSE_ERROR_HANDLES_HEIGHT: "var(--o23-playground-snippet-http-response-error-handles-height, 300px)",
    SNIPPET_ROUTE_CHECK_HEIGHT: "var(--o23-playground-snippet-route-check-height, 200px)",
    SQL_HEIGHT: "var(--o23-playground-sql-height, 200px)",
    CODE_MIRROR_SEARCH_PANEL_BACKGROUND_COLOR: `var(--o23-playground-cm-search-panel-background-color, ${variables.CODE_MIRROR_SEARCH_PANEL_BACKGROUND_COLOR})`,
    CODE_MIRROR_SEARCH_PANEL_BUTTON_BACKGROUND_COLOR: `var(--o23-playground-cm-search-panel-button-background-color, ${variables.CODE_MIRROR_SEARCH_PANEL_BUTTON_BACKGROUND_COLOR})`,
    CODE_MIRROR_ACTIVE_LINE_BACKGROUND_COLOR: `var(--o23-playground-cm-active-line-background-color, ${variables.CODE_MIRROR_ACTIVE_LINE_BACKGROUND_COLOR})`
  };
};
const PlaygroundCssVars = createPlaygroundCssVars(PlaygroundCssConstants);
const Accept = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-accept", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { opacity: "0.5", d: "M20 6L3 6", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { opacity: "0.5", d: "M10 11L3 11", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { opacity: "0.5", d: "M10 16H3", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M14 13.5L16.1 16L20 11", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const Back = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-back", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M9.5 7L4.5 12L9.5 17", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.5", d: "M4.5 12L14.5 12C16.1667 12 19.5 13 19.5 17", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" })
  );
};
const ArrowLeft = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-arrow-left", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M14.9998 19.9201L8.47984 13.4001C7.70984 12.6301 7.70984 11.3701 8.47984 10.6001L14.9998 4.08008", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const ArrowRight = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-arrow-right", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M8.91016 19.9201L15.4302 13.4001C16.2002 12.6301 16.2002 11.3701 15.4302 10.6001L8.91016 4.08008", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const Collapse = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-collapse", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M9.99756 6.00065C9.98309 7.70722 9.88834 8.64801 9.26793 9.26842C8.64752 9.88883 7.70673 9.98358 6.00017 9.99805", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M9.99756 17.9974C9.98309 16.2908 9.88834 15.35 9.26793 14.7296C8.64752 14.1092 7.70673 14.0145 6.00017 14", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M14 6.00065C14.0145 7.70722 14.1092 8.64801 14.7296 9.26842C15.35 9.88883 16.2908 9.98358 17.9974 9.99805", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M14 17.9974C14.0145 16.2908 14.1092 15.35 14.7296 14.7296C15.35 14.1092 16.2908 14.0145 17.9974 14", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("circle", { opacity: "0.5", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "1.5" })
  );
};
const Expand = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-expand", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M6 9.99739C6.01447 8.29083 6.10921 7.35004 6.72963 6.72963C7.35004 6.10921 8.29083 6.01447 9.99739 6", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M6 14.0007C6.01447 15.7072 6.10921 16.648 6.72963 17.2684C7.35004 17.8888 8.29083 17.9836 9.99739 17.998", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M17.9976 9.99739C17.9831 8.29083 17.8883 7.35004 17.2679 6.72963C16.6475 6.10921 15.7067 6.01447 14.0002 6", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M17.9976 14.0007C17.9831 15.7072 17.8883 16.648 17.2679 17.2684C16.6475 17.8888 15.7067 17.9836 14.0002 17.998", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("circle", { opacity: "0.5", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "1.5" })
  );
};
const PortUndefined = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-port-undefined", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M12 22C10.9808 22 10.62 21.8424 9.89856 21.5273C7.23896 20.3655 3 17.6294 3 11.9914V10.4168C3 7.21918 3 5.62039 3.37752 5.08252C3.75503 4.54465 5.25825 4.02996 8.26484 3.00079L8.83765 2.80472C10.4049 2.26824 11.1885 2 11.9999 2", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("path", { opacity: "0.5", d: "M12.0001 22C13.0193 22 13.3801 21.8424 14.1015 21.5273C16.7611 20.3655 21.0001 17.6294 21.0001 11.9914V10.4168C21.0001 7.21918 21.0001 5.62039 20.6226 5.08252C20.245 4.54465 18.7417 4.02996 15.7351 3.00079L15.1623 2.80472C13.595 2.26824 12.8114 2 12 2", stroke: "currentColor", strokeWidth: "1.5" })
  );
};
const PortChecked = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-port-checked", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { opacity: "0.5", d: "M3 10.4167C3 7.21907 3 5.62028 3.37752 5.08241C3.75503 4.54454 5.25832 4.02996 8.26491 3.00079L8.83772 2.80472C10.405 2.26824 11.1886 2 12 2C12.8114 2 13.595 2.26824 15.1623 2.80472L15.7351 3.00079C18.7417 4.02996 20.245 4.54454 20.6225 5.08241C21 5.62028 21 7.21907 21 10.4167C21 10.8996 21 11.4234 21 11.9914C21 17.6294 16.761 20.3655 14.1014 21.5273C13.38 21.8424 13.0193 22 12 22C10.9807 22 10.62 21.8424 9.89856 21.5273C7.23896 20.3655 3 17.6294 3 11.9914C3 11.4234 3 10.8996 3 10.4167Z", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("path", { d: "M9.5 12.4L10.9286 14L14.5 10", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const PortIncorrect = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-port-incorrect", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { opacity: "0.5", d: "M3 10.4167C3 7.21907 3 5.62028 3.37752 5.08241C3.75503 4.54454 5.25832 4.02996 8.26491 3.00079L8.83772 2.80472C10.405 2.26824 11.1886 2 12 2C12.8114 2 13.595 2.26824 15.1623 2.80472L15.7351 3.00079C18.7417 4.02996 20.245 4.54454 20.6225 5.08241C21 5.62028 21 7.21907 21 10.4167C21 10.8996 21 11.4234 21 11.9914C21 17.6294 16.761 20.3655 14.1014 21.5273C13.38 21.8424 13.0193 22 12 22C10.9807 22 10.62 21.8424 9.89856 21.5273C7.23896 20.3655 3 17.6294 3 11.9914C3 11.4234 3 10.8996 3 10.4167Z", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("path", { d: "M14.5 9.5L9.50002 14.5M9.5 9.49998L14.5 14.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" })
  );
};
const RouteTest = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-route-test", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M6.08913 13.2799H9.17913V20.4799C9.17913 22.1599 10.0891 22.4999 11.1991 21.2399L18.7691 12.6399C19.6991 11.5899 19.3091 10.7199 17.8991 10.7199H14.8091V3.5199C14.8091 1.8399 13.8991 1.4999 12.7891 2.7599L5.21913 11.3599C4.29913 12.4199 4.68913 13.2799 6.08913 13.2799Z", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const Otherwise = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-otherwise", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M11.9998 9.32C13.1898 9.32 14.1598 8.35 14.1598 7.16C14.1598 5.97 13.1898 5 11.9998 5C10.8098 5 9.83984 5.97 9.83984 7.16C9.83984 8.35 10.8098 9.32 11.9998 9.32Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.4", d: "M6.78988 19.0002C7.97988 19.0002 8.94988 18.0302 8.94988 16.8402C8.94988 15.6502 7.97988 14.6802 6.78988 14.6802C5.59988 14.6802 4.62988 15.6502 4.62988 16.8402C4.62988 18.0302 5.58988 19.0002 6.78988 19.0002Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M17.2098 19.0002C18.3998 19.0002 19.3698 18.0302 19.3698 16.8402C19.3698 15.6502 18.3998 14.6802 17.2098 14.6802C16.0198 14.6802 15.0498 15.6502 15.0498 16.8402C15.0498 18.0302 16.0198 19.0002 17.2098 19.0002Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const ElementChecked = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-element-checked", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M9.5 12.4L10.9286 14L14.5 10", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M3 10.4167C3 7.21907 3 5.62028 3.37752 5.08241C3.75503 4.54454 5.25832 4.02996 8.26491 3.00079L8.83772 2.80472C10.405 2.26824 11.1886 2 12 2C12.8114 2 13.595 2.26824 15.1623 2.80472L15.7351 3.00079C18.7417 4.02996 20.245 4.54454 20.6225 5.08241C21 5.62028 21 7.21907 21 10.4167C21 10.8996 21 11.4234 21 11.9914C21 14.4963 20.1632 16.4284 19 17.9041M3.19284 14C4.05026 18.2984 7.57641 20.5129 9.89856 21.5273C10.62 21.8424 10.9807 22 12 22C13.0193 22 13.38 21.8424 14.1014 21.5273C14.6796 21.2747 15.3324 20.9478 16 20.5328", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" })
  );
};
const ElementMissed = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-element-missed", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M10.125 8.875C10.125 7.83947 10.9645 7 12 7C13.0355 7 13.875 7.83947 13.875 8.875C13.875 9.56245 13.505 10.1635 12.9534 10.4899C12.478 10.7711 12 11.1977 12 11.75V13", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("circle", { cx: "12", cy: "16", r: "1", fill: "currentColor" }),
    React.createElement("path", { d: "M7 3.33782C8.47087 2.48697 10.1786 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 10.1786 2.48697 8.47087 3.33782 7", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" })
  );
};
const ElementBanned = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-element-banned", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M14.5 9.5L9.50002 14.5M9.5 9.49998L14.5 14.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M3 10.4167C3 7.21907 3 5.62028 3.37752 5.08241C3.75503 4.54454 5.25832 4.02996 8.26491 3.00079L8.83772 2.80472C10.405 2.26824 11.1886 2 12 2C12.8114 2 13.595 2.26824 15.1623 2.80472L15.7351 3.00079C18.7417 4.02996 20.245 4.54454 20.6225 5.08241C21 5.62028 21 7.21907 21 10.4167C21 10.8996 21 11.4234 21 11.9914C21 14.4963 20.1632 16.4284 19 17.9041M3.19284 14C4.05026 18.2984 7.57641 20.5129 9.89856 21.5273C10.62 21.8424 10.9807 22 12 22C13.0193 22 13.38 21.8424 14.1014 21.5273C14.6796 21.2747 15.3324 20.9478 16 20.5328", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" })
  );
};
const ElementHelp = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-element-help", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("circle", { opacity: "0.5", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("path", { d: "M10.125 8.875C10.125 7.83947 10.9645 7 12 7C13.0355 7 13.875 7.83947 13.875 8.875C13.875 9.56245 13.505 10.1635 12.9534 10.4899C12.478 10.7711 12 11.1977 12 11.75V13", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("circle", { cx: "12", cy: "16", r: "1", fill: "currentColor" })
  );
};
const Snippet = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-snippet", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M15.3929 4.05365L14.8912 4.61112L15.3929 4.05365ZM19.3517 7.61654L18.85 8.17402L19.3517 7.61654ZM21.654 10.1541L20.9689 10.4592V10.4592L21.654 10.1541ZM3.17157 20.8284L3.7019 20.2981H3.7019L3.17157 20.8284ZM20.8284 20.8284L20.2981 20.2981L20.2981 20.2981L20.8284 20.8284ZM14 21.25H10V22.75H14V21.25ZM2.75 14V10H1.25V14H2.75ZM21.25 13.5629V14H22.75V13.5629H21.25ZM14.8912 4.61112L18.85 8.17402L19.8534 7.05907L15.8947 3.49618L14.8912 4.61112ZM22.75 13.5629C22.75 11.8745 22.7651 10.8055 22.3391 9.84897L20.9689 10.4592C21.2349 11.0565 21.25 11.742 21.25 13.5629H22.75ZM18.85 8.17402C20.2034 9.3921 20.7029 9.86199 20.9689 10.4592L22.3391 9.84897C21.9131 8.89241 21.1084 8.18853 19.8534 7.05907L18.85 8.17402ZM10.0298 2.75C11.6116 2.75 12.2085 2.76158 12.7405 2.96573L13.2779 1.5653C12.4261 1.23842 11.498 1.25 10.0298 1.25V2.75ZM15.8947 3.49618C14.8087 2.51878 14.1297 1.89214 13.2779 1.5653L12.7405 2.96573C13.2727 3.16993 13.7215 3.55836 14.8912 4.61112L15.8947 3.49618ZM10 21.25C8.09318 21.25 6.73851 21.2484 5.71085 21.1102C4.70476 20.975 4.12511 20.7213 3.7019 20.2981L2.64124 21.3588C3.38961 22.1071 4.33855 22.4392 5.51098 22.5969C6.66182 22.7516 8.13558 22.75 10 22.75V21.25ZM1.25 14C1.25 15.8644 1.24841 17.3382 1.40313 18.489C1.56076 19.6614 1.89288 20.6104 2.64124 21.3588L3.7019 20.2981C3.27869 19.8749 3.02502 19.2952 2.88976 18.2892C2.75159 17.2615 2.75 15.9068 2.75 14H1.25ZM14 22.75C15.8644 22.75 17.3382 22.7516 18.489 22.5969C19.6614 22.4392 20.6104 22.1071 21.3588 21.3588L20.2981 20.2981C19.8749 20.7213 19.2952 20.975 18.2892 21.1102C17.2615 21.2484 15.9068 21.25 14 21.25V22.75ZM21.25 14C21.25 15.9068 21.2484 17.2615 21.1102 18.2892C20.975 19.2952 20.7213 19.8749 20.2981 20.2981L21.3588 21.3588C22.1071 20.6104 22.4392 19.6614 22.5969 18.489C22.7516 17.3382 22.75 15.8644 22.75 14H21.25ZM2.75 10C2.75 8.09318 2.75159 6.73851 2.88976 5.71085C3.02502 4.70476 3.27869 4.12511 3.7019 3.7019L2.64124 2.64124C1.89288 3.38961 1.56076 4.33855 1.40313 5.51098C1.24841 6.66182 1.25 8.13558 1.25 10H2.75ZM10.0298 1.25C8.15538 1.25 6.67442 1.24842 5.51887 1.40307C4.34232 1.56054 3.39019 1.8923 2.64124 2.64124L3.7019 3.7019C4.12453 3.27928 4.70596 3.02525 5.71785 2.88982C6.75075 2.75158 8.11311 2.75 10.0298 2.75V1.25Z", fill: "currentColor" }),
    React.createElement("path", { opacity: "0.5", d: "M13 2.5V5C13 7.35702 13 8.53553 13.7322 9.26777C14.4645 10 15.643 10 18 10H22", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("path", { opacity: "0.5", d: "M7 14L6 15L7 16M11.5 16L12.5 17L11.5 18M10 14L8.5 18", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const Steps = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-steps", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("circle", { cx: "5", cy: "5", r: "3", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("circle", { cx: "19", cy: "19", r: "3", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("path", { opacity: "0.5", d: "M11 4.25C10.5858 4.25 10.25 4.58579 10.25 5C10.25 5.41421 10.5858 5.75 11 5.75V4.25ZM13 19L13.5303 19.5303C13.8232 19.2374 13.8232 18.7626 13.5303 18.4697L13 19ZM17.2056 8.68732L17.6083 9.32007L17.2056 8.68732ZM6.79434 15.3127L7.197 15.9454H7.197L6.79434 15.3127ZM12.0303 16.9697C11.7374 16.6768 11.2625 16.6768 10.9696 16.9697C10.6768 17.2626 10.6768 17.7374 10.9696 18.0303L12.0303 16.9697ZM10.9696 19.9697C10.6768 20.2626 10.6768 20.7374 10.9696 21.0303C11.2625 21.3232 11.7374 21.3232 12.0303 21.0303L10.9696 19.9697ZM16.1319 4.25H11V5.75H16.1319V4.25ZM13 18.25H7.86809V19.75H13V18.25ZM16.803 8.05458L6.39169 14.6799L7.197 15.9454L17.6083 9.32007L16.803 8.05458ZM13.5303 18.4697L12.0303 16.9697L10.9696 18.0303L12.4696 19.5303L13.5303 18.4697ZM12.4696 18.4697L10.9696 19.9697L12.0303 21.0303L13.5303 19.5303L12.4696 18.4697ZM7.86809 18.25C6.61754 18.25 6.14195 16.6168 7.197 15.9454L6.39169 14.6799C4.07059 16.157 5.11685 19.75 7.86809 19.75V18.25ZM16.1319 5.75C17.3824 5.75 17.858 7.38318 16.803 8.05458L17.6083 9.32007C19.9294 7.843 18.8831 4.25 16.1319 4.25V5.75Z", fill: "currentColor" })
  );
};
const FoldSubNodes = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-fold-sub-nodes", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M11.3357 5.47875L7.36344 9.00968C5.79482 10.404 5.0105 11.1012 5.0105 11.9993C5.0105 12.8975 5.79481 13.5946 7.36344 14.989L11.3357 18.5199C12.0517 19.1563 12.4098 19.4746 12.7049 19.342C13.0001 19.2095 13.0001 18.7305 13.0001 17.7725V15.4279C16.6001 15.4279 20.5001 17.1422 22.0001 19.9993C22.0001 10.8565 16.6668 8.57075 13.0001 8.57075V6.22616C13.0001 5.26817 13.0001 4.78917 12.7049 4.65662C12.4098 4.52407 12.0517 4.8423 11.3357 5.47875Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.5", d: "M8.46129 4.5L3.24509 9.34362C2.45098 10.081 1.99976 11.1158 1.99976 12.1994C1.99976 13.3418 2.50097 14.4266 3.37087 15.1671L8.46129 19.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" })
  );
};
const UnfoldSubNodes = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-unfold-sub-nodes", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M20 14C21.1046 14 22 13.1046 22 12C22 10.8954 21.1046 10 20 10C18.8954 10 18 10.8954 18 12C18 13.1046 18.8954 14 20 14Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M20 6C21.1046 6 22 5.10457 22 4C22 2.89543 21.1046 2 20 2C18.8954 2 18 2.89543 18 4C18 5.10457 18.8954 6 20 6Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M20 22C21.1046 22 22 21.1046 22 20C22 18.8954 21.1046 18 20 18C18.8954 18 18 18.8954 18 20C18 21.1046 18.8954 22 20 22Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M4 14C5.10457 14 6 13.1046 6 12C6 10.8954 5.10457 10 4 10C2.89543 10 2 10.8954 2 12C2 13.1046 2.89543 14 4 14Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement(
      "g",
      { opacity: "0.4" },
      React.createElement("path", { d: "M6 12H18", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
      React.createElement("path", { d: "M18 4H14C12 4 11 5 11 7V17C11 19 12 20 14 20H18", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
    )
  );
};
const InsertStep = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-insert-step", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M8 16C8 18.8284 8 20.2426 8.87868 21.1213C9.75736 22 11.1716 22 14 22H15C17.8284 22 19.2426 22 20.1213 21.1213C21 20.2426 21 18.8284 21 16V8C21 5.17157 21 3.75736 20.1213 2.87868C19.2426 2 17.8284 2 15 2H14C11.1716 2 9.75736 2 8.87868 2.87868C8 3.75736 8 5.17157 8 8", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { opacity: "0.5", d: "M8 19.5C5.64298 19.5 4.46447 19.5 3.73223 18.7678C3 18.0355 3 16.857 3 14.5V9.5C3 7.14298 3 5.96447 3.73223 5.23223C4.46447 4.5 5.64298 4.5 8 4.5", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("path", { d: "M6 12L15 12M15 12L12.5 14.5M15 12L12.5 9.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const RemoveStep = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-remove-step", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M2 15.3V9C2 5.5 4 4 7 4H17C20 4 22 5.5 22 9V15C22 18.5 20 20 17 20H8.5", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.4", d: "M12 14.5C13.3807 14.5 14.5 13.3807 14.5 12C14.5 10.6193 13.3807 9.5 12 9.5C10.6193 9.5 9.5 10.6193 9.5 12C9.5 13.3807 10.6193 14.5 12 14.5Z", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.4", d: "M18.5 9.5V14.5", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M9 18C9 18.75 8.78998 19.46 8.41998 20.06C7.72998 21.22 6.46 22 5 22C3.54 22 2.27002 21.22 1.58002 20.06C1.21002 19.46 1 18.75 1 18C1 15.79 2.79 14 5 14C7.21 14 9 15.79 9 18Z", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M6.06897 19.0402L3.95898 16.9302", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M6.03967 16.96L3.92969 19.0699", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const InsertRoute = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-insert-route", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M9.31993 13.28H12.4099V20.48C12.4099 21.54 13.7299 22.04 14.4299 21.24L21.9999 12.64C22.6599 11.89 22.1299 10.72 21.1299 10.72H18.0399V3.51997C18.0399 2.45997 16.7199 1.95997 16.0199 2.75997L8.44994 11.36C7.79994 12.11 8.32993 13.28 9.31993 13.28Z", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.4", d: "M8.5 4H1.5", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.4", d: "M7.5 20H1.5", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.4", d: "M4.5 12H1.5", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const RemoveRoute = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-remove-route", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M18.04 13.55C17.62 13.96 17.38 14.55 17.44 15.18C17.53 16.26 18.52 17.05 19.6 17.05H21.5V18.24C21.5 20.31 19.81 22 17.74 22H7.63C7.94 21.74 8.21 21.42 8.42 21.06C8.79 20.46 9 19.75 9 19C9 16.79 7.21 15 5 15C4.06 15 3.19 15.33 2.5 15.88V11.51C2.5 9.44001 4.19 7.75 6.26 7.75H17.74C19.81 7.75 21.5 9.44001 21.5 11.51V12.95H19.48C18.92 12.95 18.41 13.17 18.04 13.55Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.4", d: "M2.5 12.4098V7.83986C2.5 6.64986 3.23 5.58982 4.34 5.16982L12.28 2.16982C13.52 1.69982 14.85 2.61985 14.85 3.94985V7.74983", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M22.5608 13.9702V16.0302C22.5608 16.5802 22.1208 17.0302 21.5608 17.0502H19.6008C18.5208 17.0502 17.5308 16.2602 17.4408 15.1802C17.3808 14.5502 17.6208 13.9602 18.0408 13.5502C18.4108 13.1702 18.9208 12.9502 19.4808 12.9502H21.5608C22.1208 12.9702 22.5608 13.4202 22.5608 13.9702Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.4", d: "M7 12H14", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M9 19C9 19.75 8.79 20.46 8.42 21.06C8.21 21.42 7.94 21.74 7.63 22C6.93 22.63 6.01 23 5 23C3.54 23 2.27 22.22 1.58 21.06C1.21 20.46 1 19.75 1 19C1 17.74 1.58 16.61 2.5 15.88C3.19 15.33 4.06 15 5 15C7.21 15 9 16.79 9 19Z", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M6.06922 20.0402L3.94922 17.9302", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M6.04969 17.96L3.92969 20.0699", stroke: "currentColor", strokeWidth: "1.5", strokeMiterlimit: "10", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const FitCanvas = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-fit-canvas", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M12 12L17 7M17 7H13.25M17 7V10.75", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M12 12L7 17M7 17H10.75M7 17V13.25", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.5", d: "M2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2C16.714 2 19.0711 2 20.5355 3.46447C22 4.92893 22 7.28595 22 12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12Z", stroke: "currentColor", strokeWidth: "1.5" })
  );
};
const OriginSize = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-origin-size", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { opacity: "0.5", d: "M11.0002 2C6.94518 2.0073 4.82174 2.10686 3.46471 3.46389C2.00024 4.92835 2.00024 7.28538 2.00024 11.9994C2.00024 16.7135 2.00024 19.0705 3.46471 20.535C4.92918 21.9994 7.2862 21.9994 12.0002 21.9994C16.7143 21.9994 19.0713 21.9994 20.5358 20.535C21.8928 19.1779 21.9924 17.0545 21.9997 12.9994", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M13 11L22 2M22 2H16.6562M22 2V7.34375M21 3L12 12M12 12H16M12 12V8", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const ZoomIn = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-zoom-in", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("circle", { cx: "11", cy: "11", r: "9", stroke: "currentColor", strokeWidth: "1.5", opacity: "0.5" }),
    React.createElement("path", { d: "M9 11H11M11 11H13M11 11V13M11 11V9", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M21.812 20.9748C21.7493 21.0695 21.636 21.1828 21.4094 21.4094C21.1828 21.636 21.0695 21.7493 20.9748 21.812C20.4202 22.1793 19.6699 21.99 19.3559 21.4036C19.3023 21.3035 19.2563 21.15 19.1643 20.843C19.0638 20.5076 19.0136 20.3398 19.0038 20.2218C18.9466 19.5268 19.5268 18.9466 20.2218 19.0038C20.3398 19.0136 20.5075 19.0638 20.843 19.1643C21.15 19.2563 21.3035 19.3023 21.4036 19.3559C21.99 19.6699 22.1793 20.4202 21.812 20.9748Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" })
  );
};
const ZoomOut = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-zoom-out", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("circle", { cx: "11", cy: "11", r: "9", stroke: "currentColor", strokeWidth: "1.5", opacity: "0.5" }),
    React.createElement("path", { d: "M9 11H11H13", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M21.812 20.9748C21.7493 21.0695 21.636 21.1828 21.4094 21.4094C21.1828 21.636 21.0695 21.7493 20.9748 21.812C20.4202 22.1793 19.6699 21.99 19.3559 21.4036C19.3023 21.3035 19.2563 21.15 19.1643 20.843C19.0638 20.5076 19.0136 20.3398 19.0038 20.2218C18.9466 19.5268 19.5268 18.9466 20.2218 19.0038C20.3398 19.0136 20.5075 19.0638 20.843 19.1643C21.15 19.2563 21.3035 19.3023 21.4036 19.3559C21.99 19.6699 22.1793 20.4202 21.812 20.9748Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" })
  );
};
const DownloadImage = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-download-image", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "none" },
    React.createElement("path", { d: "M22 12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { opacity: "0.5", d: "M2 12.5001L3.75159 10.9675C4.66286 10.1702 6.03628 10.2159 6.89249 11.0721L11.1822 15.3618C11.8694 16.0491 12.9512 16.1428 13.7464 15.5839L14.0446 15.3744C15.1888 14.5702 16.7369 14.6634 17.7765 15.599L21 18.5001", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M17 11V2M17 11L20 8M17 11L14 8", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const DownloadFile = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-download-file", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M15.3929 4.05365L14.8912 4.61112L15.3929 4.05365ZM19.3517 7.61654L18.85 8.17402L19.3517 7.61654ZM21.654 10.1541L20.9689 10.4592V10.4592L21.654 10.1541ZM3.17157 20.8284L3.7019 20.2981H3.7019L3.17157 20.8284ZM20.8284 20.8284L20.2981 20.2981L20.2981 20.2981L20.8284 20.8284ZM14 21.25H10V22.75H14V21.25ZM2.75 14V10H1.25V14H2.75ZM21.25 13.5629V14H22.75V13.5629H21.25ZM14.8912 4.61112L18.85 8.17402L19.8534 7.05907L15.8947 3.49618L14.8912 4.61112ZM22.75 13.5629C22.75 11.8745 22.7651 10.8055 22.3391 9.84897L20.9689 10.4592C21.2349 11.0565 21.25 11.742 21.25 13.5629H22.75ZM18.85 8.17402C20.2034 9.3921 20.7029 9.86199 20.9689 10.4592L22.3391 9.84897C21.9131 8.89241 21.1084 8.18853 19.8534 7.05907L18.85 8.17402ZM10.0298 2.75C11.6116 2.75 12.2085 2.76158 12.7405 2.96573L13.2779 1.5653C12.4261 1.23842 11.498 1.25 10.0298 1.25V2.75ZM15.8947 3.49618C14.8087 2.51878 14.1297 1.89214 13.2779 1.5653L12.7405 2.96573C13.2727 3.16993 13.7215 3.55836 14.8912 4.61112L15.8947 3.49618ZM10 21.25C8.09318 21.25 6.73851 21.2484 5.71085 21.1102C4.70476 20.975 4.12511 20.7213 3.7019 20.2981L2.64124 21.3588C3.38961 22.1071 4.33855 22.4392 5.51098 22.5969C6.66182 22.7516 8.13558 22.75 10 22.75V21.25ZM1.25 14C1.25 15.8644 1.24841 17.3382 1.40313 18.489C1.56076 19.6614 1.89288 20.6104 2.64124 21.3588L3.7019 20.2981C3.27869 19.8749 3.02502 19.2952 2.88976 18.2892C2.75159 17.2615 2.75 15.9068 2.75 14H1.25ZM14 22.75C15.8644 22.75 17.3382 22.7516 18.489 22.5969C19.6614 22.4392 20.6104 22.1071 21.3588 21.3588L20.2981 20.2981C19.8749 20.7213 19.2952 20.975 18.2892 21.1102C17.2615 21.2484 15.9068 21.25 14 21.25V22.75ZM21.25 14C21.25 15.9068 21.2484 17.2615 21.1102 18.2892C20.975 19.2952 20.7213 19.8749 20.2981 20.2981L21.3588 21.3588C22.1071 20.6104 22.4392 19.6614 22.5969 18.489C22.7516 17.3382 22.75 15.8644 22.75 14H21.25ZM2.75 10C2.75 8.09318 2.75159 6.73851 2.88976 5.71085C3.02502 4.70476 3.27869 4.12511 3.7019 3.7019L2.64124 2.64124C1.89288 3.38961 1.56076 4.33855 1.40313 5.51098C1.24841 6.66182 1.25 8.13558 1.25 10H2.75ZM10.0298 1.25C8.15538 1.25 6.67442 1.24842 5.51887 1.40307C4.34232 1.56054 3.39019 1.8923 2.64124 2.64124L3.7019 3.7019C4.12453 3.27928 4.70596 3.02525 5.71785 2.88982C6.75075 2.75158 8.11311 2.75 10.0298 2.75V1.25Z", fill: "currentColor" }),
    React.createElement("path", { opacity: "0.5", d: "M13 2.5V5C13 7.35702 13 8.53553 13.7322 9.26777C14.4645 10 15.643 10 18 10H22", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("path", { opacity: "0.5", d: "M8.5 13.5L8.5 18.5M8.5 18.5L10.5 16.625M8.5 18.5L6.5 16.625", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const UploadFile = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-upload-file", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M15.3929 4.05365L14.8912 4.61112L15.3929 4.05365ZM19.3517 7.61654L18.85 8.17402L19.3517 7.61654ZM21.654 10.1541L20.9689 10.4592V10.4592L21.654 10.1541ZM3.17157 20.8284L3.7019 20.2981H3.7019L3.17157 20.8284ZM20.8284 20.8284L20.2981 20.2981L20.2981 20.2981L20.8284 20.8284ZM14 21.25H10V22.75H14V21.25ZM2.75 14V10H1.25V14H2.75ZM21.25 13.5629V14H22.75V13.5629H21.25ZM14.8912 4.61112L18.85 8.17402L19.8534 7.05907L15.8947 3.49618L14.8912 4.61112ZM22.75 13.5629C22.75 11.8745 22.7651 10.8055 22.3391 9.84897L20.9689 10.4592C21.2349 11.0565 21.25 11.742 21.25 13.5629H22.75ZM18.85 8.17402C20.2034 9.3921 20.7029 9.86199 20.9689 10.4592L22.3391 9.84897C21.9131 8.89241 21.1084 8.18853 19.8534 7.05907L18.85 8.17402ZM10.0298 2.75C11.6116 2.75 12.2085 2.76158 12.7405 2.96573L13.2779 1.5653C12.4261 1.23842 11.498 1.25 10.0298 1.25V2.75ZM15.8947 3.49618C14.8087 2.51878 14.1297 1.89214 13.2779 1.5653L12.7405 2.96573C13.2727 3.16993 13.7215 3.55836 14.8912 4.61112L15.8947 3.49618ZM10 21.25C8.09318 21.25 6.73851 21.2484 5.71085 21.1102C4.70476 20.975 4.12511 20.7213 3.7019 20.2981L2.64124 21.3588C3.38961 22.1071 4.33855 22.4392 5.51098 22.5969C6.66182 22.7516 8.13558 22.75 10 22.75V21.25ZM1.25 14C1.25 15.8644 1.24841 17.3382 1.40313 18.489C1.56076 19.6614 1.89288 20.6104 2.64124 21.3588L3.7019 20.2981C3.27869 19.8749 3.02502 19.2952 2.88976 18.2892C2.75159 17.2615 2.75 15.9068 2.75 14H1.25ZM14 22.75C15.8644 22.75 17.3382 22.7516 18.489 22.5969C19.6614 22.4392 20.6104 22.1071 21.3588 21.3588L20.2981 20.2981C19.8749 20.7213 19.2952 20.975 18.2892 21.1102C17.2615 21.2484 15.9068 21.25 14 21.25V22.75ZM21.25 14C21.25 15.9068 21.2484 17.2615 21.1102 18.2892C20.975 19.2952 20.7213 19.8749 20.2981 20.2981L21.3588 21.3588C22.1071 20.6104 22.4392 19.6614 22.5969 18.489C22.7516 17.3382 22.75 15.8644 22.75 14H21.25ZM2.75 10C2.75 8.09318 2.75159 6.73851 2.88976 5.71085C3.02502 4.70476 3.27869 4.12511 3.7019 3.7019L2.64124 2.64124C1.89288 3.38961 1.56076 4.33855 1.40313 5.51098C1.24841 6.66182 1.25 8.13558 1.25 10H2.75ZM10.0298 1.25C8.15538 1.25 6.67442 1.24842 5.51887 1.40307C4.34232 1.56054 3.39019 1.8923 2.64124 2.64124L3.7019 3.7019C4.12453 3.27928 4.70596 3.02525 5.71785 2.88982C6.75075 2.75158 8.11311 2.75 10.0298 2.75V1.25Z", fill: "currentColor" }),
    React.createElement("path", { opacity: "0.5", d: "M13 2.5V5C13 7.35702 13 8.53553 13.7322 9.26777C14.4645 10 15.643 10 18 10H22", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("path", { opacity: "0.5", d: "M8.5 18.5L8.5 13.5M8.5 13.5L6.5 15.375M8.5 13.5L10.5 15.375", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const Max = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-max", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M17 7H14M17 7V10M17 7L13.5 10.5M7 17H10M7 17V14M7 17L10.5 13.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M7 7H10M7 7V10M7 7L10.5 10.5M17 17H14M17 17V14M17 17L13.5 13.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2C16.714 2 19.0711 2 20.5355 3.46447C22 4.92893 22 7.28595 22 12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12Z", stroke: "currentColor", strokeWidth: "1.5" })
  );
};
const Min = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-min", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M10.5 13.5H7.5M10.5 13.5V16.5M10.5 13.5L7 17", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M13.5 10.5H16.5M13.5 10.5V7.5M13.5 10.5L17 7", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M10.5 10.5H7.5M10.5 10.5V7.5M10.5 10.5L7 7", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M13.5 13.5H16.5M13.5 13.5V16.5M13.5 13.5L17 17", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2C16.714 2 19.0711 2 20.5355 3.46447C22 4.92893 22 7.28595 22 12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12Z", stroke: "currentColor", strokeWidth: "1.5" })
  );
};
const Window = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-window", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M7 6C7 6.55228 6.55228 7 6 7C5.44772 7 5 6.55228 5 6C5 5.44772 5.44772 5 6 5C6.55228 5 7 5.44772 7 6Z", fill: "currentColor" }),
    React.createElement("path", { d: "M10 6C10 6.55228 9.55228 7 9 7C8.44772 7 8 6.55228 8 6C8 5.44772 8.44772 5 9 5C9.55228 5 10 5.44772 10 6Z", fill: "currentColor" }),
    React.createElement("path", { d: "M13 6C13 6.55228 12.5523 7 12 7C11.4477 7 11 6.55228 11 6C11 5.44772 11.4477 5 12 5C12.5523 5 13 5.44772 13 6Z", fill: "currentColor" }),
    React.createElement("path", { d: "M2 9.5H22", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M9 21L9 10", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { d: "M2 12C2 7.28596 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2C16.714 2 19.0711 2 20.5355 3.46447C22 4.92893 22 7.28596 22 12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2.49073 19.5618 2.16444 18.1934 2.0551 16", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" })
  );
};
const Zen = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-zen", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M14.5 4.5C14.5 5.88071 13.3807 7 12 7C10.6193 7 9.5 5.88071 9.5 4.5C9.5 3.11929 10.6193 2 12 2C13.3807 2 14.5 3.11929 14.5 4.5Z", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("path", { d: "M3 17L5.58887 15.6918C5.84084 15.5645 6 15.3043 6 15.0196C6 12.0802 8.1377 9.56573 11.0067 9.0825C11.6598 8.9725 12.3402 8.9725 12.9933 9.0825C15.8623 9.56573 18 12.0802 18 15.0196C18 15.3043 18.1592 15.5645 18.4111 15.6918L21 17", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { d: "M9.5 16L8.45827 17.389C8.42647 17.4314 8.41057 17.4526 8.39456 17.4728C8.13149 17.8053 7.76956 18.0456 7.36102 18.1591C7.33616 18.166 7.31042 18.1724 7.25902 18.1852L5.77423 18.5564C4.7315 18.8171 4 19.754 4 20.8288C4 21.4757 4.52435 22 5.17116 22H6.72727C7.32654 22 7.62617 22 7.917 21.9658C8.59721 21.8859 9.25375 21.667 9.84589 21.3229C10.0991 21.1757 10.3388 20.9959 10.8182 20.6364L11 20.5M11 20.5L13 19M11 20.5L13.5397 21.4524C14.1491 21.6809 14.4539 21.7952 14.7688 21.8688C14.9318 21.9069 15.0966 21.9368 15.2625 21.9583C15.5832 22 15.9087 22 16.5596 22H18.8288C19.4757 22 20 21.4757 20 20.8288C20 19.754 19.2685 18.8171 18.2258 18.5564L16.741 18.1852C16.6896 18.1724 16.6638 18.166 16.639 18.1591C16.2304 18.0456 15.8685 17.8053 15.6054 17.4728C15.5895 17.4526 15.5735 17.4313 15.5417 17.389L14.5 16", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const FoldAllNodes = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-fold-all-nodes", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2C16.714 2 19.0711 2 20.5355 3.46447C22 4.92893 22 7.28595 22 12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12Z", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("path", { opacity: "0.5", d: "M2 13H5.16026C6.06543 13 6.51802 13 6.91584 13.183C7.31367 13.3659 7.60821 13.7096 8.19729 14.3968L8.80271 15.1032C9.39179 15.7904 9.68633 16.1341 10.0842 16.317C10.482 16.5 10.9346 16.5 11.8397 16.5H12.1603C13.0654 16.5 13.518 16.5 13.9158 16.317C14.3137 16.1341 14.6082 15.7904 15.1973 15.1032L15.8027 14.3968C16.3918 13.7096 16.6863 13.3659 17.0842 13.183C17.482 13 17.9346 13 18.8397 13H22", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { opacity: "0.5", d: "M8 7H16", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
    React.createElement("path", { opacity: "0.5", d: "M10 10.5H14", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" })
  );
};
const UnfoldAllNodes = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-unfold-all-nodes", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2C16.714 2 19.0711 2 20.5355 3.46447C22 4.92893 22 7.28595 22 12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12Z", stroke: "currentColor", strokeWidth: "1.5" }),
    React.createElement("path", { opacity: "0.5", d: "M4 14.25C3.58579 14.25 3.25 14.5858 3.25 15C3.25 15.4142 3.58579 15.75 4 15.75V14.25ZM20 15.75C20.4142 15.75 20.75 15.4142 20.75 15C20.75 14.5858 20.4142 14.25 20 14.25V15.75ZM14.5987 16.4013L14.0684 15.8709H14.0684L14.5987 16.4013ZM14.8284 16.1716L14.2981 15.6412V15.6412L14.8284 16.1716ZM9.15 16.25L8.59805 16.7578H8.59805L9.15 16.25ZM9.18546 16.2885L9.73741 15.7807H9.73741L9.18546 16.2885ZM10.2809 17.2877L9.94463 17.9581H9.94463L10.2809 17.2877ZM10.4692 17.3703L10.7348 16.6689H10.7348L10.4692 17.3703ZM13.5262 17.3082L13.2057 16.6301H13.2057L13.5262 17.3082ZM13.3458 17.3829L13.5987 18.089L13.5987 18.089L13.3458 17.3829ZM16.0631 15.1522L15.776 14.4593H15.776L16.0631 15.1522ZM7.87676 15.1477L8.15966 14.4531L8.15966 14.4531L7.87676 15.1477ZM7.97471 15.1907L7.65508 15.8692L7.65508 15.8692L7.97471 15.1907ZM4.25 15C4.25 15.4142 4.58579 15.75 5 15.75C5.41421 15.75 5.75 15.4142 5.75 15H4.25ZM18.25 15C18.25 15.4142 18.5858 15.75 19 15.75C19.4142 15.75 19.75 15.4142 19.75 15H18.25ZM4 15.75H6.30147V14.25H4V15.75ZM17.6569 15.75H20V14.25H17.6569V15.75ZM15.1291 16.9316L15.3588 16.7019L14.2981 15.6412L14.0684 15.8709L15.1291 16.9316ZM8.59805 16.7578L8.63351 16.7963L9.73741 15.7807L9.70195 15.7422L8.59805 16.7578ZM8.63351 16.7963C9.10743 17.3115 9.46605 17.718 9.94463 17.9581L10.6172 16.6173C10.4413 16.5291 10.2877 16.3789 9.73741 15.7807L8.63351 16.7963ZM11.9462 16.75C11.1333 16.75 10.9189 16.7387 10.7348 16.6689L10.2035 18.0717C10.7042 18.2613 11.2462 18.25 11.9462 18.25V16.75ZM9.94463 17.9581C10.0289 18.0004 10.1153 18.0383 10.2035 18.0717L10.7348 16.6689C10.6948 16.6538 10.6555 16.6365 10.6172 16.6173L9.94463 17.9581ZM14.0684 15.8709C13.5252 16.4141 13.3746 16.5503 13.2057 16.6301L13.8467 17.9863C14.3058 17.7693 14.6609 17.3998 15.1291 16.9316L14.0684 15.8709ZM11.9462 18.25C12.6083 18.25 13.1206 18.2602 13.5987 18.089L13.093 16.6768C12.9171 16.7398 12.7143 16.75 11.9462 16.75V18.25ZM13.2057 16.6301C13.1689 16.6475 13.1313 16.6631 13.093 16.6768L13.5987 18.089C13.683 18.0588 13.7658 18.0245 13.8467 17.9863L13.2057 16.6301ZM17.6569 14.25C16.9005 14.25 16.3135 14.2367 15.776 14.4593L16.3501 15.8451C16.5477 15.7633 16.7782 15.75 17.6569 15.75V14.25ZM15.3588 16.7019C15.9801 16.0806 16.1524 15.927 16.3501 15.8451L15.776 14.4593C15.2386 14.6819 14.8329 15.1065 14.2981 15.6412L15.3588 16.7019ZM6.30147 15.75C7.17044 15.75 7.39887 15.7629 7.59386 15.8423L8.15966 14.4531C7.62918 14.2371 7.04924 14.25 6.30147 14.25V15.75ZM9.70195 15.7422C9.19566 15.1919 8.81252 14.7564 8.29435 14.5122L7.65508 15.8692C7.84554 15.9589 8.00971 16.1183 8.59805 16.7578L9.70195 15.7422ZM7.59386 15.8423C7.6145 15.8507 7.63491 15.8597 7.65508 15.8692L8.29435 14.5122C8.24999 14.4913 8.20508 14.4716 8.15966 14.4531L7.59386 15.8423ZM6.5 12.75H17.5V11.25H6.5V12.75ZM17.5 12.75C17.9142 12.75 18.25 13.0858 18.25 13.5H19.75C19.75 12.2574 18.7426 11.25 17.5 11.25V12.75ZM5.75 13.5C5.75 13.0858 6.08579 12.75 6.5 12.75V11.25C5.25736 11.25 4.25 12.2574 4.25 13.5H5.75ZM6.5 9.75H17.5V8.25H6.5V9.75ZM17.5 9.75C17.9142 9.75 18.25 10.0858 18.25 10.5H19.75C19.75 9.25736 18.7426 8.25 17.5 8.25V9.75ZM5.75 10.5C5.75 10.0858 6.08579 9.75 6.5 9.75V8.25C5.25736 8.25 4.25 9.25736 4.25 10.5H5.75ZM5.75 10.5V7.5H4.25V10.5H5.75ZM6.5 6.75H17.5V5.25H6.5V6.75ZM18.25 7.5V10.5H19.75V7.5H18.25ZM17.5 6.75C17.9142 6.75 18.25 7.08579 18.25 7.5H19.75C19.75 6.25736 18.7426 5.25 17.5 5.25V6.75ZM5.75 7.5C5.75 7.08579 6.08579 6.75 6.5 6.75V5.25C5.25736 5.25 4.25 6.25736 4.25 7.5H5.75ZM5.75 15V13.5H4.25V15H5.75ZM18.25 13.5V15H19.75V13.5H18.25ZM5.75 13.5V10.5H4.25V13.5H5.75ZM18.25 10.5V13.5H19.75V10.5H18.25Z", fill: "currentColor" })
  );
};
const ExpandToc = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-expand-toc", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M19 11L12 17L5 11", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.5", d: "M19 7L12 13L5 7", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const CollapseToc = (props) => {
  return React.createElement(
    "svg",
    { ...props, "data-icon": "o23-collapse-toc", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    React.createElement("path", { d: "M19 13L12 7L5 13", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    React.createElement("path", { opacity: "0.5", d: "M19 17L12 11L5 17", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  );
};
const Labels = {
  ERROR: React.createElement(IntlLabel, { keys: ["o23", "error", "unknown"], value: "Something went wrong." }),
  NoContent: React.createElement(IntlLabel, { keys: ["o23", "error", "no-content"], value: "No content given." }),
  NoDefParsed: React.createElement(IntlLabel, { keys: ["o23", "error", "no-def"], value: "No definition parsed." }),
  ParseError: React.createElement(IntlLabel, { keys: ["o23", "error", "parse"], value: "Parse error occurred." }),
  PrependStep: React.createElement(IntlLabel, { keys: ["o23", "node", "prepend-step"], value: "Prepend Step" }),
  AppendStep: React.createElement(IntlLabel, { keys: ["o23", "node", "append-step"], value: "Append Step" }),
  RemoveStep: React.createElement(IntlLabel, { keys: ["o23", "node", "remove-step"], value: "Remove Step" }),
  PrependRoute: React.createElement(IntlLabel, { keys: ["o23", "node", "prepend-route"], value: "Prepend Route" }),
  AppendRoute: React.createElement(IntlLabel, { keys: ["o23", "node", "append-route"], value: "Append Route" }),
  RemoveRoute: React.createElement(IntlLabel, { keys: ["o23", "node", "remove-route"], value: "Remove Route" }),
  AddOtherwise: React.createElement(IntlLabel, { keys: ["o23", "node", "add-otherwise"], value: "Add Otherwise" }),
  RemoveOtherwise: React.createElement(IntlLabel, { keys: ["o23", "node", "remove-otherwise"], value: "Remove Otherwise" }),
  EndNodeTitle: React.createElement(IntlLabel, { keys: ["o23", "node", "end"], value: "End" }),
  StepNodeNoname: React.createElement(IntlLabel, { keys: ["o23", "node", "step", "noname"], value: "[Noname]" }),
  HelpDesk: React.createElement(IntlLabel, { keys: ["o23", "dialog", "docs", "title"], value: "Help Desk" }),
  Navigator: React.createElement(IntlLabel, { keys: ["o23", "dialog", "navigator", "title"], value: "Configurable Elements" }),
  Specific: React.createElement(IntlLabel, { keys: ["o23", "dialog", "specific", "title"], value: "Specific Details" }),
  ConfirmContent: React.createElement(IntlLabel, { keys: ["o23", "dialog", "confirm"], value: "Confirm" }),
  DiscardContent: React.createElement(IntlLabel, { keys: ["o23", "dialog", "discard"], value: "Discard" }),
  PipelineTypeApi: React.createElement(IntlLabel, { keys: ["o23", "pipeline", "api"], value: "Pipeline as API" }),
  PipelineTypePipeline: React.createElement(IntlLabel, { keys: ["o23", "pipeline", "standard"], value: "Pipeline" }),
  PipelineTypeStepSet: React.createElement(IntlLabel, { keys: ["o23", "pipeline", "step-sets"], value: "Step Set" }),
  PipelineTypeStep: React.createElement(IntlLabel, { keys: ["o23", "pipeline", "step"], value: "Step" }),
  ApiAuthorizationsLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "api-authorizations"], value: "Authorizations" }),
  ApiRouteLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "api-route"], value: "Route" }),
  ApiRequestLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "api-request"], value: "Request" }),
  ApiMethodLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "api-method"], value: "Method" }),
  ApiHeadersLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "api-headers"], value: "Headers" }),
  ApiPathParametersLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "api-path-parameters"], value: "Path Parameters" }),
  ApiQueryParametersLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "api-query-parameters"], value: "Query Parameters" }),
  ApiBodyLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "api-body"], value: "Body" }),
  ApiFilesLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "api-files"], value: "Files" }),
  ApiResponseLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "api-response"], value: "Response" }),
  ApiExposeHeadersLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "api-expose-headers"], value: "Expose Headers" }),
  ApiExposeFileLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "api-expose-file"], value: "Expose File" }),
  ExecuteOnInitLabel: React.createElement(IntlLabel, { keys: ["o23", "parameter", "execute-on-init"], value: "Execute on Initializing" }),
  NoAuth: React.createElement(IntlLabel, { keys: ["o23", "parameter", "no-auth"], value: "No Auth" }),
  AuthAnonymous: React.createElement(IntlLabel, { keys: ["o23", "parameter", "auth-anonymous"], value: "Anonymous" }),
  AuthAuthenticated: React.createElement(IntlLabel, { keys: ["o23", "parameter", "auth-authenticated"], value: "Authenticated" }),
  AuthRoles: React.createElement(IntlLabel, { keys: ["o23", "parameter", "auth-roles"], value: "Roles" }),
  ParameterNames: React.createElement(IntlLabel, { keys: ["o23", "parameter", "names"], value: "Names" }),
  BodyFollowHttpMethod: React.createElement(IntlLabel, { keys: ["o23", "pipeline", "body", "follow-http-method"], value: "Follow method default" }),
  ParseBody: React.createElement(IntlLabel, { keys: ["o23", "pipeline", "body", "parse"], value: "Parse" }),
  AllFiles: React.createElement(IntlLabel, { keys: ["o23", "pipeline", "files", "all"], value: "Any File" }),
  NoFile: React.createElement(IntlLabel, { keys: ["o23", "pipeline", "files", "ignored"], value: "No File" }),
  FileMaxSize: React.createElement(IntlLabel, { keys: ["o23", "pipeline", "files", "max-size"], value: "Max size" }),
  FileMimeType: React.createElement(IntlLabel, { keys: ["o23", "pipeline", "files", "mime-type"], value: "Mime types" }),
  StepFromInput: React.createElement(IntlLabel, { keys: ["o23", "step", "from-input"], value: "Pick From Input" }),
  StepToOutput: React.createElement(IntlLabel, { keys: ["o23", "step", "to-output"], value: "Write To Output" }),
  StepMerge: React.createElement(IntlLabel, { keys: ["o23", "step", "merge"], value: "Merge-back strategy" }),
  StepMergeReplace: React.createElement(IntlLabel, { keys: ["o23", "step", "merge-replace"], value: "Replace Merge" }),
  StepMergeUnbox: React.createElement(IntlLabel, { keys: ["o23", "step", "merge-replace"], value: "Unbox Merge" }),
  StepMergeAsProperty: React.createElement(IntlLabel, { keys: ["o23", "step", "merge-as-property"], value: "Merge As" }),
  StepMainContent: React.createElement(IntlLabel, { keys: ["o23", "step", "main-content"], value: "Main Task" }),
  StepRouteTest: React.createElement(IntlLabel, { keys: ["o23", "step", "route-test"], value: "Route Test" }),
  StepRouteCheck: React.createElement(IntlLabel, { keys: ["o23", "step", "route-check"], value: "Check" }),
  StepSteps: React.createElement(IntlLabel, { keys: ["o23", "step", "sets", "steps"], value: "Sub Steps" }),
  StepHandleCatchableError: React.createElement(IntlLabel, { keys: ["o23", "step", "error-handles", "catchable"], value: "Catchable Errors" }),
  StepHandleUncatchableError: React.createElement(IntlLabel, { keys: ["o23", "step", "error-handles", "uncatchable"], value: "Uncatchable Errors" }),
  StepHandleExposedError: React.createElement(IntlLabel, { keys: ["o23", "step", "error-handles", "uncatchable"], value: "Exposed Errors" }),
  StepHandleAnyError: React.createElement(IntlLabel, { keys: ["o23", "step", "error-handles", "uncatchable"], value: "Any Errors" }),
  StepFirstSubStep: React.createElement(IntlLabel, { keys: ["o23", "step", "first-sub-step"], value: "In" }),
  JoinEndNodeTitle: React.createElement(IntlLabel, { keys: ["o23", "node", "join-end"], value: "End of " }),
  StepUseSnippet: "Snippet",
  StepUseGetProperty: "Get Property",
  StepUseDelProperty: "Del Property",
  StepUseDelProperties: "Del Properties (Alias for Del Property)",
  StepUseDelPropertiesBadge: "Del Properties",
  StepUseSnowflake: "Snowflake",
  StepUseHttpFetch: "Http Fetch",
  StepUseHttpGet: "Http Get (Using Get method for HTTP Fetch)",
  StepUseHttpGetBadge: "Http Get",
  StepUseHttpPost: "Http Post (Using Post method for HTTP Fetch)",
  StepUseHttpPostBadge: "Http Post",
  StepUseSets: "Sets",
  StepUseAsyncSets: "Async Sets",
  StepUseEach: "Each",
  StepUseParallel: "Parallel",
  StepUseConditional: "Conditional",
  StepUseRoutes: "Routes",
  StepUseTypeormSnippet: "TypeOrm Snippet",
  StepUseTypeormBulkSave: "TypeOrm Bulk Save",
  StepUseTypeormSave: "TypeOrm Save",
  StepUseTypeormLoadMany: "TypeOrm Load Many",
  StepUseTypeormLoadOne: "TypeOrm Load One",
  StepUseTypeormTransactional: "TypeOrm Transactional",
  StepUseRefPipeline: "Call Pipeline",
  StepUseRefStep: "Call Pipeline Step",
  StepVariableIgnoreSnippet: React.createElement(IntlLabel, { keys: ["o23", "step", "common-variable", "ignore-snippet"], value: "Ignore" }),
  StepVariableUseSnippet: React.createElement(IntlLabel, { keys: ["o23", "step", "common-variable", "use-snippet"], value: "Use Snippet" }),
  StepErrorHandleTypeNone: React.createElement(IntlLabel, { keys: ["o23", "step", "error-handle", "none"], value: "Ignored" }),
  StepErrorHandleTypeSnippet: React.createElement(IntlLabel, { keys: ["o23", "step", "error-handle", "none"], value: "Use Snippet" }),
  StepErrorHandleTypeSteps: React.createElement(IntlLabel, { keys: ["o23", "step", "error-handle", "none"], value: "Use Sub-steps" }),
  StepIOTransformer: React.createElement(IntlLabel, { keys: ["o23", "step", "io-transformer", "use"], value: "Transformer" }),
  StepIOTransformerAsIs: React.createElement(IntlLabel, { keys: ["o23", "step", "io-transformer", "as-is"], value: "As Is" }),
  StepIOTransformerSnippet: React.createElement(IntlLabel, { keys: ["o23", "step", "io-transformer", "snippet"], value: "Use Snippet" }),
  StepIOMergeBackReplace: React.createElement(IntlLabel, { keys: ["o23", "step", "io-merge-back", "replace"], value: "Replace" }),
  StepIOMergeBackUnbox: React.createElement(IntlLabel, { keys: ["o23", "step", "io-merge-back", "unbox"], value: "Unbox and Merge" }),
  StepIOMergeBackAsProperty: React.createElement(IntlLabel, { keys: ["o23", "step", "io-merge-back", "as-property"], value: "As Specific Property" }),
  StepIOMergeBackAsPropertyName: React.createElement(IntlLabel, { keys: ["o23", "step", "io-merge-back", "as-property-name"], value: "Property Name" }),
  StepSnippetSnippet: React.createElement(IntlLabel, { keys: ["o23", "step", "snippet", "snippet"], value: "Snippet" }),
  StepGetPropertyProperty: React.createElement(IntlLabel, { keys: ["o23", "step", "get-property", "property"], value: "Property" }),
  StepDelPropertyProperty: React.createElement(IntlLabel, { keys: ["o23", "step", "del-property", "property"], value: "Property" }),
  StepHttpRemoteApi: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "system"], value: "HTTP API" }),
  StepHttpRemoteRequest: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "system"], value: "HTTP Request" }),
  StepHttpRemoteResponse: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "system"], value: "HTTP Response" }),
  StepHttpSystem: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "system"], value: "System" }),
  StepHttpEndpoint: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "endpoint"], value: "Endpoint" }),
  StepHttpDecorateUrl: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "decorate-url"], value: "Decorate URL" }),
  StepHttpMethod: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "method"], value: "HTTP Method" }),
  StepHttpTimeout: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "timeout"], value: "Timeout (in Seconds)" }),
  StepHttpGenerateHeaders: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "generate-headers"], value: "Generate Headers" }),
  StepHttpBodyUsed: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "body-used"], value: "Use Body" }),
  StepHttpGenerateBody: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "generate-body"], value: "Generate Body" }),
  StepHttpReadResponse: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "read-response"], value: "Read Response" }),
  StepHttpResponseErrorHandles: React.createElement(IntlLabel, { keys: ["o23", "step", "http", "response-error-handles"], value: "Response Error Handling" }),
  StepTypeOrmDatasource: React.createElement(IntlLabel, { keys: ["o23", "step", "typeorm", "datasource"], value: "Datasource" }),
  StepTypeOrmTransaction: React.createElement(IntlLabel, { keys: ["o23", "step", "typeorm", "transaction"], value: "Transaction" }),
  StepTypeOrmSnippet: React.createElement(IntlLabel, { keys: ["o23", "step", "typeorm", "snippet"], value: "Snippet" }),
  StepTypeOrmSql: React.createElement(IntlLabel, { keys: ["o23", "step", "typeorm", "sql"], value: "SQL" }),
  StepTypeOrmSqlPredefined: React.createElement(IntlLabel, { keys: ["o23", "step", "typeorm", "sql-predefined"], value: "Predefine" }),
  StepTypeOrmSqlByParams: React.createElement(IntlLabel, { keys: ["o23", "step", "typeorm", "sql-by-params"], value: "By Params" }),
  StepRefPipelineCode: React.createElement(IntlLabel, { keys: ["o23", "step", "ref-pipeline", "code"], value: "Call Pipeline" }),
  StepRefStepCode: React.createElement(IntlLabel, { keys: ["o23", "step", "ref-step", "code"], value: "Call Pipeline Step" }),
  StepEachOriginalContentName: React.createElement(IntlLabel, { keys: ["o23", "step", "each", "original-content-name"], value: "Origin Content Variable" }),
  StepEachItemName: React.createElement(IntlLabel, { keys: ["o23", "step", "each", "item-name"], value: "Item Variable" }),
  StepParallelCloneData: React.createElement(IntlLabel, { keys: ["o23", "step", "parallel", "clone-data"], value: "Clone For Each Step" }),
  StepParallelRace: React.createElement(IntlLabel, { keys: ["o23", "step", "parallel", "race"], value: "Race" }),
  Type: React.createElement(IntlLabel, { keys: ["o23", "variable", "type"], value: "Type" }),
  Code: React.createElement(IntlLabel, { keys: ["o23", "variable", "code"], value: "Code" }),
  Name: React.createElement(IntlLabel, { keys: ["o23", "variable", "name"], value: "Name" }),
  Enabled: React.createElement(IntlLabel, { keys: ["o23", "variable", "enabled"], value: "Enabled" }),
  Use: React.createElement(IntlLabel, { keys: ["o23", "variable", "use"], value: "Use" }),
  ErrorHandles: React.createElement(IntlLabel, { keys: ["o23", "variable", "error-handles"], value: "Error Handling" }),
  CatchableErrorHandle: React.createElement(IntlLabel, { keys: ["o23", "variable", "catchable-error-handle"], value: "Catchable" }),
  UncatchableErrorHandle: React.createElement(IntlLabel, { keys: ["o23", "variable", "uncatchable-error-handle"], value: "Uncatchable" }),
  ExposedErrorHandle: React.createElement(IntlLabel, { keys: ["o23", "variable", "exposed-error-handle"], value: "Exposed" }),
  AnyErrorHandle: React.createElement(IntlLabel, { keys: ["o23", "variable", "any-error-handle"], value: "Any" }),
  All: React.createElement(IntlLabel, { keys: ["o23", "badge", "all"], value: "All" }),
  Ignored: React.createElement(IntlLabel, { keys: ["o23", "badge", "ignored"], value: "Ignored" }),
  Specified: React.createElement(IntlLabel, { keys: ["o23", "badge", "specified"], value: "Specified" }),
  NotAvailable: React.createElement(IntlLabel, { keys: ["o23", "badge", "not-available"], value: "N/A" }),
  UseDefault: React.createElement(IntlLabel, { keys: ["o23", "badge", "use-default"], value: "Default" }),
  NoDecoration: React.createElement(IntlLabel, { keys: ["o23", "badge", "no-decoration"], value: "No Decoration" }),
  NoTimeout: React.createElement(IntlLabel, { keys: ["o23", "badge", "no-timeout"], value: "No Timeout" }),
  NoCustomHttpHeader: React.createElement(IntlLabel, { keys: ["o23", "badge", "no-http-headers"], value: "No Custom Header" }),
  UseInputAsHttpBody: React.createElement(IntlLabel, { keys: ["o23", "badge", "use-input-as-http-body"], value: "Use Input" }),
  UseJsonFormatForHttpBody: React.createElement(IntlLabel, { keys: ["o23", "badge", "use-json-format-for-http-body"], value: "Use JSON Parse" }),
  DatasourceByEnv: React.createElement(IntlLabel, { keys: ["o23", "badge", "datasource-by-env"], value: "By Environment" }),
  TransactionAutonomous: React.createElement(IntlLabel, { keys: ["o23", "badge", "transaction-autonomous"], value: "Autonomous" }),
  SqlByParams: React.createElement(IntlLabel, { keys: ["o23", "badge", "sql-by-params"], value: "By Params" }),
  Yes: React.createElement(IntlLabel, { keys: ["o23", "badge", "yes"], value: "Yes" }),
  YesChar: React.createElement(IntlLabel, { keys: ["o23", "badge", "yes-char"], value: "Y" }),
  No: React.createElement(IntlLabel, { keys: ["o23", "badge", "no"], value: "No" }),
  NoChar: React.createElement(IntlLabel, { keys: ["o23", "badge", "no-char"], value: "N" }),
  Snippet: React.createElement(IntlLabel, { keys: ["o23", "badge", "snippet"], value: React.createElement(Snippet, null) }),
  Steps: React.createElement(IntlLabel, { keys: ["o23", "badge", "steps"], value: React.createElement(Steps, null) }),
  AsIs: React.createElement(IntlLabel, { keys: ["o23", "badge", "as-is"], value: "N/A" }),
  BadgeChecked: React.createElement(IntlLabel, { keys: ["o23", "badge", "checked"], value: React.createElement(ElementChecked, null) }),
  BadgeMissed: React.createElement(IntlLabel, { keys: ["o23", "badge", "missed"], value: React.createElement(ElementMissed, null) }),
  BadgeBanned: React.createElement(IntlLabel, { keys: ["o23", "badge", "banned"], value: React.createElement(ElementBanned, null) }),
  NoCodeDefinedInFileDef: React.createElement(IntlLabel, { keys: ["o23", "pipeline", "code", "undefined"], value: "No code defined" }),
  IllegalDropdownOptionSuffix: React.createElement(IntlLabel, { keys: ["o23", "illegal", "dropdown", "option", "suffix"], value: "(Illegal)" })
};
const asUseLabelKey = (use) => {
  return "StepUse" + (use ?? "").trim().split("-").reduce((a, b) => a + b.charAt(0).toUpperCase() + b.slice(1), "");
};
const askUseBadge = (use) => {
  return Labels[asUseLabelKey(use) + "Badge"] || Labels[asUseLabelKey(use)];
};
const askUseLabel = (use) => {
  return Labels[asUseLabelKey(use)];
};
var StandardPipelineStepRegisterKey;
(function(StandardPipelineStepRegisterKey2) {
  StandardPipelineStepRegisterKey2["SNIPPET"] = "snippet";
  StandardPipelineStepRegisterKey2["SNOWFLAKE"] = "snowflake";
  StandardPipelineStepRegisterKey2["GET_PROPERTY"] = "get-property";
  StandardPipelineStepRegisterKey2["DEL_PROPERTY"] = "del-property";
  StandardPipelineStepRegisterKey2["DELETE_PROPERTIES"] = "del-properties";
  StandardPipelineStepRegisterKey2["SETS"] = "sets";
  StandardPipelineStepRegisterKey2["ASYNC_SETS"] = "async-sets";
  StandardPipelineStepRegisterKey2["EACH_SETS"] = "each";
  StandardPipelineStepRegisterKey2["PARALLEL_SETS"] = "parallel";
  StandardPipelineStepRegisterKey2["CONDITIONAL_SETS"] = "conditional";
  StandardPipelineStepRegisterKey2["ROUTES_SETS"] = "routes";
  StandardPipelineStepRegisterKey2["TYPEORM_BY_SNIPPET"] = "typeorm-snippet";
  StandardPipelineStepRegisterKey2["TYPEORM_LOAD_ONE_BY_SQL"] = "typeorm-load-one";
  StandardPipelineStepRegisterKey2["TYPEORM_LOAD_MANY_BY_SQL"] = "typeorm-load-many";
  StandardPipelineStepRegisterKey2["TYPEORM_SAVE_BY_SQL"] = "typeorm-save";
  StandardPipelineStepRegisterKey2["TYPEORM_BULK_SAVE_BY_SQL"] = "typeorm-bulk-save";
  StandardPipelineStepRegisterKey2["TYPEORM_TRANSACTIONAL"] = "typeorm-transactional";
  StandardPipelineStepRegisterKey2["HTTP_FETCH"] = "http-fetch";
  StandardPipelineStepRegisterKey2["HTTP_POST"] = "http-post";
  StandardPipelineStepRegisterKey2["HTTP_GET"] = "http-get";
  StandardPipelineStepRegisterKey2["REF_PIPELINE"] = "ref-pipeline";
  StandardPipelineStepRegisterKey2["REF_STEP"] = "ref-step";
})(StandardPipelineStepRegisterKey || (StandardPipelineStepRegisterKey = {}));
const DiagramKeysOfStep = ["$x", "$y", "$foldAny", "$foldCatchable", "$foldUncatchable", "$foldExposed", "$foldAny"];
const KeysOfApiPipeline = ["authorizations", "route", "method", "headers", "pathParams", "queryParams", "body", "files", "exposeHeaders", "exposeFile"];
const KeysOfNonApiPipeline = ["initOnly"];
const KeysOfPipeline = ["code", "type", "enabled", ...KeysOfApiPipeline, ...KeysOfNonApiPipeline, "steps", "$diagram"];
class FileDefDeserializer {
  constructor(options) {
    __publicField(this, "_redress");
    this._redress = options == null ? void 0 : options.redress;
  }
  dashToCamel(key) {
    return key.replace(/-(.)/g, (_, group1) => group1.toUpperCase());
  }
  redressKeyCase(given) {
    if (given == null) {
      return given;
    } else if (Array.isArray(given)) {
      return given.map((item) => this.redressKeyCase(item));
    } else if (typeof given === "object") {
      return Object.keys(given).reduce((redressed, key) => {
        if (key.indexOf("-") !== -1) {
          redressed[this.dashToCamel(key)] = this.redressKeyCase(given[key]);
        } else {
          redressed[key] = this.redressKeyCase(given[key]);
        }
        return redressed;
      }, {});
    } else {
      return given;
    }
  }
  redressDef(given) {
    if (this._redress) {
      given = this._redress(given);
    }
    return this.redressKeyCase(given);
  }
  parse(content) {
    const def = this.doParse(content);
    return this.redressDef(def);
  }
}
class YamlDefLoader extends FileDefDeserializer {
  doParse(content) {
    try {
      return jsYaml.load(content);
    } catch (e) {
      console.group("Failed to parse yaml content to O23 definition.");
      console.error(e);
      console.log(content);
      console.groupEnd();
      throw new Error("Failed to parse yaml content to O23 definition.");
    }
  }
}
class FileDefSerializer {
  constructor(options) {
    __publicField(this, "_redress");
    this._redress = options == null ? void 0 : options.redress;
  }
  redressValues(given) {
    if (given == null) {
      return given;
    } else if (VUtils.isPrimitive(given)) {
      return given;
    } else if (Array.isArray(given)) {
      return given.map((item) => this.redressValues(item));
    } else {
      return Object.keys(given).reduce((redressed, key) => {
        const value = given[key];
        if (value == null)
          ;
        else if (typeof value === "string") {
          if (VUtils.isBlank(value))
            ;
          else {
            redressed[key] = value.replace(/\t/g, "  ");
          }
        } else if (key.startsWith("$fold") && key.length > 5 && value !== true)
          ;
        else if (key === "$diagram" && Object.keys(value).length === 0)
          ;
        else if (VUtils.isPrimitive(value)) {
          redressed[key] = value;
        } else if (Array.isArray(value)) {
          redressed[key] = value.map((item) => this.redressValues(item));
        } else {
          redressed[key] = this.redressValues(value);
        }
        return redressed;
      }, {});
    }
  }
  camelToDash(key) {
    return key.replace(/([A-Z])/g, ($1) => "-" + $1.toLowerCase());
  }
  redressKeyCase(given) {
    if (given == null) {
      return given;
    } else if (Array.isArray(given)) {
      return given.map((item) => this.redressKeyCase(item));
    } else if (typeof given === "object") {
      return Object.keys(given).reduce((redressed, key) => {
        if (key.indexOf("-") === -1) {
          redressed[this.camelToDash(key)] = this.redressKeyCase(given[key]);
        } else {
          redressed[key] = this.redressKeyCase(given[key]);
        }
        return redressed;
      }, {});
    } else {
      return given;
    }
  }
  redressDef(given) {
    if (this._redress) {
      given = this._redress(given);
    }
    return this.redressKeyCase(this.redressValues(given));
  }
  stringify(def) {
    const redressed = this.redressDef(def);
    return this.doStringify(redressed);
  }
}
class YamlDefSaver extends FileDefSerializer {
  doStringify(def) {
    try {
      const leadIndexes = [
        "code",
        "type",
        "init-only",
        "enabled",
        "route",
        "authorizations",
        "method",
        "headers",
        "path-params",
        "query-params",
        "body",
        "files",
        "expose-headers",
        "expose-file",
        "name",
        "use",
        "from-input",
        "datasource",
        "transaction",
        "autonomous",
        "check",
        "routes",
        "steps",
        "otherwise"
      ];
      const tailIndexes = ["to-output", "merge", "error-handles"];
      return jsYaml.dump(def, {
        sortKeys: (a, b) => {
          if (a.startsWith("$") && !b.startsWith("$")) {
            return 1;
          } else if (!a.startsWith("$") && b.startsWith("$")) {
            return -1;
          } else {
            const alIndex = leadIndexes.indexOf(a);
            const blIndex = leadIndexes.indexOf(b);
            const atIndex = tailIndexes.indexOf(a);
            const btIndex = tailIndexes.indexOf(b);
            if (alIndex === -1 && blIndex === -1) {
              if (atIndex === -1 && btIndex === -1) {
                return a.localeCompare(b);
              } else if (atIndex === -1) {
                return -1;
              } else if (btIndex === -1) {
                return 1;
              } else {
                return atIndex - btIndex;
              }
            } else if (alIndex === -1) {
              return 1;
            } else if (blIndex === -1) {
              return -1;
            } else {
              return alIndex - blIndex;
            }
          }
        },
        lineWidth: 120
      });
    } catch (e) {
      console.group("Failed to dump O23 definition to yaml content.");
      console.error(e);
      console.log(def);
      console.groupEnd();
      throw new Error("Failed to dump O23 definition to yaml content.");
    }
  }
  extname() {
    return "yaml";
  }
}
const isPipelineDef = (def) => def.type === "pipeline";
const isStepSetsDef = (def) => def.type === "step-sets";
const isStepDef = (def) => def.type === "step";
const isFileDef = (def) => isPipelineDef(def) || isStepSetsDef(def) || isStepDef(def);
const confirm$2 = (model, def, options) => {
  const { handlers, assistant } = options;
  const edited = model;
  def.code = edited.code;
  def.type = edited.type;
  def.enabled = edited.enabled;
  const deleteApiAttrs = (given) => {
    const def2 = given;
    KeysOfApiPipeline.forEach((key) => delete def2[key]);
  };
  const deleteNonApiAttrs = (given) => {
    const def2 = given;
    KeysOfNonApiPipeline.forEach((key) => delete def2[key]);
  };
  const deleteNonPipelineAttrs = (given) => {
    const def2 = given;
    Object.keys(def2).forEach((key) => {
      if (!KeysOfPipeline.includes(key)) {
        delete def2[key];
      }
    });
    const diagramDef = given;
    if (diagramDef.$diagram != null) {
      DiagramKeysOfStep.forEach((key) => delete diagramDef.$diagram[key]);
    }
  };
  if (isPipelineDef(def)) {
    const editedDef = edited;
    if (editedDef.api === true) {
      def.authorizations = editedDef.authorizations;
      def.route = editedDef.route;
      def.method = editedDef.method;
      def.headers = editedDef.headers;
      def.pathParams = editedDef.pathParams;
      def.queryParams = editedDef.queryParams;
      def.body = editedDef.body;
      def.files = editedDef.files;
      def.exposeHeaders = editedDef.exposeHeaders;
      def.exposeFile = editedDef.exposeFile;
      deleteNonApiAttrs(def);
    } else {
      def.initOnly = editedDef.initOnly === true;
      deleteApiAttrs(def);
    }
    if (!VUtils.isBlank(def.use)) {
      const stepDef = def;
      if (stepDef.use === StandardPipelineStepRegisterKey.SETS && VUtils.isBlank(stepDef.fromInput) && VUtils.isBlank(stepDef.toOutput) && VUtils.isBlank(stepDef.merge) && stepDef.errorHandles == null) {
        delete stepDef.name;
      } else {
        const keysOfPipeline = ["code", "type", "enabled", ...KeysOfApiPipeline, ...KeysOfNonApiPipeline];
        const step = Object.keys(def).reduce((acc, key) => {
          if (!keysOfPipeline.includes(key)) {
            acc[key] = def[key];
          }
          return acc;
        }, {});
        def.steps = [step];
      }
    }
    deleteNonPipelineAttrs(def);
  } else {
    deleteApiAttrs(def);
    deleteNonApiAttrs(def);
    if (VUtils.isBlank(def.use)) {
      const steps = def.steps ?? [];
      if (steps.length === 0) {
        const defaultDef = assistant.createDefaultStep();
        if (def.type === "step") {
          Object.keys(defaultDef).forEach((key) => def[key] = defaultDef[key]);
        } else {
          const sets = def;
          sets.use = StandardPipelineStepRegisterKey.SETS;
          sets.steps = [defaultDef];
        }
      } else if (steps.length === 1 && steps[0].use === StandardPipelineStepRegisterKey.SETS && VUtils.isBlank(steps[0].fromInput) && VUtils.isBlank(steps[0].toOutput) && VUtils.isBlank(steps[0].merge) && steps[0].errorHandles == null) {
        const sets = def;
        sets.use = StandardPipelineStepRegisterKey.SETS;
        sets.steps = steps[0].steps;
      } else {
        const sets = def;
        sets.use = StandardPipelineStepRegisterKey.SETS;
        sets.steps = steps;
      }
    }
  }
  handlers.onChange();
  return true;
};
const discard$1 = (_model) => VUtils.noop();
var PlaygroundEventTypes;
(function(PlaygroundEventTypes2) {
  PlaygroundEventTypes2["CONTENT_CHANGED"] = "content-changed";
  PlaygroundEventTypes2["RESET_CONTENT"] = "reset-content";
  PlaygroundEventTypes2["INIT_HELP_DOC_WIDTH"] = "init-help-doc-width";
  PlaygroundEventTypes2["SHOW_EDIT_DIALOG"] = "show-edit-dialog";
  PlaygroundEventTypes2["HIDE_EDIT_DIALOG"] = "hide-edit-dialog";
  PlaygroundEventTypes2["REPAINT"] = "repaint";
  PlaygroundEventTypes2["ZOOM_TO"] = "zoom-to";
  PlaygroundEventTypes2["ZOOM_TO_FIT"] = "zoom-to-fit";
  PlaygroundEventTypes2["FOLD_ALL_NODES"] = "fold-all-nodes";
  PlaygroundEventTypes2["UNFOLD_ALL_NODES"] = "unfold-all-nodes";
  PlaygroundEventTypes2["LOCATE_FILE_NODE"] = "locate-file-node";
  PlaygroundEventTypes2["DO_LOCATE_FILE_NODE"] = "do-locate-file-node";
  PlaygroundEventTypes2["LOCATE_STEP_NODE"] = "locate-step-node";
  PlaygroundEventTypes2["REPAINT_AND_LOCATE_STEP_NODE"] = "repaint-and-locate-step-node";
  PlaygroundEventTypes2["DO_LOCATE_STEP_NODE"] = "do-locate-step-node";
})(PlaygroundEventTypes || (PlaygroundEventTypes = {}));
const Context$2 = reactExports.createContext({});
Context$2.displayName = "PlaygroundEventBus";
const PlaygroundEventBusProvider = (props) => {
  const { children } = props;
  const bus = useCreateEventBus("playground");
  return React.createElement(Context$2.Provider, { value: bus }, children);
};
const usePlaygroundEventBus = () => reactExports.useContext(Context$2);
const EditDialogContainer = qe.div.attrs(({ visible }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-edit-dialog",
    style: {
      opacity: visible ? 1 : void 0,
      pointerEvents: visible ? "auto" : void 0
    }
  };
})`
    display: block;
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    opacity: 0;
    background-color: ${PlaygroundCssVars.EDIT_DIALOG_BACKDROP_COLOR};
    pointer-events: none;
    transition: all ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};
    z-index: ${PlaygroundCssVars.EDIT_DIALOG_Z_INDEX};
`;
const EditDialogWrapper = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-wrapper" })`
    display: block;
    position: relative;
    margin-top: ${PlaygroundCssVars.EDIT_DIALOG_MARGIN_TOP};
    margin-left: ${PlaygroundCssVars.EDIT_DIALOG_MARGIN_LEFT};
    width: ${PlaygroundCssVars.EDIT_DIALOG_WIDTH};
    height: ${PlaygroundCssVars.EDIT_DIALOG_HEIGHT};
`;
const EditDialogLayoutControllerHandle = qe.div.attrs(({ opened }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-layout-controller",
    "data-opened": opened
  };
})`
    display: none;
    position: absolute;

    &[data-opened=true] + div[data-w=o23-playground-edit-dialog-content] {
        grid-template-columns: min(${PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_MAX_WIDTH}, calc((100% - ${PlaygroundCssVars.EDIT_DIALOG_NAVIGATOR_WIDTH}) / 2 - ${PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_COLLAPSED_WIDTH})) ${PlaygroundCssVars.EDIT_DIALOG_NAVIGATOR_WIDTH} 1fr;

        > div[data-w=o23-playground-edit-dialog-help-doc] > div[data-w=o23-playground-edit-dialog-part-content] > div[data-w=o23-playground-edit-dialog-part-header] > div[data-w=o23-playground-edit-dialog-part-title] {
            color: unset;
        }
    }

    &[data-opened=false] + div[data-w=o23-playground-edit-dialog-content] {
        grid-template-columns: ${PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_COLLAPSED_WIDTH} ${PlaygroundCssVars.EDIT_DIALOG_NAVIGATOR_WIDTH} 1fr;

        > div[data-w=o23-playground-edit-dialog-help-doc] > div[data-w=o23-playground-edit-dialog-part-content] > div[data-w=o23-playground-edit-dialog-part-header] > div[data-w=o23-playground-edit-dialog-part-title] {
            color: ${PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_TITLE_COLOR};
        }
    }
`;
const EditDialogContentContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-content" })`
    display: grid;
    position: relative;
    height: 100%;
    width: 100%;
    transition: grid-template-columns ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

    div.markdown-body {
        font-size: ${PlaygroundCssVars.MARKDOWN_FONT_SIZE};
        color: ${PlaygroundCssVars.MARKDOWN_COLOR};
        background-color: ${PlaygroundCssVars.MARKDOWN_BACKGROUND_COLOR};

        h1 {
            font-size: 1.5em;
        }

        h2 {
            font-size: 1.35em;
        }

        h3 {
            font-size: 1.2em;
        }

        h4 {
            font-size: 1.1em;
        }

        h5, h6 {
            font-size: 1em;
        }

        table {
            border-collapse: separate;
            border-radius: 4px;
            margin: ${PlaygroundCssVars.MARKDOWN_TABLE_MARGIN};

            > thead > tr {
                border-top: 0;
                background-color: ${PlaygroundCssVars.MARKDOWN_TABLE_HEADER_BACKGROUND_COLOR};

                &:first-child {
                    > th:first-child {
                        border-top-left-radius: ${PlaygroundCssVars.MARKDOWN_TABLE_BORDER_RADIUS};
                    }

                    > th:last-child {
                        border-top-right-radius: ${PlaygroundCssVars.MARKDOWN_TABLE_BORDER_RADIUS};
                    }
                }

                > td:not(:first-child) {
                    border-left: 0;
                }
            }


            > tbody > tr {
                border-top: 0;
                background-color: ${PlaygroundCssVars.MARKDOWN_TABLE_ROW_BACKGROUND_COLOR};

                &:nth-child(even) {
                    background-color: ${PlaygroundCssVars.MARKDOWN_TABLE_ROW_EVEN_BACKGROUND_COLOR};
                }

                &:last-child {
                    > td:first-child {
                        border-bottom-left-radius: ${PlaygroundCssVars.MARKDOWN_TABLE_BORDER_RADIUS};
                    }

                    > td:last-child {
                        border-bottom-right-radius: ${PlaygroundCssVars.MARKDOWN_TABLE_BORDER_RADIUS};
                    }
                }

                > td {
                    border-top: 0;

                    &:not(:first-child) {
                        border-left: 0;
                    }
                }
            }
        }

        p, blockquote, ul, ol, dl, pre, details {
            margin-bottom: 4px;
        }

        > *:last-child {
            margin-bottom: 0;
        }
    }
`;
const EditDialogContentInitializer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-content-initializer" })`
    display: none;
`;
const EditorDialogCloser = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-closer" })`
    display: flex;
    position: absolute;
    align-items: center;
    top: ${PlaygroundCssVars.EDIT_DIALOG_CLOSER_TOP};
    right: 0;
`;
const EditorDialogCloseButton = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-close-button" })`
    display: flex;
    position: relative;
    align-items: center;
    color: ${PlaygroundCssVars.EDIT_DIALOG_CLOSER_ICON_COLOR};
    font-size: ${PlaygroundCssVars.EDIT_DIALOG_CLOSER_FONT_SIZE};
    font-weight: ${PlaygroundCssVars.EDIT_DIALOG_CLOSER_FONT_WEIGHT};
    padding: ${PlaygroundCssVars.EDIT_DIALOG_CLOSER_PADDING};
    cursor: pointer;
    transition: transform ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

    &[data-role=confirm]:hover,
    &[data-role=discard]:hover {
        transform: scale(1.05);
        transform-origin: center;
    }

    > svg {
        height: ${PlaygroundCssVars.EDIT_DIALOG_CLOSER_ICON_SIZE};
        width: ${PlaygroundCssVars.EDIT_DIALOG_CLOSER_ICON_SIZE};
        margin-right: 4px;
    }
`;
const EditDialogHelpDocContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-help-doc" })`
    display: flex;
    position: relative;
    align-self: stretch;
    margin: ${PlaygroundCssVars.EDIT_DIALOG_PART_MARGIN};
    padding: ${PlaygroundCssVars.EDIT_DIALOG_PADDING};
    background-color: ${PlaygroundCssVars.EDIT_DIALOG_BACKGROUND_COLOR};
    border-top-left-radius: ${PlaygroundCssVars.EDIT_DIALOG_BORDER_RADIUS};
    border-bottom-left-radius: ${PlaygroundCssVars.EDIT_DIALOG_BORDER_RADIUS};
    box-shadow: ${PlaygroundCssVars.EDIT_DIALOG_SHADOW};
    overflow: hidden;

    > div[data-w=o23-playground-edit-dialog-part-content] {
        width: 100%;
    }
`;
const EditDialogNavigatorContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-navigator" })`
    display: flex;
    position: relative;
    grid-column: 2;
    grid-row: 1;
    align-self: stretch;
    padding: ${PlaygroundCssVars.EDIT_DIALOG_PADDING};
    background-color: ${PlaygroundCssVars.EDIT_DIALOG_BACKGROUND_COLOR};
    box-shadow: ${PlaygroundCssVars.EDIT_DIALOG_SHADOW};
    border-radius: ${PlaygroundCssVars.EDIT_DIALOG_BORDER_RADIUS};
    border: ${PlaygroundCssVars.EDIT_DIALOG_BORDER};
    overflow: hidden;
`;
const EditDialogSpecificDetailsContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-specific-details" })`
    display: flex;
    position: relative;
    grid-column: 3;
    align-self: stretch;
    margin: ${PlaygroundCssVars.EDIT_DIALOG_PART_MARGIN};
    padding: ${PlaygroundCssVars.EDIT_DIALOG_PADDING};
    background-color: ${PlaygroundCssVars.EDIT_DIALOG_BACKGROUND_COLOR};
    border-top-right-radius: ${PlaygroundCssVars.EDIT_DIALOG_BORDER_RADIUS};
    border-bottom-right-radius: ${PlaygroundCssVars.EDIT_DIALOG_BORDER_RADIUS};
    box-shadow: ${PlaygroundCssVars.EDIT_DIALOG_SHADOW};
    overflow: hidden;
`;
const EditDialogPartContent = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-part-content" })`
    display: flex;
    position: relative;
    flex-direction: column;
    align-self: stretch;
    flex-grow: 1;
`;
const EditDialogPartHeader = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-part-header" })`
    display: flex;
    position: relative;
    align-items: center;
    min-height: ${PlaygroundCssVars.EDIT_DIALOG_PART_HEADER_HEIGHT};
    margin-bottom: calc(${PlaygroundCssVars.EDIT_DIALOG_PART_HEADER_HEIGHT} / 4);
`;
const EditDialogPartTitle = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-part-title" })`
    display: flex;
    position: relative;
    align-items: center;
    flex-grow: 1;
    font-size: ${PlaygroundCssVars.EDIT_DIALOG_PART_TITLE_FONT_SIZE};
    font-weight: ${PlaygroundCssVars.EDIT_DIALOG_PART_TITLE_FONT_WEIGHT};
    white-space: nowrap;
    transition: color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};
`;
const EditDialogPartBody = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-part-body" })`
    display: flex;
    position: relative;
    flex-grow: 1;
    margin: ${PlaygroundCssVars.EDIT_DIALOG_PART_BODY_MARGIN};
    padding: ${PlaygroundCssVars.EDIT_DIALOG_PART_BODY_PADDING};
    overflow: hidden;
`;
const EditDialogHelpDocOpenHandle = qe.div.attrs(({ opened }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-help-doc-open-handle",
    "data-opened": opened,
    style: {
      "--opacity": opened ? 0 : void 0,
      "--pointer-events": opened ? "none" : "auto",
      "--left": opened ? `calc(100% - ${PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_OPEN_HANDLE_WIDTH})` : PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_OPEN_HANDLE_LEFT
    }
  };
})`
    display: flex;
    position: absolute;
    align-items: center;
    top: 0;
    left: var(--left);
    width: ${PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_OPEN_HANDLE_WIDTH};
    height: 100%;
    opacity: var(--opacity);
    pointer-events: var(--pointer-events);
    cursor: pointer;
    z-index: 1;
    transition: left ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION}, opacity ${CssVars.TRANSITION_DURATION} calc(${CssVars.TRANSITION_DURATION} / 2) ${CssVars.TRANSITION_TIMING_FUNCTION};

    &[data-opened=false] {
        backdrop-filter: blur(1.5px);

        + div[data-w=o23-playground-edit-dialog-help-doc-content] {
            opacity: 0.7;
        }
    }

    &[data-opened=true] + div[data-w=o23-playground-edit-dialog-help-doc-content] {
        opacity: 1;
    }

    > svg {
        color: ${PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_OPEN_HANDLE_COLOR};
        opacity: 0.7;
    }
`;
const EditDialogHelpDocCloseHandle = qe.div.attrs(({ opened }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-help-doc-close-handle",
    style: {
      "--opacity": opened ? void 0 : 0,
      "--pointer-events": opened ? "auto" : "none"
    }
  };
})`
    display: flex;
    position: relative;
    align-items: center;
    height: ${PlaygroundCssVars.EDIT_DIALOG_PART_HEADER_HEIGHT};
    width: ${PlaygroundCssVars.EDIT_DIALOG_PART_HEADER_HEIGHT};
    opacity: var(--opacity);
    pointer-events: var(--pointer-events);
    cursor: pointer;
    transition: opacity ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

    &:hover {
        > svg {
            color: ${PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_OPEN_HANDLE_COLOR};
        }
    }

    > svg {
        opacity: 0.7;
        transition: color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};
    }
`;
const HelpDocContainer = qe.div.attrs(({ width }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-help-doc-content",
    "data-v-scroll": "",
    "data-h-scroll": "",
    style: {
      "--min-width": width ? `calc((${width}px - ${PlaygroundCssVars.EDIT_DIALOG_NAVIGATOR_WIDTH}) / 2 - ${PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_COLLAPSED_WIDTH} - ${PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_GUTTER_SIZE})` : void 0
    }
  };
})`
    display: block;
    position: relative;
    flex-grow: 1;
    margin: ${PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_MARGIN};
    padding: ${PlaygroundCssVars.EDIT_DIALOG_HELP_DOC_PADDING};
    min-width: var(--min-width);
    overflow: auto;
    transition: opacity ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};
`;
const NavigatorElementsContainer = qe.div.attrs({
  [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-navigator-elements",
  "data-h-scroll": ""
})`
    display: flex;
    position: relative;
    flex-grow: 1;
    flex-direction: column;
    align-self: stretch;
    margin: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_MARGIN};
    padding: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_PADDING};
    overflow-y: auto;
    overflow-x: hidden;
`;
const NavigatorElementContainer = qe.div.attrs(({ level }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-navigator-element",
    "data-level": level,
    style: {
      "--level": level
    }
  };
})`
    display: flex;
    position: relative;
    align-items: center;
    min-height: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_HEIGHT};
    margin: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_MARGIN};
    padding: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_PADDING};
    border-top: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BORDER};
    border-radius: 0;
    cursor: pointer;
    transition: background-color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION}, border-radius ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION}, font-weight ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

    &:not([data-level="0"]) {
        &:before {
            content: '';
            position: absolute;
            top: 0;
            left: calc((var(--level) * 2 - 0.5) * ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_INDENT});
            width: 1px;
            height: 100%;
            background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_TREE_LINE_COLOR};
        }

        &:after {
            content: '';
            position: absolute;
            top: 50%;
            left: calc((var(--level) * 2 - 0.5) * ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_INDENT});
            width: 8px;
            height: 1px;
            background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_TREE_LINE_COLOR};
        }
    }

    &:last-of-type {
        // last one, since flex direction is column reverse

        &:before {
            border-bottom-left-radius: 3px;
            width: 8px;
            height: calc(${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_HEIGHT} / 2);
            background-color: transparent;
            border-left: 1px solid ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_TREE_LINE_COLOR};
            border-bottom: 1px solid ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_TREE_LINE_COLOR};
        }

        &:after {
            display: none;
        }
    }

    &:hover {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_HOVER_COLOR};
        border-radius: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BORDER_RADIUS};
        font-weight: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_HOVER_FONT_WEIGHT};
    }
`;
const NavigatorElementLabel = qe.div.attrs(({ level }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-navigator-element-label",
    style: {
      "--margin-left": level == 0 ? 0 : `calc(${level * 2} * ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_INDENT})`
    }
  };
})`
    display: flex;
    position: relative;
    align-items: center;
    flex-grow: 1;
    margin-left: var(--margin-left);
    height: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_HEIGHT};
`;
const NavigatorElementBadge = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-navigator-element-badge" })`
    display: flex;
    position: relative;
    align-items: center;
    font-weight: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_FONT_WEIGHT};
`;
const NavigatorElementBadgeWrapper = qe.span.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-navigator-element-badge-wrapper" })`
    display: flex;
    position: relative;
    align-items: center;
    font-size: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_TEXT_FONT_SIZE};
    font-weight: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_TEXT_FONT_WEIGHT};
    height: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_SIZE};
    padding: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_PADDING};
    border-radius: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_BORDER_RADIUS};

    &[data-role=checked] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_CHECKED_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_CHECKED_COLOR};
    }

    &[data-role=missed] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_MISSED_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_MISSED_COLOR};
    }

    &[data-role=banned] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_BANNED_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_BANNED_COLOR};
    }

    &[data-role=all] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_ALL_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_ALL_COLOR};
    }

    &[data-role=ignored] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_IGNORED_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_IGNORED_COLOR};
    }

    &[data-role=not-available] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_NOT_AVAILABLE_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_NOT_AVAILABLE_COLOR};
    }

    &[data-role=count] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_COUNT_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_COUNT_COLOR};
    }

    &[data-role=snippet] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_SNIPPET_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_SNIPPET_COLOR};
    }

    &[data-role=steps] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_STEPS_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_STEPS_COLOR};
    }

    &[data-role=as-is] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_AS_IS_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_AS_IS_COLOR};
    }

    &[data-role=use-default] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_USE_DEFAULT_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_USE_DEFAULT_COLOR};
    }

    &[data-role=yes] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_YES_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_YES_COLOR};
    }

    &[data-role=no] {
        background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_NO_BACKGROUND_COLOR};
        color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_NO_COLOR};
    }

    &[data-role=snippet], &[data-role=steps] {
        > svg {
            height: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_SIZE_S};
            width: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_SIZE_S};
        }
    }

    > svg {
        width: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_SIZE};
        margin: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_ICON_MARGIN};
    }
`;
const NavigatorElementChildren = qe.span.attrs(({ level }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-navigator-sub-elements",
    "data-level": level,
    style: {
      "--level": level
    }
  };
})`
    display: flex;
    position: relative;
    flex-direction: column;

    &:not(:last-child):not([data-level="0"]) {
        // not last one, since flex direction is column reverse

        &:before {
            content: '';
            position: absolute;
            top: 0;
            left: calc(((var(--level) - 1) * 2 + 0.5) * ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_INDENT});
            width: 1px;
            height: 100%;
            background-color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_TREE_LINE_COLOR};
            z-index: 1;
        }
    }
`;
const SpecificElementsContainer = qe.span.attrs({
  [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-specific-elements",
  "data-h-scroll": ""
})`
    display: grid;
    position: relative;
    flex-grow: 1;
    align-self: stretch;
    grid-template-columns: auto 1fr;
    grid-column-gap: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_SPECIFIC_GRID_COLUMN_GAP};
    grid-row-gap: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_SPECIFIC_GRID_ROW_GAP};
    align-content: start;
    margin: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_SPECIFIC_MARGIN};
    padding: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_SPECIFIC_PADDING};
    overflow-y: auto;
    overflow-x: hidden;
    // avoid external grid effect
    --grid-column: auto;
    --grid-row: auto;
`;
const SpecificElementLabel = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-specific-element-label" })`
    display: flex;
    position: relative;
    align-items: start;
    min-height: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_HELP_LABEL_HEIGHT};

    &[data-group=true] {
        font-weight: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_GROUP_FONT_WEIGHT};
        border-bottom: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_GROUP_BORDER};
        margin-right: calc(-1 * ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_SPECIFIC_GRID_COLUMN_GAP});

        + div[data-w=o23-playground-edit-dialog-specific-element-editor-placeholder] {
            border-bottom: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_GROUP_BORDER};
        }
    }

    &[data-visible=false] {
        display: none;

        & + * {
            display: none;
        }
    }

    > span:first-child {
        height: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_HELP_LABEL_HEIGHT};
        display: inline-flex;
        align-items: center;
        position: relative;
    }
`;
const SpecificElementBadge = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-specific-element-badge" })`
    display: flex;
    position: relative;
    align-items: center;
    justify-content: center;
    height: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_HEIGHT};
    width: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_HEIGHT};
    cursor: pointer;

    > svg {
        height: calc(${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_HEIGHT} * 0.6);
        transition: color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};
    }

    &[data-role=help] > svg {
        &:hover {
            color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_HELP_BADGE_COLOR};
        }
    }

    &[data-role=expand] > svg {
        height: calc(${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_HEIGHT} * 0.7);

        &:hover {
            color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_EXPAND_BADGE_COLOR};
        }
    }

    &[data-role=collapse] > svg {
        height: calc(${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_BADGE_HEIGHT} * 0.7);

        &:hover {
            color: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_COLLAPSE_BADGE_COLOR};
        }
    }
`;
const SpecificElementGroupHeader = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-specific-element-group-header" })`
    display: flex;
    position: relative;
    align-items: center;
    border-bottom: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_GROUP_BORDER};
    justify-content: flex-end;

    &[data-visible=false] {
        display: none;
    }
`;
const SpecificElementEditorPlaceholder = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-specific-element-editor-placeholder" })`
    display: block;

    &[data-visible=false] {
        display: none;
    }
`;
const SpecificElementHelpDoc = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-specific-element-help-doc" })`
    display: block;
    position: relative;
    grid-column: 2;
    height: 0;
    overflow: hidden;
    transition: height ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

    &[data-visible=true] {
        height: auto;
        overflow: visible;
    }

    &[data-visible=false] {
        display: none;
    }

    > div {
        font-size: ${PlaygroundCssVars.SPECIFIC_MARKDOWN_FONT_SIZE};
    }
`;
var EditDialogEventTypes;
(function(EditDialogEventTypes2) {
  EditDialogEventTypes2["OPEN_HELP_DESK"] = "open-help-desk";
  EditDialogEventTypes2["CLOSE_HELP_DESK"] = "close-help-desk";
  EditDialogEventTypes2["ASK_HELP_DESK_OPENED"] = "ask-help-desk-opened";
  EditDialogEventTypes2["ELEMENT_VALUE_CHANGED"] = "element-value-changed";
  EditDialogEventTypes2["LOCATE_ELEMENT"] = "locate-element";
})(EditDialogEventTypes || (EditDialogEventTypes = {}));
const Context$1 = reactExports.createContext({});
Context$1.displayName = "EditDialogEventBus";
const EditDialogEventBusProvider = (props) => {
  const { children } = props;
  const bus = useCreateEventBus("edit-dialog");
  return React.createElement(Context$1.Provider, { value: bus }, children);
};
const useEditDialogEventBus = () => reactExports.useContext(Context$1);
const ConfigurableElementBadgeChecked = () => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "checked" }, Labels.BadgeChecked);
};
const ConfigurableElementBadgeMissed = () => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "missed" }, Labels.BadgeMissed);
};
const ConfigurableElementBadgeBanned = () => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "banned" }, Labels.BadgeBanned);
};
const ConfigurableElementBadgeAll = () => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "all" }, Labels.All);
};
const ConfigurableElementBadgeIgnored = () => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "ignored" }, Labels.Ignored);
};
const ConfigurableElementBadgeNotAvailable = () => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "not-available" }, Labels.NotAvailable);
};
const ConfigurableElementBadgeCount = (props) => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "count" }, props.count);
};
const ConfigurableElementBadgeSnippet = () => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "snippet" }, Labels.Snippet);
};
const ConfigurableElementBadgeSteps = () => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "steps" }, Labels.Steps);
};
const ConfigurableElementBadgeAsIs = () => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "as-is" }, Labels.AsIs);
};
const ConfigurableElementBadgeUseDefault = () => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "use-default" }, Labels.UseDefault);
};
const ConfigurableElementBadgeYes = () => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "yes" }, Labels.YesChar);
};
const ConfigurableElementBadgeNo = () => {
  return React.createElement(NavigatorElementBadgeWrapper, { "data-role": "no" }, Labels.NoChar);
};
const LinkRenderer = (props) => {
  return React.createElement("a", { href: props.href, target: "_blank", rel: "noreferrer" }, props.children);
};
const CodeRenderer = (props) => {
  const { children } = props;
  if (children === "@rainbow-o23") {
    return React.createElement(
      "code",
      null,
      React.createElement("a", { href: "https://github.com/InsureMO/rainbow-o23", target: "_blank", rel: "noreferrer" }, props.children)
    );
  }
  const { className, node, ...rest } = props;
  const match = /language-(\w+)/.exec(className || "");
  if (match) {
    return React.createElement(highlighter, { ...rest, PreTag: "div", children: String(children).replace(/\n$/, ""), language: match[1], wrapLongLines: true, style: prism });
  } else {
    return React.createElement("code", { ...rest, className }, children);
  }
};
const components = { h1: "h2", a: LinkRenderer, code: CodeRenderer };
const HelpDoc = (props) => {
  const { content } = props;
  return React.createElement(Markdown, { className: "markdown-body", components, remarkPlugins: [remarkGfm] }, content);
};
const useHelpDeskOpened = () => {
  const { on, off } = useEditDialogEventBus();
  const [helpDeskOpened, setHelpDeskOpened] = reactExports.useState(false);
  reactExports.useEffect(() => {
    const onOpenHelpDesk = () => setHelpDeskOpened(true);
    const onCloseHelpDesk = () => setHelpDeskOpened(false);
    on(EditDialogEventTypes.OPEN_HELP_DESK, onOpenHelpDesk);
    on(EditDialogEventTypes.CLOSE_HELP_DESK, onCloseHelpDesk);
    return () => {
      off(EditDialogEventTypes.OPEN_HELP_DESK, onOpenHelpDesk);
      off(EditDialogEventTypes.CLOSE_HELP_DESK, onCloseHelpDesk);
    };
  }, [on, off, helpDeskOpened]);
  return [helpDeskOpened, setHelpDeskOpened];
};
const StateHolder = () => {
  const { on, off } = useEditDialogEventBus();
  const [helpDeskOpened] = useHelpDeskOpened();
  reactExports.useEffect(() => {
    const onAskHelpDeskOpened = (callback) => {
      callback(helpDeskOpened);
    };
    on(EditDialogEventTypes.ASK_HELP_DESK_OPENED, onAskHelpDeskOpened);
    return () => {
      off(EditDialogEventTypes.ASK_HELP_DESK_OPENED, onAskHelpDeskOpened);
    };
  }, [on, off, helpDeskOpened]);
  return React.createElement(reactExports.Fragment, null);
};
const CloseHandle = () => {
  const { fire } = useEditDialogEventBus();
  const [opened, setOpened] = useHelpDeskOpened();
  reactExports.useEffect(() => {
    fire(EditDialogEventTypes.ASK_HELP_DESK_OPENED, (opened2) => setOpened(opened2));
  }, [fire, setOpened]);
  const onCloseHelpDesk = () => {
    setOpened(false);
    fire(EditDialogEventTypes.CLOSE_HELP_DESK);
  };
  return React.createElement(
    EditDialogHelpDocCloseHandle,
    { opened, onClick: onCloseHelpDesk },
    React.createElement(ArrowLeft, null)
  );
};
const OpenHandle = () => {
  const { fire } = useEditDialogEventBus();
  const [opened, setOpened] = useHelpDeskOpened();
  reactExports.useEffect(() => {
    fire(EditDialogEventTypes.ASK_HELP_DESK_OPENED, (opened2) => setOpened(opened2));
  }, [fire, setOpened]);
  const onOpenHelpDesk = () => {
    setOpened(true);
    fire(EditDialogEventTypes.OPEN_HELP_DESK);
  };
  return React.createElement(
    EditDialogHelpDocOpenHandle,
    { opened, onClick: onOpenHelpDesk },
    React.createElement(ArrowRight, null)
  );
};
const DialogHelpDesk = (props) => {
  const { helpDoc } = props;
  const [state, setState] = reactExports.useState({});
  const { on, off } = usePlaygroundEventBus();
  reactExports.useEffect(() => {
    const onInitHelpDocWidth = (width) => {
      setState((state2) => ({ ...state2, docWidth: width }));
    };
    on(PlaygroundEventTypes.INIT_HELP_DOC_WIDTH, onInitHelpDocWidth);
    return () => {
      off(PlaygroundEventTypes.INIT_HELP_DOC_WIDTH, onInitHelpDocWidth);
    };
  }, [on, off]);
  return React.createElement(
    EditDialogHelpDocContainer,
    null,
    React.createElement(
      EditDialogPartContent,
      null,
      React.createElement(
        EditDialogPartHeader,
        null,
        React.createElement(EditDialogPartTitle, null, Labels.HelpDesk),
        React.createElement(CloseHandle, null)
      ),
      React.createElement(
        EditDialogPartBody,
        null,
        React.createElement(OpenHandle, null),
        React.createElement(
          HelpDocContainer,
          { width: state.docWidth },
          React.createElement(HelpDoc, { content: helpDoc })
        )
      )
    )
  );
};
const useElementVisible = (element, model) => {
  const { visibleOn, visible } = element;
  const { on, off } = useEditDialogEventBus();
  const forceUpdate = useForceUpdate();
  reactExports.useEffect(() => {
    if (visibleOn == null || visibleOn.length === 0) {
      return;
    }
    const onElementValueChanged = (anchor) => {
      if (visibleOn.includes(anchor)) {
        forceUpdate();
      }
    };
    on(EditDialogEventTypes.ELEMENT_VALUE_CHANGED, onElementValueChanged);
    return () => {
      off(EditDialogEventTypes.ELEMENT_VALUE_CHANGED, onElementValueChanged);
    };
  }, [on, off, forceUpdate, visibleOn]);
  return visible == null || visible(model);
};
const useElementValueChange = (element) => {
  const { anchor } = element;
  const { on, off } = useEditDialogEventBus();
  const forceUpdate = useForceUpdate();
  reactExports.useEffect(() => {
    const onElementValueChanged = (anchorOfChanged) => {
      if (anchor === anchorOfChanged) {
        forceUpdate();
      }
    };
    on(EditDialogEventTypes.ELEMENT_VALUE_CHANGED, onElementValueChanged);
    return () => {
      off(EditDialogEventTypes.ELEMENT_VALUE_CHANGED, onElementValueChanged);
    };
  }, [on, off, forceUpdate, anchor]);
};
const DialogNavigatorElementWrapper = (props) => {
  const { element, model, level } = props;
  const { label, badge } = element;
  const { fire } = useEditDialogEventBus();
  useElementValueChange(element);
  const onClicked = () => {
    fire(EditDialogEventTypes.LOCATE_ELEMENT, element.anchor);
  };
  return React.createElement(
    NavigatorElementContainer,
    { level, onClick: onClicked },
    React.createElement(NavigatorElementLabel, { level }, label),
    badge != null ? React.createElement(NavigatorElementBadge, null, badge(model)) : null
  );
};
const DialogNavigatorElementChildren = (props) => {
  const { element, model, level } = props;
  if (element.children == null || element.children.length === 0) {
    return null;
  }
  return React.createElement(NavigatorElementChildren, { level }, element.children.map((child) => {
    return React.createElement(DialogNavigatorElement, { element: child, model, level: level + 1, key: child.code });
  }));
};
const DialogNavigatorElement = (props) => {
  const { element, model } = props;
  const visible = useElementVisible(element, model);
  if (!visible) {
    return null;
  }
  return React.createElement(
    React.Fragment,
    null,
    React.createElement(DialogNavigatorElementWrapper, { ...props }),
    React.createElement(DialogNavigatorElementChildren, { ...props })
  );
};
const DialogNavigatorElements = (props) => {
  const { elements, model } = props;
  return React.createElement(NavigatorElementsContainer, null, elements.map((element) => {
    return React.createElement(DialogNavigatorElement, { element, model, level: 0, key: element.code });
  }));
};
const DialogNavigator = (props) => {
  return React.createElement(
    EditDialogNavigatorContainer,
    null,
    React.createElement(
      EditDialogPartContent,
      null,
      React.createElement(
        EditDialogPartHeader,
        null,
        React.createElement(EditDialogPartTitle, null, Labels.Navigator)
      ),
      React.createElement(
        EditDialogPartBody,
        null,
        React.createElement(DialogNavigatorElements, { ...props })
      )
    )
  );
};
const useElementValueChangeBy = (element) => {
  const { changeBy } = element;
  const { on, off } = useEditDialogEventBus();
  const forceUpdate = useForceUpdate();
  reactExports.useEffect(() => {
    if (changeBy == null || changeBy.length === 0) {
      return;
    }
    const onElementValueChanged = (anchorOfChanged) => {
      if (changeBy.includes(anchorOfChanged)) {
        forceUpdate();
      }
    };
    on(EditDialogEventTypes.ELEMENT_VALUE_CHANGED, onElementValueChanged);
    return () => {
      off(EditDialogEventTypes.ELEMENT_VALUE_CHANGED, onElementValueChanged);
    };
  }, [on, off, forceUpdate, changeBy]);
};
var DialogSpecificElementEventTypes;
(function(DialogSpecificElementEventTypes2) {
  DialogSpecificElementEventTypes2["EXPAND"] = "expand";
  DialogSpecificElementEventTypes2["COLLAPSE"] = "collapse";
  DialogSpecificElementEventTypes2["ASK_EXPAND"] = "ask-expand";
})(DialogSpecificElementEventTypes || (DialogSpecificElementEventTypes = {}));
const Context = reactExports.createContext({});
Context.displayName = "DialogSpecificElementEventBus";
const DialogSpecificElementEventBusProvider = (props) => {
  const { children } = props;
  const bus = useCreateEventBus("dialog-specific-element");
  return React.createElement(Context.Provider, { value: bus }, children);
};
const useDialogSpecificElementEventBus = () => reactExports.useContext(Context);
const DialogSpecificElementWrapper = (props) => {
  const { element, model, visible = true, assistant, decorator, askParentExpand } = props;
  const { anchor, label, editor: Editor2, helpDoc, group, collapsible = false } = element;
  const ref = reactExports.useRef(null);
  const { on, off, fire } = useEditDialogEventBus();
  const { on: onElement, off: offElement, fire: fireElement } = useDialogSpecificElementEventBus();
  const [collapsed, setCollapsed] = reactExports.useState(element.collapsed ?? false);
  const [showHelp, setShowHelp] = reactExports.useState(false);
  useElementValueChangeBy(element);
  const forceUpdate = useForceUpdate();
  reactExports.useEffect(() => {
    const onLocateElement = (anchorToLocate) => {
      if (anchor !== anchorToLocate) {
        return;
      }
      if (ref.current != null) {
        if (!visible) {
          askParentExpand();
        }
        setTimeout(() => {
          ref.current.scrollIntoView({ behavior: "smooth", block: "start", inline: "nearest" });
        }, 30);
      }
    };
    on(EditDialogEventTypes.LOCATE_ELEMENT, onLocateElement);
    return () => {
      off(EditDialogEventTypes.LOCATE_ELEMENT, onLocateElement);
    };
  }, [on, off, fireElement, anchor, visible, askParentExpand]);
  reactExports.useEffect(() => {
    const onAskExpand = () => {
      if (!visible) {
        askParentExpand();
      }
      setCollapsed(false);
      fireElement(DialogSpecificElementEventTypes.EXPAND);
    };
    onElement(DialogSpecificElementEventTypes.ASK_EXPAND, onAskExpand);
    return () => {
      offElement(DialogSpecificElementEventTypes.ASK_EXPAND, onAskExpand);
    };
  }, [onElement, offElement, fireElement, visible, askParentExpand]);
  const onHelpBadgeClicked = () => setShowHelp(!showHelp);
  const onExpandClicked = () => {
    setCollapsed(!collapsed);
    fireElement(DialogSpecificElementEventTypes.EXPAND);
  };
  const onCollapseClicked = () => {
    setCollapsed(!collapsed);
    fireElement(DialogSpecificElementEventTypes.COLLAPSE);
  };
  const onValueChanged = (repaint = true) => {
    if (repaint) {
      forceUpdate();
    }
    fire(EditDialogEventTypes.ELEMENT_VALUE_CHANGED, anchor);
  };
  const hasHelpDoc = VUtils.isNotBlank(helpDoc);
  return React.createElement(
    React.Fragment,
    null,
    React.createElement(
      SpecificElementLabel,
      { "data-group": group, "data-visible": visible, ref },
      React.createElement("span", null, label),
      hasHelpDoc ? React.createElement(
        SpecificElementBadge,
        { onClick: onHelpBadgeClicked, "data-role": "help" },
        React.createElement(ElementHelp, null)
      ) : null
    ),
    group && collapsible ? React.createElement(SpecificElementGroupHeader, { "data-visible": visible }, collapsed ? React.createElement(
      SpecificElementBadge,
      { onClick: onExpandClicked, "data-role": "expand" },
      React.createElement(Expand, null)
    ) : React.createElement(
      SpecificElementBadge,
      { onClick: onCollapseClicked, "data-role": "collapse" },
      React.createElement(Collapse, null)
    )) : null,
    group && !collapsible ? React.createElement(SpecificElementEditorPlaceholder, { "data-visible": visible }) : null,
    !group && Editor2 != null ? React.createElement(Editor2, { model, onValueChanged, assistant, decorator }) : null,
    hasHelpDoc ? React.createElement(
      SpecificElementHelpDoc,
      { "data-visible": visible && showHelp },
      React.createElement(HelpDoc, { content: helpDoc })
    ) : null
  );
};
const DialogSpecificElementInitExpand = (props) => {
  const { element } = props;
  const { fire } = useDialogSpecificElementEventBus();
  reactExports.useEffect(() => {
    if (element.group !== true || element.collapsible !== true || element.collapsed !== true) {
      return;
    }
    fire(DialogSpecificElementEventTypes.COLLAPSE);
  }, []);
  return React.createElement(reactExports.Fragment, null);
};
const DialogSpecificElement = (props) => {
  const { element, model, assistant, decorator } = props;
  const { on, off, fire } = useDialogSpecificElementEventBus();
  const [visible, setVisible] = reactExports.useState(props.visible ?? true);
  reactExports.useEffect(() => {
    const onExpand = () => setVisible(true);
    const onCollapse = () => setVisible(false);
    on && on(DialogSpecificElementEventTypes.EXPAND, onExpand);
    on && on(DialogSpecificElementEventTypes.COLLAPSE, onCollapse);
    return () => {
      off && off(DialogSpecificElementEventTypes.EXPAND, onExpand);
      off && off(DialogSpecificElementEventTypes.COLLAPSE, onCollapse);
    };
  }, [on, off]);
  const elementVisible = useElementVisible(element, model);
  if (!elementVisible) {
    return null;
  }
  const askParentExpand = () => fire(DialogSpecificElementEventTypes.ASK_EXPAND);
  return React.createElement(
    DialogSpecificElementEventBusProvider,
    null,
    React.createElement(DialogSpecificElementWrapper, { ...props, visible, askParentExpand }),
    element.children != null ? element.children.map((child) => {
      return React.createElement(DialogSpecificElement, { element: child, model, visible, assistant, decorator, key: child.code });
    }) : null,
    React.createElement(DialogSpecificElementInitExpand, { element })
  );
};
const DialogSpecificElements = (props) => {
  const { elements, model, assistant, decorator } = props;
  return React.createElement(SpecificElementsContainer, null, elements.map((element) => {
    return React.createElement(DialogSpecificElement, { element, model, visible: true, assistant, decorator, key: element.code });
  }));
};
const DialogSpecific = (props) => {
  return React.createElement(
    EditDialogSpecificDetailsContainer,
    null,
    React.createElement(
      EditDialogPartContent,
      null,
      React.createElement(
        EditDialogPartHeader,
        null,
        React.createElement(EditDialogPartTitle, null, Labels.Specific)
      ),
      React.createElement(
        EditDialogPartBody,
        null,
        React.createElement(DialogSpecificElements, { ...props })
      )
    )
  );
};
const LayoutController = () => {
  const { fire } = useEditDialogEventBus();
  const [opened, setOpened] = useHelpDeskOpened();
  reactExports.useEffect(() => {
    fire(EditDialogEventTypes.ASK_HELP_DESK_OPENED, (opened2) => setOpened(opened2));
  }, [fire, setOpened]);
  return React.createElement(EditDialogLayoutControllerHandle, { opened });
};
const DialogContentInitializer = () => {
  const ref = reactExports.useRef(null);
  const { fire } = usePlaygroundEventBus();
  const { replace } = useThrottler();
  reactExports.useEffect(() => {
    if (ref.current == null) {
      return;
    }
    const container = ref.current.previousElementSibling;
    const { width } = container.getBoundingClientRect();
    fire(PlaygroundEventTypes.INIT_HELP_DOC_WIDTH, width);
    const observer = new ResizeObserver(() => {
      replace(() => {
        fire(PlaygroundEventTypes.INIT_HELP_DOC_WIDTH, container.getBoundingClientRect().width);
      }, 30);
    });
    observer.observe(container);
    return () => {
      observer.disconnect();
    };
  }, [fire, replace]);
  return React.createElement(EditDialogContentInitializer, { ref });
};
const DialogWorkArea = (props) => {
  const { helpDoc, elements, confirm: confirm2, discard: discard2, model, assistant, decorator } = props;
  const { fire } = usePlaygroundEventBus();
  const { fire: fireDialog } = useEditDialogEventBus();
  const onConfirmClicked = () => {
    const anchors = confirm2(model);
    if (anchors === true) {
      fire(PlaygroundEventTypes.HIDE_EDIT_DIALOG);
    } else {
      fireDialog(EditDialogEventTypes.LOCATE_ELEMENT, anchors[0]);
    }
  };
  const onDiscardClicked = () => {
    discard2(model);
    fire(PlaygroundEventTypes.HIDE_EDIT_DIALOG);
  };
  return React.createElement(
    EditDialogContentContainer,
    null,
    React.createElement(
      EditorDialogCloser,
      null,
      React.createElement(
        EditorDialogCloseButton,
        { "data-role": "confirm", onClick: onConfirmClicked },
        React.createElement(Accept, null),
        Labels.ConfirmContent
      ),
      React.createElement(
        EditorDialogCloseButton,
        { "data-role": "discard", onClick: onDiscardClicked },
        React.createElement(Back, null),
        Labels.DiscardContent
      )
    ),
    React.createElement(DialogHelpDesk, { helpDoc }),
    React.createElement(DialogSpecific, { elements, model, assistant, decorator }),
    React.createElement(DialogNavigator, { elements, model })
  );
};
const DialogContent = (props) => {
  const { model, helpDoc, elements, confirm: confirm2, discard: discard2, assistant, decorator, children } = props;
  const [state] = reactExports.useState({ model });
  return React.createElement(
    EditDialogEventBusProvider,
    null,
    children,
    React.createElement(StateHolder, null),
    React.createElement(LayoutController, null),
    React.createElement(DialogWorkArea, { helpDoc, elements, confirm: confirm2, discard: discard2, model: state.model, assistant, decorator }),
    React.createElement(DialogContentInitializer, null)
  );
};
const StepUseHandler = (props) => {
  const { repaint } = props;
  const { on, off } = useEditDialogEventBus();
  reactExports.useEffect(() => {
    const onElementValueChanged = (anchor) => {
      if (anchor === "use") {
        repaint();
      }
    };
    on(EditDialogEventTypes.ELEMENT_VALUE_CHANGED, onElementValueChanged);
    return () => {
      off(EditDialogEventTypes.ELEMENT_VALUE_CHANGED, onElementValueChanged);
    };
  }, [on, off, repaint]);
  return React.createElement(reactExports.Fragment, null);
};
const StepDialogContent = (props) => {
  const { model: nodeModel } = props;
  const { step: def, file } = nodeModel;
  const [configurableModel] = reactExports.useState(reconfigureStepDefPrepare(findStepDef(def.use).prepare, nodeModel)(def));
  const forceUpdate = useForceUpdate();
  const { use } = configurableModel;
  const StepDefs = findStepDef(use);
  const onConfirm = (model) => {
    return reconfigureStepDefConfirm(StepDefs.confirm, nodeModel)(model, def, file, {
      handlers: nodeModel.handlers,
      assistant: nodeModel.assistant
    });
  };
  const onDiscard = (model) => {
    reconfigureStepDefDiscard(StepDefs.discard, nodeModel)(model);
  };
  const elements = reconfigureStepDefProperties(StepDefs.properties, nodeModel);
  return React.createElement(
    DialogContent,
    { model: configurableModel, helpDoc: StepDefs.helpDocs, elements, confirm: onConfirm, discard: onDiscard, assistant: nodeModel.assistant, decorator: nodeModel.decorator },
    React.createElement(StepUseHandler, { repaint: forceUpdate })
  );
};
const EditDialog = () => {
  const { on, off } = usePlaygroundEventBus();
  const [state, setState] = reactExports.useState({ visible: false });
  const [functions] = reactExports.useState({
    show: (content) => {
      if (state.visible) {
        return;
      }
      const padding = window.innerWidth - document.body.clientWidth;
      if (padding > 0) {
        document.body.style.paddingRight = `${padding}px`;
      }
      document.body.style.overflowY = "hidden";
      setState({ visible: true, content });
    },
    hide: () => {
      document.body.style.paddingRight = "";
      document.body.style.overflowY = "";
      setState(({ content }) => ({ visible: false, content }));
    }
  });
  reactExports.useEffect(() => {
    on(PlaygroundEventTypes.SHOW_EDIT_DIALOG, functions.show);
    on(PlaygroundEventTypes.HIDE_EDIT_DIALOG, functions.hide);
    return () => {
      off(PlaygroundEventTypes.SHOW_EDIT_DIALOG, functions.show);
      off(PlaygroundEventTypes.HIDE_EDIT_DIALOG, functions.hide);
    };
  }, [on, off, functions.show, functions.hide]);
  const onTransitionEnd = () => {
    if (!state.visible) {
      setState({ visible: false });
    }
  };
  return React.createElement(
    EditDialogContainer,
    { visible: state.visible, onTransitionEnd },
    React.createElement(EditDialogWrapper, null, state.content)
  );
};
const markdown$18 = "Handle any error thrown by current step. The following parameters can be used during the error handling process:\n\n- `$code`: Error code. Note that it is always `O01-99999` when using the `AnyError` handler.\n- `$error`: Error object itself,\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$17 = "Handle `CatchableError` thrown by current step. The following parameters can be used during the error handling process:\n\n- `$code`: Error code. Note that it is always `O01-99999` when using the `AnyError` handler.\n- `$error`: Error object itself,\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$16 = "### Error handling\n\nError handling is a critical part of any step. It is important to handle errors properly to ensure that your step is robust\nand reliable. `@rainbow-o23` provided a standard exception handling process, including the following four types of exceptions:\n\n- `CatchableError`: Catchable exception. Generally refers to exceptions thrown in pipeline steps expected to be caught and handled\n  externally,\n- `ExposedUncathableError`: Uncatchable exception which identified as exposed. Generally refers to exceptions thrown in pipeline steps not\n  expected to be handled additionally externally, and should be exposed to the caller,\n- `UncatchableError`: Uncatchable exception. Generally refers to exceptions thrown in pipeline steps not expected to be handled additionally\n  externally,\n- `AnyError`: Any exception. Generally refers to any exception thrown in pipeline steps.\n\nIt is important to note that exception handling is mutually exclusive. If an exception has already been caught by a handler, it will not be\ncaught by any other handlers. After throwing an exception, the pipeline steps will detect exception type in the above order. As long as the\nexception matches the catch type and the processor for that catch type has been defined, the defined processing logic will be entered. In\npractical scenarios, exception catching needs to be done according to requirements. Generally, there are some recommended practices:\n\n- Generally, `CatchableError` is expected to be caught and handled. For whether the pipeline step will throw this exception, please refer to\n  the corresponding step documentation,\n- In most pipeline steps, since custom snippet can be used to define logic (in addition to the step itself, can use snippet to\n  define the logic for `pick from input` and `write to output`), any type of exception can be thrown in these snippets, so whether or not\n  you need to catch it depends on the specific definition of the custom snippet for this step,\n- Generally speaking, `ExposedUncatchableError` and `UncatchableError` do not require further processing,\n- Also, can use `AnyError` to catch all types of exceptions, including `Node.js` standard exceptions\n\n`@rainbow-o23` provides two ways to handle exceptions, which will be demonstrated below.\n\n#### Using snippet\n\nUse snippet processing for handling error. The following parameters can be used during the error handling process:\n\n- `$code`: Error code. Note that it is always `O01-99999` when using the `AnyError` handler.\n- `$error`: Error object itself,\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\n> All handlers are async functions, so `await` is available inside.\n\nAfter handling the exception in the snippet, can either return normally, rethrow the original exception, or construct and throw a new\nexception. The following examples will provide some references:\n\n```ts\n// simply log the exception.\n$.$logger.error(`An exception[code=${$code}] caught.`, $error);\n\n// return normally\nreturn 'Everything is OK now.';\n\n// or check exception type, decide to rethrow or construct a new exception\nif ($.$errors.isCatchable($error)) {\n	// construct and throw a new exception\n	$.$errors.exposed({status: 500, code: $code, reason: $error.message});\n} else {\n	// rethrow the original exception\n	throw $error;\n}\n```\n\n> In most cases, special exception handling is not necessary, as `@rainbow-o23` will handle all exceptions consistently when returning to\n> the API caller.\n\n> When choosing to return normally, meaning no exception is thrown anymore, the returned data will go through the `write to output` process\n> and will be consistent with the normal logic of returning data in the pipeline steps. However, if an exception is thrown during\n> the `write to output` process, this exception will be thrown directly, no error handling on this situation.\n\nHere are some commonly used utility function examples for exception handling in `$helpers`. For detailed specifications, please refer to\nthe `@rainbow-o23` documentation.\n\n```ts\n// log exception\n$.$logger.log(`An exception[code=${$code}] caught.`, $error);\n$.$logger.warn(`An exception[code=${$code}] caught.`, $error);\n// If the log function has two or more parameters, and the last one is a string, then the last parameter will be used as the log category\n$.$logger.error(`An exception[code=${$code}] caught.`, $error, 'SomeLogCategory');\n\n// check error type\n// note exposed uncatchable error is also an uncatchable error\n// so if want to check exposed uncatchable error, should check it first\n$.$errors.isCatchable($error);       // check it is a catchable error\n$.$errors.isExposed($error);         // check it is an exposed uncatchable error\n$.$errors.isUncatchable($error);     // check it is an uncatchable error\n\n// construct a new error and rethrow it\n// for catchable\n$.$errors.catchable({code: $code, reason: 'I am catchable.'});\n// for exposed uncatchable, a status field is required\n// status is exactly following the HTTP status code, code is the error code, reason is the error message\n$.$error({status: 500, code: $code, reason: 'Unpredicated error occurred.'});\n$.$errors.exposed({status: 500, code: $code, reason: 'Unpredicated error occurred.'});\n// for uncatchable\n$.$errors.uncatchable({code: $code, reason: 'I am uncatchable.'});\n```\n\n#### Using sub-steps\n\nIn practice, if an exception requires additional handling and is not thrown after processing, it is recommended to configure this using\npipeline steps. When choosing to handle exceptions using pipeline steps, the format of the request data received by the step is as follows\n\n```ts\ninterface Data {\n	$code: string;        // error code \n	$error: Error;        // error itself \n	$factor: any;         // original factor data, return by the pick from input process\n	$request: any;        // original request data, with both input data and pipeline context\n}\n```\n\n";
const markdown$15 = "Handle `ExposedUncatchableError` thrown by current step. The following parameters can be used during the error handling process:\n\n- `$code`: Error code. Note that it is always `O01-99999` when using the `AnyError` handler.\n- `$error`: Error object itself,\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$14 = "Obtain a portion of the request data as the input for this step. Additional processing of the data can also be performed during this\nprocess. The following parameters can be used during the conversion process:\n\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\nThe returned data will be used as the real input data for this step. If no data is returned, there is no input data for this step.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$13 = "### Input and output\n\nUsually, when processing logic, we do not need all the memory contexts, but only need to extract certain fragments for processing and return\nthe processing results to the context for subsequent logic to continue processing. Therefore, `@rainbow-o23` provides a relevant\nimplementation, allowing pipeline steps to flexibly access the relevant memory data and write back the processed result data to the context\nin the required format.\n\n#### Pick from input\n\nUse the `Pick from input` property to define a JavaScript script. The returned data will be used as input data for this step. The script is\na function that takes the following parameters:\n\n- `$factor` represents the incoming data,\n- `$request` represents the original request data (including incoming data and a context), it is not recommended,\n- `$helpers` represents function supporting, and it has a shortcut `$`.\n\nHere is a simple example:\n\n```ts\n// incoming data\nconst incoming = {name: 'John', age: 23};\n\n// Only the age is needed as a parameter in the step processing, not the name.\n// Define a transformation script, so in the actual processing logic of the current step, only the age will be collected, and there won't be a field for the name attribute.\nreturn {age: $factor.age};\n```\n\n> `return` is not necessary. If the script is only one line (and has no line breaks), the system will consider the result of executing that\n> line as the result of the entire function.\n\n> It's important to note that whether modifications to memory data during processing will affect the original input data depends on how the\n> transformation is handled. Generally, if deep cloning is not performed, it will affect the data; otherwise, it will not.\n\n#### Write to output\n\nUse the `Write to output` property to define a script. The returned data will be used as output data for this step. The script is a function\nthat takes the following parameters:\n\n- `$result` represents the outgoing data,\n- `$request` represents the original request data (including incoming data and a context), it is not recommended,\n- `$helpers` represents function supporting, and it has a shortcut `$`.\n\nHere is a simple example:\n\n```ts\n// outgoing data\nconst outgoing = {name: 'John', age: 23};\n\n// The result data should only include age, not the name.\n// Define a transformation script, the age alone will be stored in memory for subsequent use.\nreturn {age: $result.age};\n```\n\n> `return` is not necessary. If the script is only one line (and has no line breaks), the system will consider the result of executing that\n> line as the result of the entire function.\n\n>\n\n#### Merge-back Strategy\n\nAfter processing the step logic and obtaining the returned data, you can also define how this returned data should be merged into the\ncontext of the entire pipeline. There are several ways to define this, all declared using the `Merge-back strategy` attribute:\n\n- Defined as `Replace`, it means the returned data will overwrite the original context and be used as the new context.\n- Defined as `Unbox and merge`, it means the returned data will be automatically unboxed and merged into the original context. In this\n  case, the returned data must be a JSON object and cannot be a primitive type or an array.\n- Defined as `As specific property`, it means the returned data will be merged into the original context under the specified name.\n\nHere is a simple example:\n\n```ts\n// context data\nlet context = {name: 'John', age: 0};\nconst result = {age: 23};\n\n// merge not defined, equivalent to\ncontext = result;\n// context is {age: 23}\n\n// merge is \"unbox and merge\", equivalent to\ncontext = {...context, ...result};\n// context is {name: 'John', age: 23}\n\n// merge is 'person', equivalent to\ncontext = {...context, person: result};\n// context is {name: 'John', age: 0, person: {age: 23}}\n```\n\n> Note that in the latter two cases, there is a possibility of name collision resulting in the original context being overwritten.\n> Therefore, it is necessary to have a clear understanding of the data structure in the context.\n\n#### Keep or clear\n\nIn the following `Write to output` scenarios, and in cases where merge-back strategy is specified as `Replace`:\n\n- Returning `null` or `undefined` (recommended to use `(void 0)` to represent `undefined`) indicates that the original request data will\n  continue to be used as the request data for the next step without any modifications.\n- Returning a flag created by `$helpers.$clearContextData()` to clear context data will be used as the request data for the next step, while\n  all other data is cleared.\n\n> Please note that \"without any modifications\" is a conceptual reference. If the data has already been altered by the logic executed in the\n> step, the data passed to the next step may not be identical to the input data of this step.\n";
const markdown$12 = "Define the strategy for writing back step result data to memory:\n\n- `Replace`: means the returned data will overwrite the original context and be used as the new context.\n- `Unbox and merge`: means the returned data will be automatically unboxed and merged into the original context. In this\n  case, the returned data must be a JSON object and cannot be a primitive type or an array.\n- `As specific property`: means the returned data will be merged into the original context under the specified name.\n";
const markdown$11 = "A brief name that indicates the purpose of the step.\n";
const markdown$10 = "Check if there is a need to execute the subsequent steps. Return `true` if necessary, otherwise skip to the next routing check or enter\n`otherwise` route. The following parameters can be used during the build process:\n\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\n> This check is performed before `Pick from input`.\n\n> Modifying memory data within this function is not recommended as it may lead to unpredictable data changes.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$$ = "Write back the result of the step execution to memory for use as the request data in the next step. Additional processing of the data can\nalso be performed during this process. The following parameters can be used during the conversion process:\n\n- `$result`: Result data of the step execution,\n- `$request`: Entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\nThe returned data will be written back to memory as the actual result data for this step.\n\n> How the step's returned data is written back to memory depends on the return result of this process and the chosen write-back strategy.\n> Please refer to the merge-back strategy documentation for details.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$_ = "Handle `UncatchableError` thrown by current step. The following parameters can be used during the error handling process:\n\n- `$code`: Error code. Note that it is always `O01-99999` when using the `AnyError` handler.\n- `$error`: Error object itself,\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$Z = "The specified step definition is used. The logic executed by the system has already been predefined in the step definition. After specifying\nthe step definition, you will also need to specify the parameters required for that step definition.\n";
const docs$i = {
  stepName: markdown$11,
  stepUse: markdown$Z,
  stepRouteCheck: markdown$10,
  stepFromInput: markdown$14,
  stepToOutput: markdown$$,
  stepMergeToRequest: markdown$12,
  stepCatchableErrorHandle: markdown$17,
  stepUncatchableErrorHandle: markdown$_,
  stepExposedErrorHandle: markdown$15,
  stepAnyErrorHandle: markdown$18,
  stepIOTransformer: markdown$13.replace(/\$/g, "$$$$"),
  stepErrorHandles: markdown$16.replace(/\$/g, "$$$$")
};
const addTocToStepDocs = (markdown2) => {
  const indexes = new Array(6).fill(0);
  let topLevel = 10;
  return markdown2.split("\n").map((line) => {
    const matched = line.match(/^(#{1,6})\s(.*)$/);
    if (matched == null) {
      return line;
    } else {
      topLevel = Math.min(topLevel, matched[1].length - 1);
      return [matched[1], matched[2]];
    }
  }).map((parsed) => {
    if (typeof parsed === "string") {
      return parsed;
    } else {
      const myLevel = parsed[0].length - 1;
      indexes[myLevel]++;
      for (let i = myLevel + 1; i < indexes.length; i++) {
        indexes[i] = 0;
      }
      return `${parsed[0]} ${indexes.slice(topLevel, myLevel + 1).join(".")}. ${parsed[1]}`;
    }
  }).join("\n");
};
const mergeStepDocsFreely = (doc, replacements) => {
  const markdown2 = Object.keys(replacements).reduce((doc2, key) => {
    return doc2.replace(`\${${key}}`, replacements[key]);
  }, doc);
  return addTocToStepDocs(markdown2);
};
const mergeStepDocs = (doc, toc = true) => {
  const markdown2 = doc.replace("${transformer}\n", docs$i.stepIOTransformer).replace("${errorHandles}\n", docs$i.stepErrorHandles);
  return toc ? addTocToStepDocs(markdown2) : markdown2;
};
const mergeStepDocsAnd = (doc, replace, toc = true) => {
  doc = Object.keys(replace).reduce((doc2, key) => doc2.replace(key, replace[key]), doc);
  return mergeStepDocs(doc, toc);
};
const markdown$Y = "### Async sets step\n\nThe async sets pipeline step includes a set of sub-step definitions, where all the actual processing logic is executed within the sub-steps,\nasynchronously. The input data for the first sub-step could be specified by `Pick from input`.\n\n> Note that the sub-steps are executed in sequence, asynchronous is relative to this async sets step. This also means that modifications to\n> memory within sub-steps cannot be directly reflected in the current process, so must handle it with caution. Generally, direct\n> modifications to input data or context data within sub-steps should be avoided unless it can be confirmed that the data will not be used\n> in the current process.\n\n#### Environment variables\n\nThis step does not use any environment variables.\n\n#### Step variables\n\nThis step has no other properties defined except for using the `steps` attribute to define sub-steps.\n\n#### Returning\n\nThis step does not return anything.\n\n${transformer}\n\n${errorHandles}\n";
const docs$h = {
  asyncSetsStep: mergeStepDocs(markdown$Y)
};
const markdown$X = "### Conditional step\n\nThe conditional pipeline step provides two routes. The first route has a check, and if the check passes, the set of steps defined for the\nfirst route is executed. If the check fails, it proceeds to the other (`otherwise`) route. The `otherwise` route is allowed to be absent.\n\n#### Environment variables\n\nThis step does not use any environment variables.\n\n#### Step variables\n\nDefine the `check` attribute, which is a JavaScript script that will ultimately be executed as a JavaScript function. This function\naccepts the following input parameters:\n\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\n> It is important to note that the `$factor` passed to `check` is provided by `Pick from input`, but `Pick from input` does not affect the\n> input parameters of the sub-steps (unless memory data is modified).\n\n#### Returning\n\nThe return data for this step is determined by the return data of the route executed at runtime.\n\n${transformer}\n\n${errorHandles}\n";
const docs$g = {
  conditionalStep: mergeStepDocs(markdown$X)
};
const markdown$W = "Delete specified property or properties from the input data. If there are multiple attributes, use `,` to connect them.\n\nFor example, if there is input data like `{a: 1, b: 2, c: 3}`, then with the following definition, you can retrieve the\ncorresponding value:\n\n| Property | After deletion  |\n|:---------|:----------------|\n| `a`      | `{b : 2, c: 3}` |\n| `a, b`   | `{c: 3}`        |\n\n> If the specified property name does not exist on the given data object, there will be no side effects.\n";
const markdown$V = "### Delete property step\n\nThe delete property pipeline step remove the specified property name from input data.\n\n#### Environment variables\n\nThis step does not use any environment variables.\n\n#### Step variables\n\nDefine the `property` attribute to remove a specified property from the input data. Since property does not support multi-level data\nstructures, when removing a property from a non-top-level data object in the input data, should first use `Pick from input` to retrieve\nthe non-top-level object.\n\n#### Returning\n\nThis step does not return anything.\n\n${transformer}\n\n${errorHandles}\n";
const docs$f = {
  stepDelPropertyProperty: markdown$W,
  delPropertyStep: mergeStepDocs(markdown$V)
};
const markdown$U = "The variable name for obtaining the current round's input data in the sub-steps.  \n`$item` by default, and the value can be accessed through `$factor.$item`.\n";
const markdown$T = "The variable name for obtaining original input data obtained in the sub-steps.\n`$content` by default, and the value can be accessed through `$factor.$content`.\n";
const markdown$S = "### Each step\n\nThe each pipeline step includes a set of sub-step definitions, where all the actual processing logic is executed within the sub-steps. The\nsub-step set will be executed N times, where N is the length of the given sub-step input data array. For each execution of the sub-step set,\nthe input data are the array element at the current index and original input data itself.\n\n> Ensure that the input data is always an array; otherwise, the sub-steps cannot execute correctly. Additionally, if the given input\n> parameter is `null`, `undefined`, or an array with a length of 0, it will be returned directly without affecting the context data and\n> without executing the `Write to output` stage.\n\n#### Environment variables\n\nThis step does not use any environment variables.\n\n#### Step variables\n\n| Variable name       | Type   | Description                                                                                      |\n|---------------------|--------|--------------------------------------------------------------------------------------------------|\n| originalContentName | string | The name of the variable that contains the original input data. Optional, default is `$content`. |\n| itemName            | string | The name of the variable that contains the current item. Optional, default is `$item`.           |\n\nAt the same time, the step provides a semaphore to exit the loop, named `$semaphore`. Therefore, the format of the input data received by\nthe sub-steps is as follows:\n\n```ts\n// Assuming no parameters are specified, all defaults will be used.\ninterface Data {\n	$content: any;          // original input data\n	$item: any;             // item at the current index\n	$semaphore: Symbol;     // return this semaphore to break and exit the loop\n}\n\n// Assuming the parameters are specified as originalContentName=input, itemName=data\ninterface Data {\n	input: any;             // original input data\n	data: any;              // item at the current index\n	$semaphore: Symbol;     // return this semaphore to break and exit the loop\n}\n```\n\n#### Returning\n\nAn array containing the returns from all execution rounds, maintaining the same order as the given parameter array.\n\n> Typically, need to specify a merge property in the `Write to output` step for use in subsequent pipeline steps.\n\n${transformer}\n\n${errorHandles}\n";
const docs$e = {
  stepEachItemName: markdown$U,
  stepEachOriginalContentName: markdown$T,
  eachStep: mergeStepDocs(markdown$S)
};
const markdown$R = "Retrieve the value of a specified property name from the input data. Property names can be connected with dots (`.`) to denote multiple\nhierarchical levels.\n\nFor example, if there is input data like `{a: {b: [{c: 3}, {c: 4}]}}`, then with the following definition, you can retrieve the\ncorresponding value:\n\n| Property | Value                   |\n|:---------|:------------------------|\n| `a`      | `{b: [{c: 3}, {c: 4}]}` |\n| `a.b`    | `[{c: 3}, {c: 4}]`      |\n| `a.b.c`  | `[3, 4]`                |\n\n> Please note that when attempting to retrieve a property value from `null`, `undefined`, or a primitive type (including `string`,\n> `number`, `boolean`, `symbol`, `bigint`), will always receive a `null`.\n";
const markdown$Q = "### Get property step\n\nThe get property pipeline step retrieves the value of the specified property name and finally returns the processed result to the memory\ncontext for further processing.\n\n#### Environment variables\n\nThis step does not use any environment variables.\n\n#### Step variables\n\nDefine the `property` attribute to retrieve the value from a specified position in the input data. The retrieval rules are as follows:\n\n- Property names can use dot (`.`) to connect, allowing access to values from nested objects.\n- Values based on `null` or `undefined` will return `null`.\n- Values based on any basic type (including `string`, `number`, `bigint`, `boolean`, `Symbol`) will return `null`.\n- If there are multiple levels of properties and one level's data is an array, the final result will be an array.\n\n#### Returning\n\nThe value of the specified property, can be any value.\n\n> Typically, need to specify a merge property in the `Write to output` step for use in subsequent pipeline steps.\n\n${transformer}\n\n${errorHandles}\n";
const docs$d = {
  stepGetPropertyProperty: markdown$R,
  getPropertyStep: mergeStepDocs(markdown$Q)
};
const markdown$P = "Specify whether the HTTP request includes body content. Without explicitly specifying whether to use the HTTP body, requests other\nthan `GET` will default to using it, whereas the `GET` request will default to ignoring it.\n";
const markdown$O = "Reprocess the endpoint URL read from the environment. The following parameters can be used during the decoration process:\n\n- `$endpointUrl`: The URL read from the environment based on the `System` and `Endpoint` definitions, can be a fully qualified URL\n  or just a\n  URL context or template,\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\nShould return the final URL to be used for the HTTP request. If this snippet is not defined, then use the URL configured in\nthe environment variables for access.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$N = "Remote HTTP service endpoint code. This code can represent a single API or a strongly related set of APIs, depending on how `Decorate URL`\nis used.\n";
const markdown$M = "### Http fetch step\n\nThe http fetch pipeline step calls remote HTTP services through defined parameters, and can process the returned results and perform related\nerror handling.\n\n${http}\n";
const markdown$L = "Build HTTP request body. The following parameters can be used during the build process:\n\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\nThis function could return anything. If the returned data is not `null`, `undefined`, and not a string, use `JSON.stringify` to convert it\nto a string. `null` and `undefined` essentially represent the absence of an HTTP body. If this snippet is not defined, the default behavior\nis to use `$factor` as the HTTP body after processing it accordingly.\n\n> Regardless, this part can be configured, but in scenarios where the body is not used, the configured snippet will be ignored.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$K = "Build HTTP request headers. The following parameters can be used during the build process:\n\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\nThis function should return an object (`Record<string, string>`) containing the headers to be used in the HTTP request. If the same key as\ndefined in the environment definition is used, the definition here takes precedence, and the headers in the environment definition will be\noverwritten. If this snippet is not defined, then use the headers in the environment definition.\n\n> Key of headers are NOT trimmed.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$J = "### Http get step\n\nThe http get pipeline step calls remote HTTP services through defined parameters, and can process the returned results and perform related\nerror handling. The Http method is `get`.\n\n${http}\n";
const markdown$I = "#### Environment variables\n\nAll environment variable names depend on the definitions of the `System` and `Endpoint` step variables. For convenience, using the\nfollowing\ndefinitions, which will be used in the environment variables:\n\n- `SYSTEM`: corresponding to the value of `System`,\n- `ENDPOINT`: corresponding to the value of `Endpoint`.\n\nAssuming the value of `System` is `s1` and the value of `Endpoint` is `order`, a system parameter\nnamed `CFG_ENDPOINTS_{SYSTEM}_{ENDPOINT}_URL` would thus be `CFG_ENDPOINTS_S1_ORDER_URL`.\n\n> Note that the values of `System` and `Endpoint` will be converted to uppercase, and any `.` characters will be replaced\n> with `_`. Additionally, based on common practices for environment parameter definitions, the values for `System` and `Endpoint`\n> cannot include `-`, `=` or whitespace characters.\n\nThis step uses the following system environment variables definition:\n\n- `CFG_ENDPOINTS_{SYSTEM}_{ENDPOINT}_URL`: Definition of the endpoint’s URL. This URL can be a fully qualified URL or just a URL context\n  or template, depending on whether and how the `Decorate URL` step variable is used to modify and obtain the final effective access URL,\n- `CFG_ENDPOINTS_{SYSTEM}_GLOBAL_HEADERS`: HTTP request headers used in the step, which are global and will be used in all requests. Defined\n  using the string format `key1=value[;key2=value2...[;keyN=valueN]]`,\n- `CFG_ENDPOINTS_{SYSTEM}_{ENDPOINT}_HEADERS`: HTTP request headers used in the step. Defined using the string\n  format `key1=value[;key2=value2...[;keyN=valueN]]`. If the same key as defined in the global definition is used, the definition here takes\n  precedence, and the value in the global definition will be overwritten,\n- `CFG_ENDPOINTS_{SYSTEM}_GLOBAL_TIMEOUT`: Timeout for the HTTP request in seconds. If not defined, the default value is -1, which means no\n  timeout,\n- `CFG_ENDPOINTS_{SYSTEM}_{ENDPOINT}_TIMEOUT`: Timeout for the HTTP request in seconds. If not defined, use the global definition instead.\n\n> Key of headers are trimmed automatically.\n\n> The timeout definition only takes effect when there is no `timeout` defined in the step variables.\n\n#### Step variables\n\nMaking a remote HTTP call requires many parameter definitions, some of which are mandatory and some optional.\n\n##### `System`\n\nCode for accessing the remote system. Generally, a remote system provides a set of APIs. To facilitate the use of the same defined data in\ndifferent steps, the remote system needs to be defined in code first. This variable is mandatory and case-insensitive.\n\n##### `Endpoint`\n\nDefine an endpoint code for the remote system. This code can represent a single API or a strongly related set of APIs, depending on\nhow `Decorate URL` is used.\n\n##### `Decorate URL`\n\nThis variable is optional and can be used to decorate the URL of the endpoint. The value can be a JavaScript snippet that will be executed\nas a JavaScript function. This function accepts the following input parameters:\n\n- `$endpointUrl`: The URL read from the environment based on the `System` and `Endpoint` definitions, can be a fully qualified URL\n  or just a\n  URL context or template,\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\nThis function should return the final URL to be used for the HTTP request. If this snippet is not defined, then use the URL configured in\nthe environment variables for access.\n\n##### `Http method`\n\nThe HTTP method to be used for the request. This variable is mandatory and case-insensitive. It is optional, with a default value of `post`.\n\n##### `Timeout`\n\nThe timeout for the HTTP request, in seconds. If not defined, use the timeout configured in the environment variables. If none of these are\ndefined, use `-1` as default, which means no timeout.\n\n##### `Generate request headers`\n\nThis variable is optional and can be used to build the HTTP request headers. The value can be a JavaScript snippet that will be executed\nas a JavaScript function. This function accepts the following input parameters:\n\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\nThis function should return an object (`Record<string, string>`) containing the headers to be used in the HTTP request. If the same key as\ndefined in the environment definition is used, the definition here takes precedence, and the headers in the environment definition will be\noverwritten. If this snippet is not defined, then use the headers in the environment definition.\n\n> Key of headers are NOT trimmed.\n\n##### `Use request body`\n\nSpecify whether the HTTP request uses the HTTP body content. This variable is optional and follows these rules:\n\n- Not defined: For requests other than `GET`, use the HTTP body by default,\n- `true`: Always use the HTTP body, regardless of the request method,\n- `false`: Always avoid using the HTTP body, regardless of the request method.\n\n> How to generate the HTTP body content is referenced by the definition of the `generateBody` variable.\n\n##### `Generate request body`\n\nThis variable is optional and can be used to build the HTTP request body. The value can be a JavaScript snippet that will be executed\nas a JavaScript function. This function accepts the following input parameters:\n\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\nThis function could return anything. If the returned data is not `null`, `undefined`, and not a string, use `JSON.stringify` to convert it\nto a string. `null` and `undefined` essentially represent the absence of an HTTP body. If this snippet is not defined, the default behavior\nis to use `$factor` as the HTTP body after processing it accordingly.\n\n##### `Read response body`\n\nThis variable is optional and can be used to read the HTTP response. The value can be a JavaScript snippet that will be executed\nas a JavaScript function. This function accepts the following input parameters:\n\n- `$response`: The response (`Response`, check [node-fetch](https://www.npmjs.com/package/node-fetch) for more details) object from the HTTP\n  request,\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\nThis function could return anything, and the returned data will be used as output data of this step. If this snippet is not defined, the\nresponse should be read as JSON by `Response.json()`. It is important to note that the response body will only be read if the response\nstatus is in the normal range (`1xx`, `2xx`, `3xx`); otherwise, it will skip to the error handling.\n\n> It is an async function, so `await` is available inside.\n\n##### `Response error handling`\n\nError handling for different HTTP response statuses is generally implemented in a way that only `4xx` and `5xx` statuses trigger\nerror handling. Each exception handling snippet is designed for a specific status; if a status does not have a defined handler, a\ndefault `UncatchableError` will be thrown, with an error code of `O03-00010`. Error handling can either rethrow the original exception,\nwrap the exception and rethrow it, or return data normally. If data is returned normally, it will be used as the output data for this step.\n\nThere are two special cases:\n\n- If the request times out, the status is `600`,\n- If the exception is not caused by the request itself, such as an exception thrown due to a problem with a certain configuration logic,\n  then,\n	- If the exception type is `UncatchableError`, no further handling will be performed and the exception will be directly thrown to the\n	  outer layer,\n	- Otherwise, use the exception handler with status `000` for processing.\n\n> DO NOT rethrow an error that is not an `UncatchableError` from the error handler, as it will be caught again by the error handler with\n> status `000`, which could lead to confusion.\n\nThe following parameters can be used during the build process:\n\n- `$options`: The content portion of `$errorCode`, `$url`, `$factor`, `$request`, `$response` data,\n- `$helpers` or `$`: Data manipulation helpers.\n\n> All handlers are async functions, so `await` is available inside.\n\n#### Returning\n\nThe step's return data is from the response of the HTTP request or error handling.\n\n> The returned data can still be further processed during the `Write to output` stage.\n\n${transformer}\n\n${errorHandles}\n";
const markdown$H = "HTTP methods are generally defined as `POST` and `GET`. Other commonly used methods include `PUT`, `DELETE`, and `PATCH`. However, `OPTIONS`\nis typically reserved for standard purposes and is generally not recommended for actual data communication. For a comprehensive list of HTTP\nmethods, you can refer to the [MDN HTTP request methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods).\n";
const markdown$G = "### Http post step\n\nThe http get pipeline step calls remote HTTP services through defined parameters, and can process the returned results and perform related\nerror handling. The Http method is `post`.\n\n${http}\n";
const markdown$F = "Read HTTP response. The following parameters can be used during the build process:\n\n- `$response`: The response (`Response`, check [node-fetch](https://www.npmjs.com/package/node-fetch) for more details) object from the HTTP\n  request,\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\nThis function could return anything. It is important to note that the response body will only be read if the response status is in the\nnormal range (`1xx`, `2xx`, `3xx`); otherwise, it will skip to the error handling.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$E = "Error handling for different HTTP response statuses is generally implemented in a way that only `4xx` and `5xx` statuses trigger\nerror handling. Each exception handling snippet is designed for a specific status; if a status does not have a defined handler, a\ndefault `UncatchableError` will be thrown, with an error code of `O03-00010`. Error handling can either rethrow the original exception,\nwrap the exception and rethrow it, or return data normally. If data is returned normally, it will be used as the output data for this step.\n\nThere are two special cases:\n\n- If the request times out, the status is `600`,\n- If the exception is not caused by the request itself, such as an exception thrown due to a problem with a certain configuration logic,\n  then,\n	- If the exception type is `UncatchableError`, no further handling will be performed and the exception will be directly thrown to the\n	  outer layer,\n	- Otherwise, use the exception handler with status `000` for processing.\n\n> DO NOT rethrow an error that is not an `UncatchableError` from the error handler, as it will be caught again by the error handler with\n> status `000`, which could lead to confusion.\n\nThe following parameters can be used during the build process:\n\n- `$options`: The content portion of `$errorCode`, `$url`, `$factor`, `$request`, `$response` data,\n- `$helpers` or `$`: Data manipulation helpers.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$D = "Remote HTTP service provider system code.\n\n";
const markdown$C = "The timeout for the HTTP request, in seconds. If not defined, use the timeout configured in the environment variables. If none of these are\ndefined, use `-1` as default, which means no timeout.\n";
const docs$c = (() => {
  const httpDocs = mergeStepDocs(markdown$I, false);
  return {
    stepHttpSystem: markdown$D,
    stepHttpEndpoint: markdown$N,
    stepHttpDecorateUrl: markdown$O,
    stepHttpMethod: markdown$H,
    stepHttpTimeout: markdown$C,
    stepHttpGenerateHeaders: markdown$K,
    stepHttpBodyUsed: markdown$P,
    stepHttpGenerateBody: markdown$L,
    stepHttpReadResponse: markdown$F,
    stepHttpResponseErrorHandles: markdown$E,
    httpFetchStep: mergeStepDocsFreely(markdown$M, { "http": httpDocs }),
    httpGetStep: mergeStepDocsFreely(markdown$J, { "http": httpDocs }),
    httpPostStep: mergeStepDocsFreely(markdown$G, { "http": httpDocs })
  };
})();
const markdown$B = "The return value of the function will be used as the input data for each sub-step, and this function will be executed before each sub-step.\nIf the return data contains shared memory data, modifications to this data in any sub-step may affect other sub-steps. The following\nparameters can be used during the clone process:\n\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$A = "Check to receive only the result data of the first completed sub-step; otherwise, receive the result data of all sub-steps in the form of an\narray.\n";
const markdown$z = "### Parallel sets step\n\nThe parallel sets pipeline step includes a set of sub-step definitions, where all the actual processing logic is executed within the\nsub-steps. Each substep is executed in parallel, and it can be specified whether to collect only the result of the first completed sub-step\nor to collect the results of all sub-steps.The input data for each sub-step is specified by `Pick from input`.\n\n> No matter how the collection of sub-step execution results is specified, if any sub-step throws an exception before the results are\n> collected, the entire parallel process is terminated. Note that the completion of a step does not necessarily mean that other\n> asynchronously executed substeps will be terminated. Please refer\n> to [Promise.race](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise.race) for more details.\n\n> The parallel step relies on the exception raised by the sub-step. If the sub-step encounters an exception and is caught and processed by\n> the exception handler without re-throwing an exception, it is considered to have ended normally.\n\n#### Environment variables\n\nThis step does not use any environment variables.\n\n#### Step variables\n\n| Variable name | Type    | Description                                                                                                                  |\n|---------------|---------|------------------------------------------------------------------------------------------------------------------------------|\n| cloneData     | snippet | Provide a snippet to copy data. The return value of this snippet will be used as the input data for each sub-step. Optional. |\n| race          | boolean | When set to `true`, only the result data of the first completed sub-step will be received. Optional, default is `false`.     |\n\n> If `cloneData` snippet is not provided, the input data for each sub-step will be the same memory data, which is shared among all\n> sub-steps. Therefore, any modification of this memory data by one sub-step may affect the other sub-steps.\n\n#### Returning\n\nUse the return from the first resolved sub-step as the return data. If defined to receive the results of all sub-steps, the data will be an\narray; otherwise, it will be the result data returned by the first completed sub-step.\n\n> It can still be further decorated during `Write to output` stage for the return data.\n\n${transformer}\n\n${errorHandles}\n";
const docs$b = {
  stepParallelRace: markdown$A,
  stepParallelCloneData: markdown$B,
  parallelStep: mergeStepDocs(markdown$z)
};
const markdown$y = "API's authentication and authorization definition. This can be one of the following methods:\n\n- No authorization required, or anonymous users allowed.\n- Authentication required, but no authorization necessary. That is, any authenticated user can access.\n- Both authentication and authorization required, with the ability to set one or more permission codes. Access is granted if the\n  authenticated user possesses at least one of the set permission codes.\n";
const markdown$x = "If using data from the request body, the data portion of the body must be in valid JSON format.\n\n> `GET` requests by default do not parse the request body, while other requests (methods) default to parsing the request body.\n";
const markdown$w = "Used for locating configurations within the application, required fields, and must be globally unique.";
const markdown$v = "Specify whether the current configuration is effective.\n\n> Note that configurations that are not effective will not be loaded when the application starts, so the effective status cannot be switched\n> at runtime.";
const markdown$u = "Indicate whether the returned response is a file.\n";
const markdown$t = "Specify the response headers to be outputted to the client, including names and values.\n\nThe syntax rules are as follows:\n\n- Use a colon to connect the name and value, for example `x-name: value`. Note that only the content before the first colon is considered\n  the name, and the remaining part is the value,\n- If multiple are needed, they should be written on multiple lines,\n- The spaces around the name and value will be automatically removed.\n";
const markdown$s = "To accept uploaded files, multiple attributes are required:\n\n- Specify name: Each line represents a name. For multiple names, define them on separate lines,\n- Each name can specify a max count by appending a colon followed by a number after the name,\n	- `<= 0` indicates unlimited files for that name,\n	- `>= 1` indicates a maximum count,\n- Specify maximum file size: Use plain numbers for bytes, or append `k`, `K`, `m`, `M` for kilobytes and megabytes,\n- Specify file type [mime type](https://docs.nestjs.com/techniques/file-upload#file-validation): Separate multiple types with commas or\n  semicolons.\n\n> The maximum file size and file type specifications apply to all files.\n\n> When defining upload file parameters, due to HTTP protocol specifications requiring the use of Form Data, the `body` supports only\n> key-value pairs. Therefore, the parsed data forms a single-layer JSON object and no longer retains a multi-layered structure.\n";
const markdown$r = "To specify receiving multiple request headers, use commas or semicolons as separators.\n";
const markdown$q = "Only executed when the application starts, during which the system does not provide any parameters to the pipeline.\n";
const markdown$p = "`GET` requests by default do not parse the request body, while other requests (methods) default to parsing the request body.\n";
const markdown$o = "Parse parameters from the [route](https://docs.nestjs.com/controllers#route-parameters). For example, can parse the `name`\nand `age` parameters from `https://example.com/:name/:age`.\n\n> The parameter names are automatically synchronized here when modifying the `route` value.\n\n> Although parameters are defined in the `route`, it is still possible to ignore them here, but this is not the recommended approach. \n";
const markdown$n = "## Overview\n\nThe core concept of `@rainbow-o23` is pipeline, where all logic is defined through pipeline and its steps. There are three different forms\nof\npipeline based on how it is defined:\n\n- Pipeline, which can optionally be exposed as an API. To differentiate, we generally refer to pipelines that are exposed as\n  APIs as `Pipeline as API`, and pipelines that are not exposed as APIs as `pipeline`. In all documents, we will use\n  this name to refer to it. If not specifically labeled as `as API`, it means that this pipeline has not been exposed as an API.\n- Step set, composed of a group of steps,\n- Step: based on the definition of a single step.\n\nIf defined as a pipeline and is exposed as an API, it does not allow other pipeline steps to call it, otherwise it does. Therefore, if\ncertain logic combinations can be reused, they should be defined as a pipeline/steps set/step.\n\n## Common attributes\n\nAll definitions should have the following attributes:\n\n- A `code` attribute for identification within the system, so the value of the `code` attribute is globally unique.\n- A `type` attribute is used to indicate the type of this definition, and the value of the `type` attribute must be one\n  of `pipeline`, `step-sets`, or `step`.\n- An `enabled` attribute is used to indicate whether this definition is effective, and the value of the `enabled` attribute must be\n  either `true` or `false`. If not defined, this definition is considered to be effective by default.\n\n## Pipeline as API\n\nIf the definition contains a `route` attribute and specifies a URI, it is considered to be published as an API. A pipeline published\nas an API includes all standard HTTP protocol elements:\n\n- `route`, URI of API. Excluding the scheme, domain name, and port in the URL, the application configuration can also specify the path\n  context,\n	- To facilitate the definition and parsing of data contained in the `route`, you can use `pathParams` for definition. `pathParams` can\n	  be a list of parameters, or you can use `true` to define receiving all valid path parameters. Please note that the definition of path\n	  parameters must conform to the [nestjs](https://docs.nestjs.com/controllers#route-parameters) standard.\n- `authorizations`, a list of authorizations required to access the API. It can remain unset, be anonymous, authenticated only, or be\n  assigned a set of role codes.\n- `method`, supporting `get`, `post`, `put`, `patch`, and `delete`,\n- `headers`, a list of headers that need to be parsed, or `true` to parse all headers,\n- `queryParams`, a list of query parameters that need to be parsed, or `true` to parse all query parameters,\n- `body`, the content of the HTTP body is in JSON format. To better adapt to common practices of HTTP API usage:\n	- When `method` is specified as `get` and the `body` parameter is not explicitly set to `true`, the system defaults to ignoring the HTTP\n	  body content,\n	- When `method` is not specified as `get` and the `body` parameter is not explicitly set to `false`, the system defaults to parsing the\n	  HTTP body content,\n- `files`, a list of files that need to be parsed, or `true` to parse all files.\n\nThere are also some HTTP response definitions:\n\n- `exposeHeaders`, a set of headers that need to be pushed to the client,\n- `exposeFile`, indicating whether the response data is a file.\n\n## Pipeline\n\nIf the definition does not contain a `route` attribute, it is considered a pipeline. A pipeline can be called by other pipeline steps.\n\nA pipeline always includes at least one step, and its behavior is entirely determined by the steps defined within it.\n\nA pipeline also has a special property `initOnly`, which if declared as `true`, indicates that this pipeline will only be\nexecuted when the application starts, and the application will not provide any parameters during execution.\n\n## Step set\n\nStep set, as the name suggests, can define a set of steps. They can also define how their built-in steps are executed, typically in the\nfollowing ways:\n\n- Synchronous serial,\n- Asynchronous serial,\n- Synchronous parallel,\n- Conditional execution,\n- Loop execution (only for input data as an array),\n- Start a database transaction.\n\nBy combining the various types of step collections mentioned above, you can construct execution sequences suitable for different scenarios.\n\n## Step\n\nSteps can be any type of step definition, including step sets. Logically, a step set is a step which includes a set of sub steps, and\ndifferent step sets define the way their sub steps are executed. Steps are implemented by different standard step components for\ndifferent purposes. Here are some built-in standard steps:\n\n- Retrieve values from models or remove attributes,\n- Execute snippets,\n- Generate snowflake IDs,\n- Call predefined pipelines or steps,\n- Make remote HTTP API calls,\n- Read from or write to databases.\n\nAdditionally, you can also obtain the following steps support through the `@rainbow-o23` standard extension library:\n\n- Print PDF, Word, Excel, CSV,\n- Manipulate AWS S3 objects.\n\n> The latest step support can be found on [Github](https://github.com/InsureMO/rainbow-o23).\n";
const markdown$m = "Parse parameters from the [URL Search](https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams). For example, can parse the `name`\nand `age` parameters from `https://example.com/?name=Jonathan%20Smith&age=18`.\n\nTo specify receiving multiple query parameters, use commas or semicolons as separators.\n";
const markdown$l = "The route of the API, excluding the HTTP protocol scheme, domain name, and port parts. The context of the URL path can also be\nspecified via the system environment variable `CFG_APP_CONTEXT`.\n\n> It should start with `/`.\n\n`route` syntax can be referenced from [nestjs - routing](https://docs.nestjs.com/controllers#routing)\nand [nestjs - route parameters](https://docs.nestjs.com/controllers#route-parameters), as well\nas [express](https://expressjs.com/en/guide/routing.html). Generally, there are the following rules:\n\n- Use regex for matching, but it's not recommended.\n- Define parameters with `:` prefix, for example `:name`, ensuring parameter names conform to the regex pattern `[A-Za-z0-9_]`.\n- For parsing multiple parameters, use `/`, `.`, or `-` as separators. \n";
const markdown$k = "- `Pipeline`: A predefined pipeline that can be invoked by other pipelines and can also be executed during application\n  initialization. If specified to execute during application initialization, it cannot be used at runtime, and the initialization is\n  parameterless.\n- `Pipelne as API`: A predefined pipeline exposed as an API, which cannot be invoked by other pipelines.\n- `Step Set`: A predefined set of steps that can be invoked by other pipelines.\n- `Step`: A predefined step that can be invoked by other pipelines.\n";
const docs$a = {
  pipeline: markdown$n,
  pipelineCode: markdown$w,
  pipelineEnabled: markdown$v,
  pipelineType: markdown$k,
  pipelineInitOnly: markdown$q,
  pipelineRoute: markdown$l,
  pipelineAuthorizations: markdown$y,
  pipelineMethod: markdown$p,
  pipelineHeaders: markdown$r,
  pipelinePathParams: markdown$o,
  pipelineQueryParams: markdown$m,
  pipelineBody: markdown$x,
  pipelineFiles: markdown$s,
  pipelineExposeFile: markdown$u,
  pipelineExposeHeaders: markdown$t
};
const markdown$j = "Specify the unique code of the pipeline.\n";
const markdown$i = "### Ref pipeline step\n\nThe ref pipeline step calls the specified pipeline to complete the corresponding logic processing.\n\n#### Environment variables\n\nThis step does not use any environment variables.\n\n#### Step variables\n\nDefine the `code` attribute to specify the pipeline that needs to be invoked At runtime, the pipeline definition needs to be guaranteed to\nbe loaded.\n\n#### Returning\n\nUse the return data from the called pipeline as the return data for this step.\n\n${transformer}\n\n${errorHandles}\n";
const docs$9 = {
  stepRefPipelineCode: markdown$j,
  refPipelineStep: mergeStepDocs(markdown$i)
};
const markdown$h = "Specify the unique code of the pipeline step.\n";
const markdown$g = "### Ref step step\n\nThe ref pipeline step calls the specified pipeline step to complete the corresponding logic processing.\n\n#### Environment variables\n\nThis step does not use any environment variables.\n\n#### Step variables\n\nDefine the `code` attribute to specify the pipeline step that needs to be invoked At runtime, the pipeline step definition needs to be\nguaranteed to be loaded.\n\n#### Returning\n\nUse the return data from the called pipeline step as the return data for this step.\n\n${transformer}\n\n${errorHandles}\n";
const docs$8 = {
  stepRefStepCode: markdown$h,
  refStepStep: mergeStepDocs(markdown$g)
};
const markdown$f = "### Routes step\n\nThe routes pipeline step provides one or more conditional routes and one `otherwise` route. Each conditional route has a check, and if the\ncheck passes, the set of steps defined for that route is executed. If the check fails, it proceeds to the next conditional route or to the\n`otherwise` route when all conditional routes are not satisfied. The `otherwise` route is allowed to be absent.\n\n#### Environment variables\n\nThis step does not use any environment variables.\n\n#### Step variables\n\nDefine the `check` attribute for each route, which is a JavaScript script that will ultimately be executed as a JavaScript function. This\nfunction accepts the following input parameters:\n\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\n> It is important to note that the `$factor` passed to `check` is provided by `Pick from input`, but `Pick from input` does not affect the\n> input parameters of the sub-steps (unless memory data is modified).\n\n#### Returning\n\nThe return data for this step is determined by the return data of the route executed at runtime.\n\n${transformer}\n\n${errorHandles}\n";
const docs$7 = {
  routesStep: mergeStepDocs(markdown$f)
};
const markdown$e = "### Sets step\n\nThe sets pipeline step includes a set of sub-step definitions, where all the actual processing logic is executed within the sub-steps. The\ninput data for the first sub-step is specified by `Pick from input`.\n\n#### Environment variables\n\nThis step does not use any environment variables.\n\n#### Step variables\n\nThis step has no other properties defined except for using the `steps` attribute to define sub-steps.\n\n#### Returning\n\nUse the return from the final sub-step as the return data.\n\n> It can still be further decorated during `Write to output` stage for the return data.\n\n${transformer}\n\n${errorHandles}\n";
const docs$6 = {
  setsStep: mergeStepDocs(markdown$e)
};
const markdown$d = "Use snippet processing for data processing. The following parameters can be used during the conversion process:\n\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\n> It is an async function, so `await` is available inside.\n";
const markdown$c = "### Snippet step\n\nThe snippet pipeline step use a snippet (in JavaScript syntax) to process the data. Conceptually, it can be understood as a function that\nperforms appropriate operations on the given parameters and finally returns the processed result to the memory context for further\nprocessing.\n\n#### Environment variables\n\nThis step does not use any environment variables.\n\n#### Step variables\n\nDefine the `snippet` attribute, which is a JavaScript script that will ultimately be executed as a JavaScript function. This function\naccepts the following input parameters:\n\n- `$factor`: The content portion of the request data, excluding context data,\n- `$request`: The entire request data, including both content and context,\n- `$helpers` or `$`: Data manipulation helpers.\n\n#### Returning\n\nThe snippet's return data follows these conventions:\n\n- If it returns `undefined`, `null`, or no value returned, the context of the entire pipeline is considered unchanged,\n- If it returns `$.$clearContextData()`, the context is considered cleared (this is actually a specific `Symbol` object that, apart from\n  serving as a flag, has no practical significance),\n- Other data is directly returned as the response data.\n\n> The returned data can still be further processed during the `Write to output` stage.\n\n${transformer}\n\n${errorHandles}\n";
const docs$5 = {
  stepSnippetSnippet: markdown$d,
  snippetStep: mergeStepDocs(markdown$c)
};
const markdown$b = "### Snowflake step\n\nThe snowflake pipeline step is used to generate a unique, incrementing sequence number. This sequence number is typically used for scenarios\nsuch as database primary keys or unique identifiers in memory. The sequence number is of type string and contains only numeric characters.\n\n> Monotonic increment is limited to within a single node.\n\n#### Environment variables\n\nThis step uses the following system environment variable definition:\n\n- `CFG_SNOWFLAKE_SHARD_ID`: A number between `0` and `1023`, optional, with a default value of `1`. In a multi-node scenario, each node\n  should be assigned a different shard id to ensure that the sequence numbers do not conflict.\n\n#### Step variables\n\nThis step does not use any step variables.\n\n#### Returning\n\nA string containing a unique serial number.\n\n> Typically, need to specify a merge property in the `Write to output` step for use in subsequent pipeline steps.\n\n${transformer}\n\n${errorHandles}\n";
const docs$4 = {
  snowflakeStep: mergeStepDocs(markdown$b)
};
const markdown$a = "TypeORM steps use transaction names to identify transactions, steps can be grouped under a transaction. If transaction is declared as\nautonomous, the step will be executed in the default transaction (autonomous transaction). Essentially, steps within a transaction should be\nnested in a TypeORM transactional step and have the same transaction name.\n\n> Transactional steps can be nested, meaning a transactional step can contain another transactional step as a sub-step, even if they have\n> different transaction names.\n";
const markdown$9 = "Specify data source. If using dynamic environment variables for specification, you need to indicate the key of the environment variable,\nsuch as key `db.default` corresponding to the `CFG_DB_DEFAULT` environment variable name.\n";
const markdown$8 = "TypeORM steps use transaction names to identify transactions, steps can be grouped under a transaction. Essentially, steps within a\ntransaction should be nested in a TypeORM transactional step and have the same transaction name.\n\n> Transactional steps can be nested, meaning a transactional step can contain another transactional step as a sub-step, even if they have\n> different transaction names.\n";
const markdown$7 = '### TypeORM\n\n`@rainbow-o23` provides a set of pipeline steps for database operations based on [TypeORM](https://typeorm.io/), including transaction\nsupport, SQL read and write. Generally, it is recommended to use SQL for data operations. `@rainbow-o23` has enhanced SQL syntax to better\ninteract with in-memory data.\n\n> Please refer to [@rainbow-o23](https://github.com/InsureMO/rainbow-o23/blob/main/o23-n3/README.md#database-typeorm-steps) for more\n> information on configuring data sources.\n\n#### Datasource\n\nEach TypeOrm step must specify a datasource, which is configured in environment. If using dynamic environment variables for specification,\nyou need to indicate the key of the environment variable, such as key `db.default` corresponding to the `CFG_DB_DEFAULT` environment\nvariable name.\n\n#### Transaction\n\nTypeORM steps use transaction names to identify transactions, steps can be grouped under a transaction. If transaction is declared as\nautonomous, the step will be executed in the default transaction (autonomous transaction). Essentially, steps within a transaction should be\nnested in a TypeORM transactional step and have the same transaction name.\n\n> Transactional steps can be nested, meaning a transactional step can contain another transactional step as a sub-step, even if they have\n> different transaction names.\n\n#### Native SQL Support & Enhancement\n\nSQL supports native database syntax. At the same time, `@rainbow-o23` enhances SQL syntax, allowing the use of the `$property` syntax to\nretrieve corresponding data from data objects, also supports multi-level property names, connected by `.`. For example, `$person.name`\nrepresents that `person` is an object and `name` is a property under `person`. The following are the supported syntax features:\n\n- `IN ($...names)`: `one-of`, `names` should be an array,\n- `LIKE $name%`: `starts-with`,\n- `LIKE $%name`: `ends-with`,\n- `LIKE $%name%`: `contains`.\n\n> Name mapping is case-sensitive.  \n> `LIKE` is case-sensitive.\n\nSince different databases have varying degrees of support for dialects, `@rainbow-o23` also provides appropriate enhanced support for this:\n\n- For pagination, `$.limit($offset, $limit)` will be translated and executed in the appropriate dialect. For example,\n	- `MySQL` uses `LIMIT $offset, $limit`,\n	- `PostgreSQL` uses `OFFSET $offset LIMIT $limit`.\n	- `MSSQL` and `Oracle` use `OFFSET $offset ROWS FETCH NEXT $limit ROWS ONLY`,\n		- `MSSQL` requires an `ORDER BY` clause for pagination SQL. If there is no `ORDER BY` clause, will\n		  use `ORDER BY 1 OFFSET $offset ROWS FETCH NEXT $limit ROWS ONLY`.\n- For JSON column, because some databases (such as MSSQL) do not have a JSON column type, they cannot automatically replace strings in the\n  result set with JSON objects,\n	- Use `config as "config.@json"` to explicitly indicate that the `config` column is of JSON data type.\n	- Use `$config.@json` to explicitly indicate that the `config` property of given parameters is of JSON data type.\n- For boolean column which use numeric(int/smallint/tinyint) as storage type, because some databases (such as PostgreSQL) cannot\n  automatically convert boolean values in memory to numeric 0 or 1 in the database,\n	- Use `enabled as "enabled.@bool"` to explicitly indicate that the `enabled` column is of boolean in-memory and numeric in database data\n	  type.\n	- Use `$enabled.@bool` to explicitly indicate that the `enabled` property of given parameters is of boolean in-memory and numeric in\n	  database data type.\n- For datetime (MySQL, MSSQL) / timestamp (Oracle, PostgreSQL) column,\n	- Use `created_at as "createdAt.@ts"` to explicitly indicate that the `createdAt` column is of string in-memory and timestamp in\n	  database data type.\n	- Use `$createdAt.@ts` to explicitly indicate that the `createdAt` property of given parameters is of string in-memory and timestamp in\n	  database data type.\n\n> It is recommended that if you need to consider support for multiple database dialects, using enhanced syntax will make it easier to write\n> SQL. If you only need to support a specific database, then using its standard syntax is sufficient.\n\n> It is important to note that some databases (such as `PostgreSQL`) do not differentiate column names by case. This can affect the property\n> names of the returned objects in the result set (usually recommended in camel case). Therefore, even though it is not a syntax\n> enhancement, it is strongly recommended to use aliases to standardize the column names in the returned result set, for\n> example, `PERSON_NAME AS "personName"`, please pay attention to the use of quotation marks to correctly preserve the case.\n\n- When given data is an array, provide SQL written using standard binding variable placeholders (sequence numbers),\n	- `MySQL` uses `?`,\n	- `PostgreSQL` uses `$1`, `$2`, ...,\n	- `MSSQL` uses `@0`, `@1`, ...,\n	- `Oracle` uses `:0`, `:1`, ...,\n- When given data is a record, provide SQL written using named binding variable placeholders.\n';
const docs$3 = {
  stepTypeOrmDatasource: markdown$9,
  stepTypeOrmTransaction: markdown$8,
  stepTypeOrmAutonomousOrTransaction: markdown$a,
  stepTypeOrm: markdown$7
};
const markdown$6 = "The script is\na function that takes the following parameters:\n\n- `$runner` represents the [QueryRunner](https://orkhan.gitbook.io/typeorm/docs/query-runner),\n- `$factor` represents the incoming data,\n- `$request` represents the original request data (including incoming data and a context), it is not recommended,\n- `$helpers` represents function supporting, and it has a shortcut `$`.\n";
const markdown$5 = "### TypeOrm by snippet step\n\nUse snippets to handle database data.\n\n#### Environment variables\n\nThis step does not use any environment variables, unless an environment variable key is used when specifying the data source.\n\n#### Step variables\n\nUse the `snippet` property to define a JavaScript script. The returned data will be used as return data for this step. The script is\na function that takes the following parameters:\n\n- `$runner` represents the [QueryRunner](https://orkhan.gitbook.io/typeorm/docs/query-runner),\n- `$factor` represents the incoming data,\n- `$request` represents the original request data (including incoming data and a context), it is not recommended,\n- `$helpers` represents function supporting, and it has a shortcut `$`.\n\nA TypeOrm Query Runner instance, `$runner`, will be passed to the snippet, and the snippet can use this instance to perform any operation on\nthe database.\n\n> Do not need to manually start a transaction, whether using autonomous transaction or if it is nested within transaction step sets.\n> The `$runner` instance passed to the snippet will automatically start a transaction.\n\n#### Returning\n\nUse the return data from snippet as the return data for this step.\n\n${typeorm}\n\n${transformer}\n\n${errorHandles}\n";
const docs$2 = {
  stepTypeOrmSnippet: markdown$6,
  typeOrmBySnippetStep: mergeStepDocsAnd(markdown$5, { "${typeorm}\n": docs$3.stepTypeOrm })
};
const markdown$4 = "### TypeOrm bulk save by sql step\n\nUse sql to save a collection of data to the database.\n\n#### Environment variables\n\nThis step does not use any environment variables, unless an environment variable key is used when specifying the data source.\n\n#### Step variables\n\nUse the `sql` property to define a SQL sentence. The returned data will be used as return data for this step.\n\n#### Input\n\nThe input data should be an array of array or object, each item represents a row of data to be saved.\n\n```ts\nexport interface InputData {\n	// SQL sentence to save data, could be INSERT, UPDATE or DELETE.\n	// If SQL is defined in the parameters, it takes precedence over the SQL predefined in the steps.\n	sql?: string;\n	// data to save\n	items?: Array<Array<any> | Record<string, any>>;\n}\n```\n\n#### Returning\n\nUse the return data from sql as the return data for this step, returned data follows the following types:\n\n```ts\nexport type ReturnedOfInserts = Array<string | number | bigint>;\nexport type ReturnedOfUpdatesOrDeletes = Array<number>;\n```\n\n> for MSSQL, the return data could be anything, depends on the `OUTPUT` statement in SQL.\n\n${typeorm}\n\n${transformer}\n\n${errorHandles}\n";
const markdown$3 = "### TypeOrm load many by sql step\n\nUse sql to load data from the database, an array of records will be returned.\n\n#### Environment variables\n\nThis step does not use any environment variables, unless an environment variable key is used when specifying the data source.\n\n#### Step variables\n\nUse the `sql` property to define a SQL sentence. The returned data will be used as return data for this step.\n\n#### Input\n\nThe input data should be an array or a record, representing a row of data to be saved.\n\n```ts\nexport interface InputData {\n	// SQL sentence to load data, should be SELECT\n	// If SQL is defined in the parameters, it takes precedence over the SQL predefined in the steps.\n	sql?: string;\n	// criteira to load\n	params?: Array<any> | Record<string, any>;\n}\n```\n\n#### Returning\n\nUse the return data from sql as the return data for this step, should be an empty array.\n\n${typeorm}\n\n${transformer}\n\n${errorHandles}\n";
const markdown$2 = "### TypeOrm load one by sql step\n\nUse sql to load data from the database, only one record will be returned.\n\n#### Environment variables\n\nThis step does not use any environment variables, unless an environment variable key is used when specifying the data source.\n\n#### Step variables\n\nUse the `sql` property to define a SQL sentence. The returned data will be used as return data for this step.\n\n#### Input\n\nThe input data should be an array or a record, representing a row of data to be saved.\n\n```ts\nexport interface InputData {\n	// SQL sentence to load data, should be SELECT\n	// If SQL is defined in the parameters, it takes precedence over the SQL predefined in the steps.\n	sql?: string;\n	// criteira to load\n	params?: Array<any> | Record<string, any>;\n}\n```\n\n#### Returning\n\nUse the return data from sql as the return data for this step, could be a record, or `undefined` when nothing found.\n\n${typeorm}\n\n${transformer}\n\n${errorHandles}\n";
const markdown$1 = "### TypeOrm save by sql step\n\nUse sql to save given data (one record only) to the database.\n\n#### Environment variables\n\nThis step does not use any environment variables, unless an environment variable key is used when specifying the data source.\n\n#### Step variables\n\nUse the `sql` property to define a SQL sentence. The returned data will be used as return data for this step.\n\n#### Input\n\nThe input data should be an array or a record, representing a row of data to be saved.\n\n```ts\nexport interface InputData {\n	// SQL sentence to save data, could be INSERT, UPDATE or DELETE.\n	// If SQL is defined in the parameters, it takes precedence over the SQL predefined in the steps.\n	sql?: string;\n	// data to save\n	values?: Array<any> | Record<string, any>;\n}\n```\n\n#### Returning\n\nUse the return data from sql as the return data for this step, returned data follows the following types:\n\n```ts\nexport type ReturnedOfInsert = string | number | bigint;\nexport type ReturnedOfUpdateOrDelete = number;\n```\n\n> for MSSQL, the return data could be anything, depends on the `OUTPUT` statement in SQL.\n\n${typeorm}\n\n${transformer}\n\n${errorHandles}\n";
const sql = "Open the `Native SQL Support & Enhancement` section in the left-side step for more information.";
const docs$1 = {
  stepTypeOrmBulkSaveBySqlSql: sql,
  typeOrmBulkSaveBySqlStep: mergeStepDocsAnd(markdown$4, { "${typeorm}\n": docs$3.stepTypeOrm }),
  stepTypeOrmSaveBySqlSql: sql,
  typeOrmSaveBySqlStep: mergeStepDocsAnd(markdown$1, { "${typeorm}\n": docs$3.stepTypeOrm }),
  stepTypeOrmLoadManyBySqlSql: sql,
  typeOrmLoadManyBySqlStep: mergeStepDocsAnd(markdown$3, { "${typeorm}\n": docs$3.stepTypeOrm }),
  stepTypeOrmLoadOneBySqlSql: sql,
  typeOrmLoadOneBySqlStep: mergeStepDocsAnd(markdown$2, { "${typeorm}\n": docs$3.stepTypeOrm })
};
const markdown = "### TypeOrm transactional step\n\nCreate a transaction with given name, and execute the sub-steps within the transaction.\n\n#### Environment variables\n\nThis step does not use any environment variables, unless an environment variable key is used when specifying the data source.\n\n#### Step variables\n\nThis step has no other properties defined except for using the `steps` attribute to define sub-steps.\n\n#### Returning\n\nUse the return from the final sub-step as the return data.\n\n> It can still be further decorated during `Write to output` stage for the return data.\n\n${typeorm}\n\n${transformer}\n\n${errorHandles}\n";
const docs = {
  typeOrmTransactionalStep: mergeStepDocsAnd(markdown, { "${typeorm}\n": docs$3.stepTypeOrm })
};
const HelpDocs = {
  ...docs$a,
  ...docs$i,
  ...docs$5,
  ...docs$d,
  ...docs$f,
  ...docs$4,
  ...docs$c,
  ...docs$6,
  ...docs$h,
  ...docs$e,
  ...docs$b,
  ...docs$g,
  ...docs$7,
  ...docs$3,
  ...docs$2,
  ...docs$1,
  ...docs,
  ...docs$9,
  ...docs$8
};
const elementCode = {
  code: "code",
  label: Labels.Code,
  anchor: "code",
  badge: (model) => {
    if (VUtils.isNotBlank(model.code)) {
      return model.code.trim();
    } else {
      return React.createElement(ConfigurableElementBadgeMissed, null);
    }
  },
  editor: (props) => {
    const { model, onValueChanged } = props;
    const onValueChange = (value) => {
      model.code = value;
      onValueChanged();
    };
    return React.createElement(UnwrappedInput, { onValueChange, value: model.code ?? "" });
  },
  helpDoc: HelpDocs.pipelineCode
};
const trim = (value) => {
  if (value == null) {
    return void 0;
  } else if (typeof value === "string") {
    value = value.trim();
    return VUtils.isBlank(value) ? void 0 : value;
  } else {
    return value;
  }
};
const indent = "  ";
const indentN = (times) => indent.repeat(times);
const CommonElementEditorStyles = {
  dropdown: { justifySelf: "start", width: "unset", minWidth: "min(200px, 100%)" }
};
const NotAvailableDropdownOptionLabel = qe.span`
    color: ${CssVars.DANGER_COLOR};

    > span {
        margin-left: 0.5em;
    }
`;
const NotAvailableDropdownOption = (props) => {
  const { label } = props;
  return React.createElement(
    NotAvailableDropdownOptionLabel,
    null,
    label,
    React.createElement("span", null, Labels.IllegalDropdownOptionSuffix)
  );
};
const CheckAndValueEditor = qe.div.attrs(({ inputWidth }) => {
  return {
    style: {
      "--input-width": utils$2.toCssSize(inputWidth)
    }
  };
})`
    > div[data-w=d9-deco-input] {
        > span[data-w=d9-deco-lead]:first-child {
            padding-right: 0;

            > div[data-w=d9-checkboxes] {
                border-top-right-radius: 0;
                border-bottom-right-radius: 0;

                > span[data-w=d9-checkboxes-option]:first-child {
                    padding-right: calc(${CssVars.INPUT_INDENT} + 4px);
                    margin-right: 0;

                    > div[data-w=d9-checkbox] {
                        transform: scale(0.8);
                    }
                }
            }
        }

        > input {
            flex-grow: unset;
            /* noinspection CssUnresolvedCustomProperty */
            min-width: var(--input-width);
        }
    }
`;
const VerticalLinesEditorContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-edit-dialog-specific-element-editor-vertical" })`
    display: grid;
    position: relative;
    grid-template-columns: 1fr;
    grid-row-gap: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_SPECIFIC_GRID_ROW_GAP};

    > div[data-w=d9-deco-input][data-di-prefix-text=true] {
        &[data-disabled=true] > span:first-child {
            cursor: default;
            background-color: ${CssVars.DISABLE_COLOR};
        }

        > span:first-child {
            font-size: ${PlaygroundCssVars.EDIT_DIALOG_CONFIGURABLE_ELEMENT_SPECIFIC_INPUT_PREFIX_FONT_SIZE};
            transition: background-color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};
        }
    }
`;
const VerticalLinesEditor = (props) => {
  return React.createElement(VerticalLinesEditorContainer, null, props.children);
};
const CodeEditorContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-code-editor" })`
    display: block;
    position: relative;
    width: 100%;

    &[data-max=true] {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: ${CssVars.BACKGROUND_COLOR};
        border: 0;
        border-radius: 0;
        z-index: calc(${PlaygroundCssVars.EDITOR_MAX_Z_INDEX} + 1);

        > div:not([data-w=o23-playground-code-editor-max-switcher]) {
            width: 100%;
            height: 100%;
            min-height: 100%;
            max-height: 100%;
            border: 0;
        }
    }

    &[data-visible=false] {
        display: none;
    }
`;
const MaxSwitcher = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-code-editor-max-switcher" })`
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    top: 8px;
    right: 8px;
    width: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_WIDTH};
    height: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_HEIGHT};
    color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_COLOR};
    border: ${PlaygroundCssVars.EDITOR_TOOLBAR_BORDER};
    border-radius: calc(${PlaygroundCssVars.EDITOR_TOOLBAR_BORDER_RADIUS} * 2);
    transition: all ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};
    cursor: pointer;
    z-index: 1;

    &:hover {
        color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_ACTIVE_COLOR};
        background-color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_ACTIVE_BACKGROUND_COLOR};
        border-color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_ACTIVE_COLOR};

        > svg {
            opacity: 1;
        }
    }

    > svg {
        opacity: 0.5;
        width: calc(${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_WIDTH} * 0.8);
        height: calc(${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_HEIGHT} * 0.8);
        transition: all ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};
    }
`;
const CodeEditorWrapper = (props) => {
  const { children, ...rest } = props;
  const ref = reactExports.useRef(null);
  const [max, setMax] = reactExports.useState(false);
  const onMaxSwitchClicked = () => setMax(!max);
  return React.createElement(
    CodeEditorContainer,
    { ...rest, "data-max": max, ref },
    React.createElement(MaxSwitcher, { onClick: onMaxSwitchClicked }, max ? React.createElement(Min, null) : React.createElement(Max, null)),
    children
  );
};
const createOneOrAnotherBadge = (options) => (model) => options.check(model) ? options.one : options.another;
const createCheckOrAnotherBadge = (options) => createOneOrAnotherBadge({ ...options, one: React.createElement(ConfigurableElementBadgeChecked, null) });
const createCheckOrMissBadge = (options) => createCheckOrAnotherBadge({ ...options, another: React.createElement(ConfigurableElementBadgeMissed, null) });
const createCheckOrBanBadge = (options) => createCheckOrAnotherBadge({ ...options, another: React.createElement(ConfigurableElementBadgeBanned, null) });
const createCheckOrNotAvailableBadge = (options) => createCheckOrAnotherBadge({ ...options, another: React.createElement(ConfigurableElementBadgeNotAvailable, null) });
const createCheckOrUseDefaultBadge = (options) => createCheckOrAnotherBadge({ ...options, another: React.createElement(ConfigurableElementBadgeUseDefault, null) });
const createCheckOrIgnoreBadge = (options) => createCheckOrAnotherBadge({ ...options, another: React.createElement(ConfigurableElementBadgeIgnored, null) });
const createYesOrNoBadge = (options) => createOneOrAnotherBadge({ ...options, one: React.createElement(ConfigurableElementBadgeYes, null), another: React.createElement(ConfigurableElementBadgeNo, null) });
const createValueOrAnotherBadge = (options) => (model) => options.check(model) ? options.one(model) : options.another;
const createValueOrMissBadge = (options) => createValueOrAnotherBadge({ ...options, another: React.createElement(ConfigurableElementBadgeMissed, null) });
const dts$g = "declare namespace dayjs {\n	interface ILocale {\n		name: string;\n		weekdays?: string[];\n		months?: string[];\n		weekStart?: number;\n		weekdaysShort?: string[];\n		monthsShort?: string[];\n		weekdaysMin?: string[];\n		ordinal?: (n: number) => number | string;\n		formats: Partial<{\n			LT: string\n			LTS: string\n			L: string\n			LL: string\n			LLL: string\n			LLLL: string\n		}>;\n		relativeTime: Partial<{\n			future: string\n			past: string\n			s: string\n			m: string\n			mm: string\n			h: string\n			hh: string\n			d: string\n			dd: string\n			M: string\n			MM: string\n			y: string\n			yy: string\n		}>;\n	}\n\n	interface ConfigTypeMap {\n		default: string | number | Date | Dayjs | null | undefined;\n	}\n\n	type ConfigType = ConfigTypeMap[keyof ConfigTypeMap]\n\n	interface FormatObject {\n		locale?: string,\n		format?: string,\n		utc?: boolean\n	}\n\n	type OptionType = FormatObject | string | string[]\n\n	type UnitTypeShort = 'd' | 'D' | 'M' | 'y' | 'h' | 'm' | 's' | 'ms'\n\n	type UnitTypeLong = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'month' | 'year' | 'date'\n\n	type UnitTypeLongPlural =\n		'milliseconds'\n		| 'seconds'\n		| 'minutes'\n		| 'hours'\n		| 'days'\n		| 'months'\n		| 'years'\n		| 'dates'\n\n	type UnitType = UnitTypeLong | UnitTypeLongPlural | UnitTypeShort;\n\n	type OpUnitType = UnitType | 'week' | 'weeks' | 'w';\n	type QUnitType = UnitType | 'quarter' | 'quarters' | 'Q';\n	type ManipulateType = Exclude<OpUnitType, 'date' | 'dates'>;\n\n	interface Dayjs {\n		/**\n		 * All Day.js objects are immutable. Still, `dayjs#clone` can create a clone of the current object if you need one.\n		 * ```\n		 * dayjs().clone() // => Dayjs\n		 * dayjs(dayjs('2019-01-25')) // passing a Dayjs object to a constructor will also clone it\n		 * ```\n		 * Docs: https://day.js.org/docs/en/parse/dayjs-clone\n		 */\n		clone(): Dayjs;\n\n		/**\n		 * This returns a `boolean` indicating whether the Day.js object contains a valid date or not.\n		 * ```\n		 * dayjs().isValid()// => boolean\n		 * ```\n		 * Docs: https://day.js.org/docs/en/parse/is-valid\n		 */\n		isValid(): boolean;\n\n		/**\n		 * Get the year.\n		 * ```\n		 * dayjs().year()// => 2020\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/year\n		 */\n		year(): number;\n		/**\n		 * Set the year.\n		 * ```\n		 * dayjs().year(2000)// => Dayjs\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/year\n		 */\n		year(value: number): Dayjs;\n\n		/**\n		 * Get the month.\n		 *\n		 * Months are zero indexed, so January is month 0.\n		 * ```\n		 * dayjs().month()// => 0-11\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/month\n		 */\n		month(): number;\n		/**\n		 * Set the month.\n		 *\n		 * Months are zero indexed, so January is month 0.\n		 *\n		 * Accepts numbers from 0 to 11. If the range is exceeded, it will bubble up to the next year.\n		 * ```\n		 * dayjs().month(0)// => Dayjs\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/month\n		 */\n		month(value: number): Dayjs;\n\n		/**\n		 * Get the date of the month.\n		 * ```\n		 * dayjs().date()// => 1-31\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/date\n		 */\n		date(): number;\n		/**\n		 * Set the date of the month.\n		 *\n		 * Accepts numbers from 1 to 31. If the range is exceeded, it will bubble up to the next months.\n		 * ```\n		 * dayjs().date(1)// => Dayjs\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/date\n		 */\n		date(value: number): Dayjs;\n\n		/**\n		 * Get the day of the week.\n		 *\n		 * Returns numbers from 0 (Sunday) to 6 (Saturday).\n		 * ```\n		 * dayjs().day()// 0-6\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/day\n		 */\n		day(): number;\n		/**\n		 * Set the day of the week.\n		 *\n		 * Accepts numbers from 0 (Sunday) to 6 (Saturday). If the range is exceeded, it will bubble up to next weeks.\n		 * ```\n		 * dayjs().day(0)// => Dayjs\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/day\n		 */\n		day(value: number): Dayjs;\n\n		/**\n		 * Get the hour.\n		 * ```\n		 * dayjs().hour()// => 0-23\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/hour\n		 */\n		hour(): number;\n		/**\n		 * Set the hour.\n		 *\n		 * Accepts numbers from 0 to 23. If the range is exceeded, it will bubble up to the next day.\n		 * ```\n		 * dayjs().hour(12)// => Dayjs\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/hour\n		 */\n		hour(value: number): Dayjs;\n\n		/**\n		 * Get the minutes.\n		 * ```\n		 * dayjs().minute()// => 0-59\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/minute\n		 */\n		minute(): number;\n		/**\n		 * Set the minutes.\n		 *\n		 * Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the next hour.\n		 * ```\n		 * dayjs().minute(59)// => Dayjs\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/minute\n		 */\n		minute(value: number): Dayjs;\n\n		/**\n		 * Get the seconds.\n		 * ```\n		 * dayjs().second()// => 0-59\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/second\n		 */\n		second(): number;\n		/**\n		 * Set the seconds.\n		 *\n		 * Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the next minutes.\n		 * ```\n		 * dayjs().second(1)// Dayjs\n		 * ```\n		 */\n		second(value: number): Dayjs;\n\n		/**\n		 * Get the milliseconds.\n		 * ```\n		 * dayjs().millisecond()// => 0-999\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/millisecond\n		 */\n		millisecond(): number;\n		/**\n		 * Set the milliseconds.\n		 *\n		 * Accepts numbers from 0 to 999. If the range is exceeded, it will bubble up to the next seconds.\n		 * ```\n		 * dayjs().millisecond(1)// => Dayjs\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/millisecond\n		 */\n		millisecond(value: number): Dayjs;\n\n		/**\n		 * Generic setter, accepting unit as first argument, and value as second, returns a new instance with the applied changes.\n		 *\n		 * In general:\n		 * ```\n		 * dayjs().set(unit, value) === dayjs()[unit](value)\n		 * ```\n		 * Units are case-insensitive, and support plural and short forms.\n		 * ```\n		 * dayjs().set('date', 1)\n		 * dayjs().set('month', 3) // April\n		 * dayjs().set('second', 30)\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/set\n		 */\n		set(unit: UnitType, value: number): Dayjs;\n\n		/**\n		 * String getter, returns the corresponding information getting from Day.js object.\n		 *\n		 * In general:\n		 * ```\n		 * dayjs().get(unit) === dayjs()[unit]()\n		 * ```\n		 * Units are case-insensitive, and support plural and short forms.\n		 * ```\n		 * dayjs().get('year')\n		 * dayjs().get('month') // start 0\n		 * dayjs().get('date')\n		 * ```\n		 * Docs: https://day.js.org/docs/en/get-set/get\n		 */\n		get(unit: UnitType): number;\n\n		/**\n		 * Returns a cloned Day.js object with a specified amount of time added.\n		 * ```\n		 * dayjs().add(7, 'day')// => Dayjs\n		 * ```\n		 * Units are case-insensitive, and support plural and short forms.\n		 *\n		 * Docs: https://day.js.org/docs/en/manipulate/add\n		 */\n		add(value: number, unit?: ManipulateType): Dayjs;\n\n		/**\n		 * Returns a cloned Day.js object with a specified amount of time subtracted.\n		 * ```\n		 * dayjs().subtract(7, 'year')// => Dayjs\n		 * ```\n		 * Units are case-insensitive, and support plural and short forms.\n		 *\n		 * Docs: https://day.js.org/docs/en/manipulate/subtract\n		 */\n		subtract(value: number, unit?: ManipulateType): Dayjs;\n\n		/**\n		 * Returns a cloned Day.js object and set it to the start of a unit of time.\n		 * ```\n		 * dayjs().startOf('year')// => Dayjs\n		 * ```\n		 * Units are case-insensitive, and support plural and short forms.\n		 *\n		 * Docs: https://day.js.org/docs/en/manipulate/start-of\n		 */\n		startOf(unit: OpUnitType): Dayjs;\n\n		/**\n		 * Returns a cloned Day.js object and set it to the end of a unit of time.\n		 * ```\n		 * dayjs().endOf('month')// => Dayjs\n		 * ```\n		 * Units are case-insensitive, and support plural and short forms.\n		 *\n		 * Docs: https://day.js.org/docs/en/manipulate/end-of\n		 */\n		endOf(unit: OpUnitType): Dayjs;\n\n		/**\n		 * Get the formatted date according to the string of tokens passed in.\n		 *\n		 * To escape characters, wrap them in square brackets (e.g. [MM]).\n		 * ```\n		 * dayjs().format()// => current date in ISO8601, without fraction seconds e.g. '2020-04-02T08:02:17-05:00'\n		 * dayjs('2019-01-25').format('[YYYYescape] YYYY-MM-DDTHH:mm:ssZ[Z]')// 'YYYYescape 2019-01-25T00:00:00-02:00Z'\n		 * dayjs('2019-01-25').format('DD/MM/YYYY') // '25/01/2019'\n		 * ```\n		 * Docs: https://day.js.org/docs/en/display/format\n		 */\n		format(template?: string): string;\n\n		/**\n		 * This indicates the difference between two date-time in the specified unit.\n		 *\n		 * To get the difference in milliseconds, use `dayjs#diff`\n		 * ```\n		 * const date1 = dayjs('2019-01-25')\n		 * const date2 = dayjs('2018-06-05')\n		 * date1.diff(date2) // 20214000000 default milliseconds\n		 * date1.diff() // milliseconds to current time\n		 * ```\n		 *\n		 * To get the difference in another unit of measurement, pass that measurement as the second argument.\n		 * ```\n		 * const date1 = dayjs('2019-01-25')\n		 * date1.diff('2018-06-05', 'month') // 7\n		 * ```\n		 * Units are case-insensitive, and support plural and short forms.\n		 *\n		 * Docs: https://day.js.org/docs/en/display/difference\n		 */\n		diff(date?: ConfigType, unit?: QUnitType | OpUnitType, float?: boolean): number;\n\n		/**\n		 * This returns the number of **milliseconds** since the Unix Epoch of the Day.js object.\n		 * ```\n		 * dayjs('2019-01-25').valueOf() // 1548381600000\n		 * +dayjs(1548381600000) // 1548381600000\n		 * ```\n		 * To get a Unix timestamp (the number of seconds since the epoch) from a Day.js object, you should use Unix Timestamp `dayjs#unix()`.\n		 *\n		 * Docs: https://day.js.org/docs/en/display/unix-timestamp-milliseconds\n		 */\n		valueOf(): number;\n\n		/**\n		 * This returns the Unix timestamp (the number of **seconds** since the Unix Epoch) of the Day.js object.\n		 * ```\n		 * dayjs('2019-01-25').unix() // 1548381600\n		 * ```\n		 * This value is floored to the nearest second, and does not include a milliseconds component.\n		 *\n		 * Docs: https://day.js.org/docs/en/display/unix-timestamp\n		 */\n		unix(): number;\n\n		/**\n		 * Get the number of days in the current month.\n		 * ```\n		 * dayjs('2019-01-25').daysInMonth() // 31\n		 * ```\n		 * Docs: https://day.js.org/docs/en/display/days-in-month\n		 */\n		daysInMonth(): number;\n\n		/**\n		 * To get a copy of the native `Date` object parsed from the Day.js object use `dayjs#toDate`.\n		 * ```\n		 * dayjs('2019-01-25').toDate()// => Date\n		 * ```\n		 */\n		toDate(): Date;\n\n		/**\n		 * To serialize as an ISO 8601 string.\n		 * ```\n		 * dayjs('2019-01-25').toJSON() // '2019-01-25T02:00:00.000Z'\n		 * ```\n		 * Docs: https://day.js.org/docs/en/display/as-json\n		 */\n		toJSON(): string;\n\n		/**\n		 * To format as an ISO 8601 string.\n		 * ```\n		 * dayjs('2019-01-25').toISOString() // '2019-01-25T02:00:00.000Z'\n		 * ```\n		 * Docs: https://day.js.org/docs/en/display/as-iso-string\n		 */\n		toISOString(): string;\n\n		/**\n		 * Returns a string representation of the date.\n		 * ```\n		 * dayjs('2019-01-25').toString() // 'Fri, 25 Jan 2019 02:00:00 GMT'\n		 * ```\n		 * Docs: https://day.js.org/docs/en/display/as-string\n		 */\n		toString(): string;\n\n		/**\n		 * Get the UTC offset in minutes.\n		 * ```\n		 * dayjs().utcOffset()\n		 * ```\n		 * Docs: https://day.js.org/docs/en/manipulate/utc-offset\n		 */\n		utcOffset(): number;\n\n		/**\n		 * This indicates whether the Day.js object is before the other supplied date-time.\n		 * ```\n		 * dayjs().isBefore(dayjs('2011-01-01')) // default milliseconds\n		 * ```\n		 * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n		 * ```\n		 * dayjs().isBefore('2011-01-01', 'year')// => boolean\n		 * ```\n		 * Units are case-insensitive, and support plural and short forms.\n		 *\n		 * Docs: https://day.js.org/docs/en/query/is-before\n		 */\n		isBefore(date?: ConfigType, unit?: OpUnitType): boolean;\n\n		/**\n		 * This indicates whether the Day.js object is the same as the other supplied date-time.\n		 * ```\n		 * dayjs().isSame(dayjs('2011-01-01')) // default milliseconds\n		 * ```\n		 * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n		 * ```\n		 * dayjs().isSame('2011-01-01', 'year')// => boolean\n		 * ```\n		 * Docs: https://day.js.org/docs/en/query/is-same\n		 */\n		isSame(date?: ConfigType, unit?: OpUnitType): boolean;\n\n		/**\n		 * This indicates whether the Day.js object is after the other supplied date-time.\n		 * ```\n		 * dayjs().isAfter(dayjs('2011-01-01')) // default milliseconds\n		 * ```\n		 * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n		 * ```\n		 * dayjs().isAfter('2011-01-01', 'year')// => boolean\n		 * ```\n		 * Units are case-insensitive, and support plural and short forms.\n		 *\n		 * Docs: https://day.js.org/docs/en/query/is-after\n		 */\n		isAfter(date?: ConfigType, unit?: OpUnitType): boolean;\n		locale(): string;\n		locale(preset: string | ILocale, object?: Partial<ILocale>): Dayjs;\n		// static methods\n		locale(preset?: string | ILocale, object?: Partial<ILocale>, isLocal?: boolean): string;\n		isDayjs(d: any): d is Dayjs;\n		unix(t: number): Dayjs;\n	}\n\n	type DayjsFn = ((config?: ConfigType) => Dayjs)\n		& ((config?: dayjs.ConfigType, format?: dayjs.OptionType, strict?: boolean) => Dayjs)\n		& ((config?: dayjs.ConfigType, format?: dayjs.OptionType, locale?: string, strict?: boolean) => Dayjs)\n		& {\n		locale: (preset?: string | ILocale, object?: Partial<ILocale>, isLocal?: boolean) => string;\n		isDayjs: (d: any) => d is Dayjs;\n		unix: (t: number) => Dayjs;\n	};\n}\n";
const dts$f = '// Type definitions for decimal.js >=7.0.0\n// Project: https://github.com/MikeMcl/decimal.js\n// Definitions by: Michael Mclaughlin <https://github.com/MikeMcl>\n// Definitions: https://github.com/MikeMcl/decimal.js\n//\n// Documentation: http://mikemcl.github.io/decimal.js/\n//\n// Exports:\n//\n//   class     Decimal (default export)\n//   type      Constructor\n//   type      Decimal.Instance\n//   type      Decimal.Modulo\n//   type      Rounding\n//   type      Value\n//   interface Config\n//\n// Example (alternative syntax commented-out):\n//\n//   import {Decimal} from "decimal.js"\n//   //import Decimal from "decimal.js"\n//\n//   let r: Rounding = Decimal.ROUND_UP;\n//   let c: Configuration = {precision: 4, rounding: r};\n//   Decimal.set(c);\n//   let v: Value = \'12345.6789\';\n//   let d: Decimal = new Decimal(v);\n//   //let d: Decimal.Instance = new Decimal(v);\n//\n// The use of compiler option `--strictNullChecks` is recommended.\n\ndeclare namespace decimal {\n	type Constructor = typeof Decimal;\n	type Instance = Decimal;\n	type Rounding = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n	type Modulo = Rounding | 9;\n	type Value = string | number | Decimal;\n\n	// http://mikemcl.github.io/decimal.js/#constructor-properties\n	interface Config {\n		precision?: number;\n		rounding?: Rounding;\n		toExpNeg?: number;\n		toExpPos?: number;\n		minE?: number;\n		maxE?: number;\n		crypto?: boolean;\n		modulo?: Modulo;\n		defaults?: boolean;\n	}\n\n	export class Decimal {\n		readonly d: number[];\n		readonly e: number;\n		readonly s: number;\n\n		constructor(n: Value);\n\n		absoluteValue(): Decimal;\n\n		abs(): Decimal;\n\n		ceil(): Decimal;\n\n		clampedTo(min: Value, max: Value): Decimal;\n\n		clamp(min: Value, max: Value): Decimal;\n\n		comparedTo(n: Value): number;\n\n		cmp(n: Value): number;\n\n		cosine(): Decimal;\n\n		cos(): Decimal;\n\n		cubeRoot(): Decimal;\n\n		cbrt(): Decimal;\n\n		decimalPlaces(): number;\n\n		dp(): number;\n\n		dividedBy(n: Value): Decimal;\n\n		div(n: Value): Decimal;\n\n		dividedToIntegerBy(n: Value): Decimal;\n\n		divToInt(n: Value): Decimal;\n\n		equals(n: Value): boolean;\n\n		eq(n: Value): boolean;\n\n		floor(): Decimal;\n\n		greaterThan(n: Value): boolean;\n\n		gt(n: Value): boolean;\n\n		greaterThanOrEqualTo(n: Value): boolean;\n\n		gte(n: Value): boolean;\n\n		hyperbolicCosine(): Decimal;\n\n		cosh(): Decimal;\n\n		hyperbolicSine(): Decimal;\n\n		sinh(): Decimal;\n\n		hyperbolicTangent(): Decimal;\n\n		tanh(): Decimal;\n\n		inverseCosine(): Decimal;\n\n		acos(): Decimal;\n\n		inverseHyperbolicCosine(): Decimal;\n\n		acosh(): Decimal;\n\n		inverseHyperbolicSine(): Decimal;\n\n		asinh(): Decimal;\n\n		inverseHyperbolicTangent(): Decimal;\n\n		atanh(): Decimal;\n\n		inverseSine(): Decimal;\n\n		asin(): Decimal;\n\n		inverseTangent(): Decimal;\n\n		atan(): Decimal;\n\n		isFinite(): boolean;\n\n		isInteger(): boolean;\n\n		isInt(): boolean;\n\n		isNaN(): boolean;\n\n		isNegative(): boolean;\n\n		isNeg(): boolean;\n\n		isPositive(): boolean;\n\n		isPos(): boolean;\n\n		isZero(): boolean;\n\n		lessThan(n: Value): boolean;\n\n		lt(n: Value): boolean;\n\n		lessThanOrEqualTo(n: Value): boolean;\n\n		lte(n: Value): boolean;\n\n		logarithm(n?: Value): Decimal;\n\n		log(n?: Value): Decimal;\n\n		minus(n: Value): Decimal;\n\n		sub(n: Value): Decimal;\n\n		modulo(n: Value): Decimal;\n\n		mod(n: Value): Decimal;\n\n		naturalExponential(): Decimal;\n\n		exp(): Decimal;\n\n		naturalLogarithm(): Decimal;\n\n		ln(): Decimal;\n\n		negated(): Decimal;\n\n		neg(): Decimal;\n\n		plus(n: Value): Decimal;\n\n		add(n: Value): Decimal;\n\n		precision(includeZeros?: boolean): number;\n\n		sd(includeZeros?: boolean): number;\n\n		round(): Decimal;\n\n		sine(): Decimal;\n\n		sin(): Decimal;\n\n		squareRoot(): Decimal;\n\n		sqrt(): Decimal;\n\n		tangent(): Decimal;\n\n		tan(): Decimal;\n\n		times(n: Value): Decimal;\n\n		mul(n: Value): Decimal;\n\n		toBinary(significantDigits?: number): string;\n		toBinary(significantDigits: number, rounding: Rounding): string;\n\n		toDecimalPlaces(decimalPlaces?: number): Decimal;\n		toDecimalPlaces(decimalPlaces: number, rounding: Rounding): Decimal;\n\n		toDP(decimalPlaces?: number): Decimal;\n		toDP(decimalPlaces: number, rounding: Rounding): Decimal;\n\n		toExponential(decimalPlaces?: number): string;\n		toExponential(decimalPlaces: number, rounding: Rounding): string;\n\n		toFixed(decimalPlaces?: number): string;\n		toFixed(decimalPlaces: number, rounding: Rounding): string;\n\n		toFraction(max_denominator?: Value): Decimal[];\n\n		toHexadecimal(significantDigits?: number): string;\n		toHexadecimal(significantDigits: number, rounding: Rounding): string;\n\n		toHex(significantDigits?: number): string;\n		toHex(significantDigits: number, rounding?: Rounding): string;\n\n		toJSON(): string;\n\n		toNearest(n: Value, rounding?: Rounding): Decimal;\n\n		toNumber(): number;\n\n		toOctal(significantDigits?: number): string;\n		toOctal(significantDigits: number, rounding: Rounding): string;\n\n		toPower(n: Value): Decimal;\n\n		pow(n: Value): Decimal;\n\n		toPrecision(significantDigits?: number): string;\n		toPrecision(significantDigits: number, rounding: Rounding): string;\n\n		toSignificantDigits(significantDigits?: number): Decimal;\n		toSignificantDigits(significantDigits: number, rounding: Rounding): Decimal;\n\n		toSD(significantDigits?: number): Decimal;\n		toSD(significantDigits: number, rounding: Rounding): Decimal;\n\n		toString(): string;\n\n		truncated(): Decimal;\n\n		trunc(): Decimal;\n\n		valueOf(): string;\n\n		static abs(n: Value): Decimal;\n\n		static acos(n: Value): Decimal;\n\n		static acosh(n: Value): Decimal;\n\n		static add(x: Value, y: Value): Decimal;\n\n		static asin(n: Value): Decimal;\n\n		static asinh(n: Value): Decimal;\n\n		static atan(n: Value): Decimal;\n\n		static atanh(n: Value): Decimal;\n\n		static atan2(y: Value, x: Value): Decimal;\n\n		static cbrt(n: Value): Decimal;\n\n		static ceil(n: Value): Decimal;\n\n		static clamp(n: Value, min: Value, max: Value): Decimal;\n\n		static clone(object?: Config): Constructor;\n\n		static config(object: Config): Constructor;\n\n		static cos(n: Value): Decimal;\n\n		static cosh(n: Value): Decimal;\n\n		static div(x: Value, y: Value): Decimal;\n\n		static exp(n: Value): Decimal;\n\n		static floor(n: Value): Decimal;\n\n		static hypot(...n: Value[]): Decimal;\n\n		static isDecimal(object: any): object is Decimal;\n\n		static ln(n: Value): Decimal;\n\n		static log(n: Value, base?: Value): Decimal;\n\n		static log2(n: Value): Decimal;\n\n		static log10(n: Value): Decimal;\n\n		static max(...n: Value[]): Decimal;\n\n		static min(...n: Value[]): Decimal;\n\n		static mod(x: Value, y: Value): Decimal;\n\n		static mul(x: Value, y: Value): Decimal;\n\n		static noConflict(): Constructor;   // Browser only\n		static pow(base: Value, exponent: Value): Decimal;\n\n		static random(significantDigits?: number): Decimal;\n\n		static round(n: Value): Decimal;\n\n		static set(object: Config): Constructor;\n\n		static sign(n: Value): number;\n\n		static sin(n: Value): Decimal;\n\n		static sinh(n: Value): Decimal;\n\n		static sqrt(n: Value): Decimal;\n\n		static sub(x: Value, y: Value): Decimal;\n\n		static sum(...n: Value[]): Decimal;\n\n		static tan(n: Value): Decimal;\n\n		static tanh(n: Value): Decimal;\n\n		static trunc(n: Value): Decimal;\n\n		static readonly default?: Constructor;\n		static readonly Decimal?: Constructor;\n\n		static readonly precision: number;\n		static readonly rounding: Rounding;\n		static readonly toExpNeg: number;\n		static readonly toExpPos: number;\n		static readonly minE: number;\n		static readonly maxE: number;\n		static readonly crypto: boolean;\n		static readonly modulo: Modulo;\n\n		static readonly ROUND_UP: 0;\n		static readonly ROUND_DOWN: 1;\n		static readonly ROUND_CEIL: 2;\n		static readonly ROUND_FLOOR: 3;\n		static readonly ROUND_HALF_UP: 4;\n		static readonly ROUND_HALF_DOWN: 5;\n		static readonly ROUND_HALF_EVEN: 6;\n		static readonly ROUND_HALF_CEIL: 7;\n		static readonly ROUND_HALF_FLOOR: 8;\n		static readonly EUCLID: 9;\n	}\n}\n';
const dts$e = "declare var $endpointUrl: string;";
const dts$d = "declare namespace O23 {\n	/** 000 - 099, 400 - 699 */\n	type HttpErrorCode = string;\n\n	interface HttpErrorHandleOptions<In = any, InFragment = any> {\n		$errorCode: HttpErrorCode;\n		$url: string;\n		$response?: Response;\n		$factor: InFragment;\n		// @ts-ignore\n		$request: PipelineStepData<In>;\n	}\n}\n\ndeclare var $options: O23.HttpErrorHandleOptions;\n";
const dts$c = "// @ts-ignore\ndeclare var $response: O23.Response;\n";
const dts$b = "declare namespace O23 {\n	interface Blob {\n		readonly type: string;\n		readonly size: number;\n		slice(start?: number, end?: number): Blob;\n		text(): Promise<string>;\n	}\n\n	// TODO need dts for NodeJS.ReadableStream\n	type NodeJSReadableStream = any;\n\n	interface Body {\n		arrayBuffer(): Promise<ArrayBuffer>;\n		blob(): Promise<Blob>;\n		body: NodeJSReadableStream;\n		bodyUsed: boolean;\n		buffer(): Promise<Buffer>;\n		json(): Promise<any>;\n		size: number;\n		text(): Promise<string>;\n		textConverted(): Promise<string>;\n		timeout: number;\n	}\n\n	type ResponseType =\n		'basic'\n		| 'cors'\n		| 'default'\n		| 'error'\n		| 'opaque'\n		| 'opaqueredirect';\n\n	interface Response extends Body {\n		// static error(): Response;\n		// static redirect(url: string, status: number): Response;\n		// clone(): Response;\n		headers: Headers;\n		ok: boolean;\n		redirected: boolean;\n		status: number;\n		statusText: string;\n		type: ResponseType;\n		url: string;\n	}\n}\n";
const dts$a = "// noinspection JSCommentMatchesSignature\ndeclare namespace mathjs {\n	type NoLiteralType<T> = T extends number\n		? number\n		: T extends string\n			? string\n			: T extends boolean\n				? boolean\n				: T\n\n	// TODO: introduce generics for MathCollection, MathMatrix, and MathArray\n	type MathNumericType = number | BigNumber | bigint | Fraction | Complex\n	type MathScalarType = MathNumericType | Unit\n	type MathArray = MathNumericType[] | MathNumericType[][] // TODO: MathArray can also contain Unit\n	type MathCollection = MathArray | Matrix\n	type MathType = MathScalarType | MathCollection\n	type MathExpression = string | string[] | MathCollection\n\n	type FactoryFunction<T> = (scope: any) => T\n\n	// FactoryFunctionMap can be nested; all nested objects will be flattened\n	interface FactoryFunctionMap {\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		[key: string]: FactoryFunction<any> | FactoryFunctionMap;\n	}\n\n	/** Available options for parse */\n	interface ParseOptions {\n		/** a set of custom nodes */\n		nodes?: Record<string, MathNode>;\n	}\n\n	/**\n	 * Parse an expression. Returns a node tree, which can be evaluated by\n	 * invoking node.evaluate().\n	 *\n	 * Note the evaluating arbitrary expressions may involve security risks,\n	 * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n	 *\n	 * Syntax:\n	 *\n	 *     math.parse(expr)\n	 *     math.parse(expr, options)\n	 *     math.parse([expr1, expr2, expr3, ...])\n	 *     math.parse([expr1, expr2, expr3, ...], options)\n	 *\n	 * Example:\n	 *\n	 *     const node1 = math.parse('sqrt(3^2 + 4^2)')\n	 *     node1.compile().evaluate() // 5\n	 *\n	 *     let scope = {a:3, b:4}\n	 *     const node2 = math.parse('a * b') // 12\n	 *     const code2 = node2.compile()\n	 *     code2.evaluate(scope) // 12\n	 *     scope.a = 5\n	 *     code2.evaluate(scope) // 20\n	 *\n	 *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])\n	 *     nodes[2].compile().evaluate() // 12\n	 *\n	 * See also:\n	 *\n	 *     evaluate, compile\n	 */\n	interface ParseFunction {\n		/**\n		 * Parse an expression. Returns a node tree, which can be evaluated by\n		 * invoking node.evaluate();\n		 *\n		 * @param expr Expression to be parsed\n		 * @param options Available options\n		 * @returns A node\n		 */\n		(expr: MathExpression, options?: ParseOptions): MathNode;\n\n		/**\n		 * Parse an expression. Returns a node tree, which can be evaluated by\n		 * invoking node.evaluate();\n		 *\n		 * @param exprs Expressions to be parsed\n		 * @param options Available options\n		 * @returns An array of nodes\n		 */\n		(exprs: MathExpression[], options?: ParseOptions): MathNode[];\n\n		/**\n		 * Checks whether the current character `c` is a valid alpha character:\n		 *\n		 * - A latin letter (upper or lower case) Ascii: a-z, A-Z\n		 * - An underscore                        Ascii: _\n		 * - A dollar sign                        Ascii: $\n		 * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n		 * - A greek letter                       Unicode: \\u0370 - \\u03FF\n		 * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n		 *\n		 * The previous and next characters are needed to determine whether\n		 * this character is part of a unicode surrogate pair.\n		 *\n		 * @param c      Current character in the expression\n		 * @param cPrev  Previous character\n		 * @param cNext  Next character\n		 */\n		isAlpha(c: string, cPrev: string, cNext: string): boolean;\n		/**\n		 * Test whether a character is a valid latin, greek, or letter-like character\n		 *\n		 * @param c\n		 */\n		isValidLatinOrGreek(c: string): boolean;\n		/**\n		 * Test whether two given 16 bit characters form a surrogate pair of a\n		 * unicode math symbol.\n		 *\n		 * https://unicode-table.com/en/\n		 * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n		 *\n		 * Note: In ES6 will be unicode aware:\n		 * https://stackoverflow.com/questions/280712/javascript-unicode-regexes\n		 * https://mathiasbynens.be/notes/es6-unicode-regex\n		 *\n		 * @param high\n		 * @param low\n		 */\n		isValidMathSymbol(high: string, low: string): boolean;\n		/**\n		 * Check whether given character c is a white space character: space, tab, or enter\n		 *\n		 * @param c\n		 * @param nestingLevel\n		 */\n		isWhitespace(c: string, nestingLevel: number): boolean;\n		/**\n		 * Test whether the character c is a decimal mark (dot).\n		 * This is the case when it's not the start of a delimiter '.*', './', or '.^'\n		 *\n		 * @param  c\n		 * @param  cNext\n		 */\n		isDecimalMark(c: string, cNext: string): boolean;\n		/**\n		 * checks if the given char c is a digit or dot\n		 *\n		 * @param  c   a string with one character\n		 */\n		isDigitDot(c: string): boolean;\n		/**\n		 * checks if the given char c is a digit\n		 *\n		 * @param  c   a string with one character\n		 */\n		isDigit(c: string): boolean;\n		/**\n		 * checks if the given char c is a hex digit\n		 *\n		 * @param c   a string with one character\n		 */\n		isHexDigit(c: string): boolean;\n	}\n\n	interface NodeCtor {\n		new(): MathNode;\n	}\n\n	interface AccessorNode<TObject extends MathNode = MathNode>\n		extends MathNode {\n		type: 'AccessorNode';\n		isAccessorNode: true;\n		object: TObject;\n		index: IndexNode;\n		name: string;\n	}\n\n	interface AccessorNodeCtor {\n		new<TObject extends MathNode = MathNode>(\n			object: TObject,\n			index: IndexNode\n		): AccessorNode<TObject>;\n	}\n\n	interface ArrayNode<TItems extends MathNode[] = MathNode[]>\n		extends MathNode {\n		type: 'ArrayNode';\n		isArrayNode: true;\n		items: [...TItems];\n	}\n\n	interface ArrayNodeCtor {\n		new<TItems extends MathNode[] = MathNode[]>(\n			items: [...TItems]\n		): ArrayNode<TItems>;\n	}\n\n	interface AssignmentNode<TValue extends MathNode = MathNode>\n		extends MathNode {\n		type: 'AssignmentNode';\n		isAssignmentNode: true;\n		object: SymbolNode | AccessorNode;\n		index: IndexNode | null;\n		value: TValue;\n		name: string;\n	}\n\n	interface AssignmentNodeCtor {\n		new<TValue extends MathNode = MathNode>(\n			object: SymbolNode,\n			value: TValue\n		): AssignmentNode<TValue>;\n		new<TValue extends MathNode = MathNode>(\n			object: SymbolNode | AccessorNode,\n			index: IndexNode,\n			value: TValue\n		): AssignmentNode<TValue>;\n	}\n\n	interface BlockNode<TNode extends MathNode = MathNode> extends MathNode {\n		type: 'BlockNode';\n		isBlockNode: true;\n		blocks: Array<{ node: TNode; visible: boolean }>;\n	}\n\n	interface BlockNodeCtor {\n		new<TNode extends MathNode = MathNode>(\n			arr: Array<{ node: TNode } | { node: TNode; visible: boolean }>\n		): BlockNode;\n	}\n\n	interface ConditionalNode<\n		TCond extends MathNode = MathNode,\n		TTrueNode extends MathNode = MathNode,\n		TFalseNode extends MathNode = MathNode\n	> extends MathNode {\n		type: 'ConditionalNode';\n		isConditionalNode: boolean;\n		condition: TCond;\n		trueExpr: TTrueNode;\n		falseExpr: TFalseNode;\n	}\n\n	interface ConditionalNodeCtor {\n		new<\n			TCond extends MathNode = MathNode,\n			TTrueNode extends MathNode = MathNode,\n			TFalseNode extends MathNode = MathNode\n		>(\n			condition: TCond,\n			trueExpr: TTrueNode,\n			falseExpr: TFalseNode\n		): ConditionalNode;\n	}\n\n	interface ConstantNode<TValue extends string | number = number>\n		extends MathNode {\n		type: 'ConstantNode';\n		isConstantNode: true;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		value: TValue;\n	}\n\n	interface ConstantNodeCtor {\n		new<TValue extends string | number = string>(\n			value: TValue\n		): ConstantNode<TValue>;\n	}\n\n	interface FunctionAssignmentNode<TExpr extends MathNode = MathNode>\n		extends MathNode {\n		type: 'FunctionAssignmentNode';\n		isFunctionAssignmentNode: true;\n		name: string;\n		params: string[];\n		expr: TExpr;\n	}\n\n	interface FunctionAssignmentNodeCtor {\n		new<TExpr extends MathNode = MathNode>(\n			name: string,\n			params: string[],\n			expr: TExpr\n		): FunctionAssignmentNode<TExpr>;\n	}\n\n	interface FunctionNode<\n		TFn = SymbolNode,\n		TArgs extends MathNode[] = MathNode[]\n	> extends MathNode {\n		type: 'FunctionNode';\n		isFunctionNode: true;\n		fn: TFn;\n		args: [...TArgs];\n	}\n\n	interface FunctionNodeCtor {\n		new<TFn = SymbolNode, TArgs extends MathNode[] = MathNode[]>(\n			fn: TFn,\n			args: [...TArgs]\n		): FunctionNode<TFn, TArgs>;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		onUndefinedFunction: (name: string) => any;\n	}\n\n	interface IndexNode<TDims extends MathNode[] = MathNode[]>\n		extends MathNode {\n		type: 'IndexNode';\n		isIndexNode: true;\n		dimensions: [...TDims];\n		dotNotation: boolean;\n	}\n\n	interface IndexNodeCtor {\n		new<TDims extends MathNode[] = MathNode[]>(dimensions: [...TDims]): IndexNode;\n		new<TDims extends MathNode[] = MathNode[]>(\n			dimensions: [...TDims],\n			dotNotation: boolean\n		): IndexNode<TDims>;\n	}\n\n	interface ObjectNode<\n		TProps extends Record<string, MathNode> = Record<string, MathNode>\n	> extends MathNode {\n		type: 'ObjectNode';\n		isObjectNode: true;\n		properties: TProps;\n	}\n\n	interface ObjectNodeCtor {\n		new<TProps extends Record<string, MathNode> = Record<string, MathNode>>(\n			properties: TProps\n		): ObjectNode<TProps>;\n	}\n\n	type OperatorNodeMap = {\n		xor: 'xor'\n		and: 'and'\n		or: 'or'\n		bitOr: '|'\n		bitXor: '^|'\n		bitAnd: '&'\n		equal: '=='\n		unequal: '!='\n		smaller: '<'\n		larger: '>'\n		smallerEq: '<='\n		largerEq: '>='\n		leftShift: '<<'\n		rightArithShift: '>>'\n		rightLogShift: '>>>'\n		to: 'to'\n		add: '+'\n		subtract: '-'\n		multiply: '*'\n		divide: '/'\n		dotMultiply: '.*'\n		dotDivide: './'\n		mod: 'mod'\n		unaryPlus: '+'\n		unaryMinus: '-'\n		bitNot: '~'\n		not: 'not'\n		pow: '^'\n		dotPow: '.^'\n		factorial: '!'\n	}\n\n	type OperatorNodeOp = OperatorNodeMap[keyof OperatorNodeMap]\n	type OperatorNodeFn = keyof OperatorNodeMap\n\n	interface OperatorNode<\n		TOp extends OperatorNodeMap[TFn] = never,\n		TFn extends OperatorNodeFn = never,\n		TArgs extends MathNode[] = MathNode[]\n	> extends MathNode {\n		type: 'OperatorNode';\n		isOperatorNode: true;\n		op: TOp;\n		fn: TFn;\n		args: [...TArgs];\n		implicit: boolean;\n		isUnary(): boolean;\n		isBinary(): boolean;\n	}\n\n	interface OperatorNodeCtor extends MathNode {\n		new<\n			TOp extends OperatorNodeMap[TFn],\n			TFn extends OperatorNodeFn,\n			TArgs extends MathNode[]\n		>(\n			op: TOp,\n			fn: TFn,\n			args: [...TArgs],\n			implicit?: boolean\n		): OperatorNode<TOp, TFn, TArgs>;\n	}\n\n	interface ParenthesisNode<TContent extends MathNode = MathNode>\n		extends MathNode {\n		type: 'ParenthesisNode';\n		isParenthesisNode: true;\n		content: TContent;\n	}\n\n	interface ParenthesisNodeCtor {\n		new<TContent extends MathNode>(content: TContent): ParenthesisNode<TContent>;\n	}\n\n	interface RangeNode<\n		TStart extends MathNode = MathNode,\n		TEnd extends MathNode = MathNode,\n		TStep extends MathNode = MathNode\n	> extends MathNode {\n		type: 'RangeNode';\n		isRangeNode: true;\n		start: TStart;\n		end: TEnd;\n		step: TStep | null;\n	}\n\n	interface RangeNodeCtor {\n		new<\n			TStart extends MathNode = MathNode,\n			TEnd extends MathNode = MathNode,\n			TStep extends MathNode = MathNode\n		>(\n			start: TStart,\n			end: TEnd,\n			step?: TStep\n		): RangeNode<TStart, TEnd, TStep>;\n	}\n\n	interface RelationalNode<TParams extends MathNode[] = MathNode[]>\n		extends MathNode {\n		type: 'RelationalNode';\n		isRelationalNode: true;\n		conditionals: string[];\n		params: [...TParams];\n	}\n\n	interface RelationalNodeCtor {\n		new<TParams extends MathNode[] = MathNode[]>(\n			conditionals: string[],\n			params: [...TParams]\n		): RelationalNode<TParams>;\n	}\n\n	interface SymbolNode extends MathNode {\n		type: 'SymbolNode';\n		isSymbolNode: true;\n		name: string;\n	}\n\n	interface SymbolNodeCtor {\n		new(name: string): SymbolNode;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		onUndefinedSymbol: (name: string) => any;\n	}\n\n	type MathJsFunctionName = keyof MathJsInstance\n\n	interface LUDecomposition {\n		L: MathCollection;\n		U: MathCollection;\n		p: number[];\n	}\n\n	interface SLUDecomposition extends LUDecomposition {\n		q: number[];\n	}\n\n	interface QRDecomposition {\n		Q: MathCollection;\n		R: MathCollection;\n	}\n\n	interface SchurDecomposition {\n		U: MathCollection;\n		T: MathCollection;\n	}\n\n	interface FractionDefinition {\n		a: number;\n		b: number;\n	}\n\n	interface MathJsInstance extends MathJsFactory {\n		e: number;\n		pi: number;\n		i: number;\n		Infinity: number;\n		LN2: number;\n		LN10: number;\n		LOG2E: number;\n		LOG10E: number;\n		NaN: number;\n		phi: number;\n		SQRT1_2: number;\n		SQRT2: number;\n		tau: number;\n\n		// Class-like constructors\n		Node: NodeCtor;\n		AccessorNode: AccessorNodeCtor;\n		ArrayNode: ArrayNodeCtor;\n		AssignmentNode: AssignmentNodeCtor;\n		BlockNode: BlockNodeCtor;\n		ConditionalNode: ConditionalNodeCtor;\n		ConstantNode: ConstantNodeCtor;\n		FunctionAssignmentNode: FunctionAssignmentNodeCtor;\n		FunctionNode: FunctionNodeCtor;\n		IndexNode: IndexNodeCtor;\n		ObjectNode: ObjectNodeCtor;\n		OperatorNode: OperatorNodeCtor;\n		ParenthesisNode: ParenthesisNodeCtor;\n		RangeNode: RangeNodeCtor;\n		RelationalNode: RelationalNodeCtor;\n		SymbolNode: SymbolNodeCtor;\n\n		Unit: UnitCtor;\n		Matrix: MatrixCtor;\n\n		/**\n		 * If null were to be included in this interface, it would be\n		 * auto-suggested as an import in VSCode. This causes issues because\n		 * `null` is not a valid label.\n		 *\n		 * @see https://github.com/josdejong/mathjs/issues/2019\n		 */\n		// null: number;\n\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		uninitialized: any;\n		version: string;\n\n		expression: MathNode;\n\n		/**\n		 * Returns reviver function that can be used as reviver in JSON.parse function.\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		reviver(): (key: any, value: any) => any;\n\n		/**\n		 * Returns replacer function that can be used as replacer in JSON.stringify function.\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		replacer(): (key: any, value: any) => any;\n\n		/*************************************************************************\n		 * Core functions\n		 ************************************************************************/\n\n		/**\n		 * Set configuration options for math.js, and get current options. Will\n		 * emit a ‘config’ event, with arguments (curr, prev, changes).\n		 * @param options Available options: {number} relTol Minimum relative\n		 * difference between two compared values, used by all comparison\n		 * functions. {number} absTol Minimum absolute\n		 * difference between two compared values, used by all comparison\n		 * functions. {string} matrix A string ‘Matrix’ (default) or ‘Array’.\n		 * {string} number A string ‘number’ (default), ‘BigNumber’, or\n		 * ‘Fraction’ {number} precision The number of significant digits for\n		 * BigNumbers. Not applicable for Numbers. {string} parenthesis How to\n		 * display parentheses in LaTeX and string output. {string} randomSeed\n		 * Random seed for seeded pseudo random number generator. Set to null to\n		 * randomly seed.\n		 * @returns Returns the current configuration\n		 */\n		config: (options: ConfigOptions) => ConfigOptions;\n		/**\n		 * Create a typed-function which checks the types of the arguments and\n		 * can match them against multiple provided signatures. The\n		 * typed-function automatically converts inputs in order to find a\n		 * matching signature. Typed functions throw informative errors in case\n		 * of wrong input arguments.\n		 * @param name Optional name for the typed-function\n		 * @param signatures Object with one or multiple function signatures\n		 * @returns The created typed-function.\n		 */\n		typed: (\n			name: string,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			signatures: Record<string, (...args: any[]) => any>\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		) => (...args: any[]) => any;\n\n		/*************************************************************************\n		 * Construction functions\n		 ************************************************************************/\n\n		/**\n		 * Create a BigNumber, which can store numbers with arbitrary precision.\n		 * When a matrix is provided, all elements will be converted to\n		 * BigNumber.\n		 * @param x Value for the big number, 0 by default.\n		 * @returns The created bignumber\n		 */\n		bignumber(\n			x?: number | string | Fraction | BigNumber | bigint | Unit | boolean | null\n		): BigNumber;\n		bignumber<T extends MathCollection>(x: T): T;\n\n		/**\n		 * Create a bigint, which can store integers with arbitrary precision.\n		 * When a matrix is provided, all elements will be converted to\n		 * bigint.\n		 * @param x Value for the integer, 0 by default.\n		 * @returns The created bigint\n		 */\n		bigint(\n			x?: number | string | Fraction | BigNumber | bigint | boolean | null\n		): bigint;\n		bigint<T extends MathCollection>(x: T): T;\n\n		/**\n		 * Create a boolean or convert a string or number to a boolean. In case\n		 * of a number, true is returned for non-zero numbers, and false in case\n		 * of zero. Strings can be 'true' or 'false', or can contain a number.\n		 * When value is a matrix, all elements will be converted to boolean.\n		 * @param x A value of any type\n		 * @returns The boolean value\n		 */\n		boolean(x: string | number | boolean | null): boolean;\n		boolean(x: MathCollection): MathCollection;\n\n		/**\n		 * Wrap any value in a chain, allowing to perform chained operations on\n		 * the value. All methods available in the math.js library can be called\n		 * upon the chain, and then will be evaluated with the value itself as\n		 * first argument. The chain can be closed by executing chain.done(),\n		 * which returns the final value. The chain has a number of special\n		 * functions: done() Finalize the chain and return the chain's value.\n		 * valueOf() The same as done() toString() Executes math.format() onto\n		 * the chain's value, returning a string representation of the value.\n		 * @param value A value of any type on which to start a chained\n		 * operation.\n		 * @returns The created chain\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		chain<TValue>(value?: TValue): MathJsChain<TValue>;\n\n		/**\n		 * Create a complex value or convert a value to a complex value.\n		 * @param args Arguments specifying the real and imaginary part of the\n		 * complex number\n		 * @returns Returns a complex value\n		 */\n		complex(arg?: MathNumericType | string | PolarCoordinates): Complex;\n		complex(arg?: MathCollection): MathCollection;\n		/**\n		 * @param re Argument specifying the real part of the complex number\n		 * @param im Argument specifying the imaginary part of the complex\n		 * number\n		 * @returns Returns a complex value\n		 */\n		complex(re: number, im: number): Complex;\n\n		/**\n		 * Create a user-defined unit and register it with the Unit type.\n		 * @param name The name of the new unit. Must be unique. Example: ‘knot’\n		 * @param definition Definition of the unit in terms of existing units.\n		 * For example, ‘0.514444444 m / s’.\n		 * @param options (optional) An object containing any of the following\n		 * properties:</br>- prefixes {string} “none”, “short”, “long”,\n		 * “binary_short”, or “binary_long”. The default is “none”.</br>-\n		 * aliases {Array} Array of strings. Example: [‘knots’, ‘kt’,\n		 * ‘kts’]</br>- offset {Numeric} An offset to apply when converting from\n		 * the unit. For example, the offset for celsius is 273.15. Default is\n		 * 0.\n		 * @returns The new unit\n		 */\n		createUnit(\n			name: string,\n			definition?: string | UnitDefinition | Unit,\n			options?: CreateUnitOptions\n		): Unit;\n		/**\n		 * Create a user-defined unit and register it with the Unit type.\n		 * @param units Definition of the unit\n		 * @param options\n		 * @returns The new unit\n		 */\n		createUnit(\n			units: Record<string, string | UnitDefinition | Unit>,\n			options?: CreateUnitOptions\n		): Unit;\n\n		/**\n		 * Create a fraction convert a value to a fraction.\n		 * @param value Arguments specifying the numerator and denominator of the\n		 * fraction\n		 * @returns Returns a fraction\n		 */\n		fraction(\n			value:\n				| number\n				| string\n				| BigNumber\n				| bigint\n				| Unit\n				| Fraction\n				| FractionDefinition\n		): Fraction;\n		fraction(values: MathCollection): MathCollection;\n		/**\n		 * @param numerator Argument specifying the numerator of the fraction\n		 * @param denominator Argument specifying the denominator of the\n		 * fraction\n		 * @returns Returns a fraction\n		 */\n		fraction(numerator: number, denominator: number): Fraction;\n\n		/**\n		 * Create an index. An Index can store ranges having start, step, and\n		 * end for multiple dimensions. Matrix.get, Matrix.set, and math.subset\n		 * accept an Index as input.\n		 * @param ranges Zero or more ranges or numbers.\n		 * @returns Returns the created index\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		index(...ranges: any[]): Index;\n\n		/**\n		 * Create a Matrix. The function creates a new math.type.Matrix object\n		 * from an Array. A Matrix has utility functions to manipulate the data\n		 * in the matrix, like getting the size and getting or setting values in\n		 * the matrix. Supported storage formats are 'dense' and 'sparse'.\n		 * @param format The Matrix storage format\n		 * @returns The created Matrix\n		 */\n		matrix(format?: 'sparse' | 'dense'): Matrix;\n		/**\n		 * @param data A multi dimensional array\n		 * @param format The Matrix storage format\n		 * @param dataType The Matrix data type\n		 * @returns The created Matrix\n		 */\n		matrix(\n			data: MathCollection | string[],\n			format?: 'sparse' | 'dense',\n			dataType?: string\n		): Matrix;\n\n		/**\n		 * Create a number or convert a string, boolean, or unit to a number.\n		 * When value is a matrix, all elements will be converted to number.\n		 * @param value Value to be converted\n		 * @returns The created number\n		 */\n		number(\n			value?:\n				| string\n				| number\n				| BigNumber\n				| bigint\n				| Fraction\n				| boolean\n				| Unit\n				| null\n		): number;\n		number(value?: MathCollection): number | MathCollection;\n		/**\n		 * @param value Value to be converted\n		 * @param valuelessUnit A valueless unit, used to convert a unit to a\n		 * number\n		 * @returns The created number\n		 */\n		number(unit: Unit, valuelessUnit: Unit | string): number;\n\n		/**\n		 * Convert a numeric input to a specific numeric type: number, BigNumber, bigint, or Fraction.\n		 * @param value The value to be converted\n		 * @param outputType The desired numeric output type\n		 */\n		numeric(\n			value: string | number | BigNumber | bigint | Fraction,\n			outputType: 'number'\n		): number;\n		numeric(\n			value: string | number | BigNumber | bigint | Fraction,\n			outputType: 'BigNumber'\n		): BigNumber;\n		numeric(\n			value: string | number | BigNumber | bigint | Fraction,\n			outputType: 'bigint'\n		): bigint;\n		numeric(\n			value: string | number | BigNumber | bigint | Fraction,\n			outputType: 'Fraction'\n		): Fraction;\n\n		/**\n		 * Create a Sparse Matrix. The function creates a new math.type.Matrix\n		 * object from an Array. A Matrix has utility functions to manipulate\n		 * the data in the matrix, like getting the size and getting or setting\n		 * values in the matrix.\n		 * @param data A two dimensional array\n		 * @param dataType Sparse Matrix data type\n		 * @returns The created matrix\n		 */\n		sparse(data?: MathCollection, dataType?: string): Matrix;\n\n		/**\n		 * Split a unit in an array of units whose sum is equal to the original\n		 * unit.\n		 * @param unit A unit to be split\n		 * @param parts An array of strings or valueless units\n		 * @returns An array of units\n		 */\n		splitUnit(unit: Unit, parts: Unit[]): Unit[];\n\n		/**\n		 * Create a string or convert any object into a string. Elements of\n		 * Arrays and Matrices are processed element wise.\n		 * @param value A value to convert to a string\n		 * @returns The created string\n		 */\n		string(value: MathNumericType | string | Unit | null): string;\n		string(value: MathCollection): MathCollection;\n\n		/**\n		 * Create a unit. Depending on the passed arguments, the function will\n		 * create and return a new math.type.Unit object. When a matrix is\n		 * provided, all elements will be converted to units.\n		 * @param unit The unit to be created\n		 * @returns The created unit\n		 */\n		unit(unit: string): Unit;\n		/**\n		 * @param unit The unit to be created\n		 * @returns The created unit\n		 */\n		unit(unit: Unit): Unit;\n		/**\n		 * @param value The value of the unit to be created\n		 * @param unit The unit to be created\n		 * @returns The created unit\n		 */\n		unit(value: MathNumericType, unit: string): Unit;\n		unit(value: MathCollection, unit: string): Unit[];\n\n		/*************************************************************************\n		 * Expression functions\n		 ************************************************************************/\n\n		/**\n		 * Parse and compile an expression. Returns a an object with a function\n		 * evaluate([scope]) to evaluate the compiled expression.\n		 * @param expr The expression to be compiled\n		 * @returns An object with the compiled expression\n		 */\n		compile(expr: MathExpression): EvalFunction;\n		/**\n		 * @param exprs The expressions to be compiled\n		 * @returns An array of objects with the compiled expressions\n		 */\n		compile(exprs: MathExpression[]): EvalFunction[];\n\n		// TODO properly type this\n		/**\n		 * Evaluate an expression.\n		 * @param expr The expression to be evaluated\n		 * @param scope Scope to read/write variables\n		 * @returns The result of the expression\n		 */\n		evaluate(\n			expr: MathExpression | Matrix,\n			scope?: object\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		): any;\n		evaluate(\n			expr: MathExpression[],\n			scope?: object\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		): any[];\n\n		/**\n		 * Retrieve help on a function or data type. Help files are retrieved\n		 * from the documentation in math.expression.docs.\n		 * @param search A function or function name for which to get help\n		 * @returns A help object\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		help(search: () => any): Help;\n\n		/**\n		 * Parse an expression. Returns a node tree, which can be evaluated by\n		 * invoking node.evaluate();\n		 */\n		parse: ParseFunction;\n\n		/**\n		 * Create a parser. The function creates a new math.expression.Parser\n		 * object.\n		 * @returns A Parser object\n		 */\n		parser(): Parser;\n\n		/*************************************************************************\n		 * Algebra functions\n		 ************************************************************************/\n		/**\n		 * @param expr The expression to differentiate\n		 * @param variable The variable over which to differentiate\n		 * @param options There is one option available, simplify, which is true\n		 * by default. When false, output will not be simplified.\n		 * @returns The derivative of expr\n		 */\n		derivative(\n			expr: MathNode | string,\n			variable: MathNode | string,\n			options?: { simplify: boolean }\n		): MathNode;\n\n		/**\n		 * Solves the linear equation system by forwards substitution. Matrix\n		 * must be a lower triangular matrix.\n		 * @param L A N x N matrix or array (L)\n		 * @param b A column vector with the b values\n		 * @returns A column vector with the linear system solution (x)\n		 */\n		lsolve(L: Matrix, b: MathCollection): Matrix;\n		lsolve(L: MathArray, b: MathCollection): MathArray;\n\n		/**\n		 * Calculate the Matrix LU decomposition with partial pivoting. Matrix A\n		 * is decomposed in two matrices (L, U) and a row permutation vector p\n		 * where A[p,:] = L * U\n		 * @param A A two dimensional matrix or array for which to get the LUP\n		 * decomposition.\n		 * @returns The lower triangular matrix, the upper triangular matrix and\n		 * the permutation matrix.\n		 */\n		lup(A?: MathCollection): LUDecomposition;\n\n		/**\n		 * Solves the linear system A * x = b where A is an [n x n] matrix and b\n		 * is a [n] column vector.\n		 * @param A Invertible Matrix or the Matrix LU decomposition\n		 * @param b Column Vector\n		 * @param order The Symbolic Ordering and Analysis order, see slu for\n		 * details. Matrix must be a SparseMatrix\n		 * @param threshold Partial pivoting threshold (1 for partial pivoting),\n		 * see slu for details. Matrix must be a SparseMatrix.\n		 * @returns Column vector with the solution to the linear system A * x =\n		 * b\n		 */\n		lusolve(\n			A: Matrix,\n			b: MathCollection,\n			order?: number,\n			threshold?: number\n		): Matrix;\n\n		lusolve(\n			A: MathArray,\n			b: MathCollection,\n			order?: number,\n			threshold?: number\n		): MathArray;\n\n		lusolve(A: LUDecomposition, b: MathCollection): Matrix;\n\n		/* Finds the roots of a polynomial of degree three or less. Coefficients are given constant first\n   * followed by linear and higher powers in order; coefficients beyond the degree of the polynomial\n   * need not be specified.\n   * @param {number|Complex} constantCoeff\n   * @param {number|Complex} linearCoeff\n   * @param {number|Complex} quadraticCoeff\n   * @param {number|Complex} cubicCoeff\n   * @returns {Array<number|Complex>} array of roots of specified polynomial\n   */\n		polynomialRoot(\n			constantCoeff: number | Complex,\n			linearCoeff: number | Complex,\n			quadraticCoeff?: number | Complex,\n			cubicCoeff?: number | Complex\n		): (number | Complex)[];\n\n		/**\n		 * Calculate the Matrix QR decomposition. Matrix A is decomposed in two\n		 * matrices (Q, R) where Q is an orthogonal matrix and R is an upper\n		 * triangular matrix.\n		 * @param A A two dimensional matrix or array for which to get the QR\n		 * decomposition.\n		 * @returns Q: the orthogonal matrix and R: the upper triangular matrix\n		 */\n		qr(A: MathCollection): QRDecomposition;\n\n		rationalize(\n			expr: MathNode | string,\n			optional?: object | boolean,\n			detailed?: false\n		): MathNode;\n		/**\n		 * Transform a rationalizable expression in a rational fraction. If\n		 * rational fraction is one variable polynomial then converts the\n		 * numerator and denominator in canonical form, with decreasing\n		 * exponents, returning the coefficients of numerator.\n		 * @param expr The expression to check if is a polynomial expression\n		 * @param optional scope of expression or true for already evaluated\n		 * rational expression at input\n		 * @param detailed  optional True if return an object, false if return\n		 * expression node (default)\n		 * @returns The rational polynomial of expr\n		 */\n		rationalize(\n			expr: MathNode | string,\n			optional?: object | boolean,\n			detailed?: true\n		): {\n			expression: MathNode | string\n			variables: string[]\n			coefficients: MathType[]\n		};\n\n		/**\n		 * Simplify an expression tree.\n		 * @param expr The expression to be simplified\n		 * @param [rules] (optional) A list of rules are applied to an expression, repeating\n		 * over the list until no further changes are made. It’s possible to\n		 * pass a custom set of rules to the function as second argument. A rule\n		 * can be specified as an object, string, or function.\n		 * @param [scope] (optional) Scope to variables\n		 * @param [options] (optional) An object with simplify options\n		 * @returns Returns the simplified form of expr\n		 */\n		simplify: Simplify;\n\n		simplifyConstant(expr: MathNode | string, options?: SimplifyOptions): MathNode;\n		simplifyCore(expr: MathNode | string, options?: SimplifyOptions): MathNode;\n\n		/**\n		 *  Replaces variable nodes with their scoped values\n		 * @param node Tree to replace variable nodes in\n		 * @param scope Scope to read/write variables\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		resolve(node: MathNode | string, scope?: Record<string, any>): MathNode;\n		resolve(\n			node: (MathNode | string)[],\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			scope?: Record<string, any>\n		): MathNode[];\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		resolve(node: Matrix, scope?: Record<string, any>): Matrix;\n\n		/**\n		 * Calculate the Sparse Matrix LU decomposition with full pivoting.\n		 * Sparse Matrix A is decomposed in two matrices (L, U) and two\n		 * permutation vectors (pinv, q) where P * A * Q = L * U\n		 * @param A A two dimensional sparse matrix for which to get the LU\n		 * decomposition.\n		 * @param order The Symbolic Ordering and Analysis order: 0 - Natural\n		 * ordering, no permutation vector q is returned 1 - Matrix must be\n		 * square, symbolic ordering and analisis is performed on M = A + A' 2 -\n		 * Symbolic ordering and analysis is performed on M = A' * A. Dense\n		 * columns from A' are dropped, A recreated from A'. This is appropriate\n		 * for LU factorization of non-symmetric matrices. 3 - Symbolic ordering\n		 * and analysis is performed on M = A' * A. This is best used for LU\n		 * factorization is matrix M has no dense rows. A dense row is a row\n		 * with more than 10*sqr(columns) entries.\n		 * @param threshold Partial pivoting threshold (1 for partial pivoting)\n		 * @returns The lower triangular matrix, the upper triangular matrix and\n		 * the permutation vectors.\n		 */\n		slu(A: Matrix, order: number, threshold: number): SLUDecomposition;\n\n		/**\n		 * Solves the linear equation system by backward substitution. Matrix\n		 * must be an upper triangular matrix. U * x = b\n		 * @param U A N x N matrix or array (U)\n		 * @param b A column vector with the b values\n		 * @returns A column vector with the linear system solution (x)\n		 */\n		usolve(U: Matrix, b: MathCollection): Matrix;\n		usolve(U: MathArray, b: MathCollection): MathArray;\n\n		/*************************************************************************\n		 * Arithmetic functions\n		 ************************************************************************/\n\n		/**\n		 * Calculate the absolute value of a number. For matrices, the function\n		 * is evaluated element wise.\n		 * @param x A number or matrix for which to get the absolute value\n		 * @returns Absolute value of x\n		 */\n		abs<T extends MathType>(x: T): T;\n\n		/**\n		 * Add two values, x + y. For matrices, the function is evaluated\n		 * element wise.\n		 * @param x First value to add\n		 * @param y Second value to add\n		 * @returns Sum of x and y\n		 */\n		add<T extends MathType>(x: T, y: T): T;\n		add<T extends MathType>(...values: T[]): T;\n		add(x: MathType, y: MathType): MathType;\n		add(...values: MathType[]): MathType;\n\n		/**\n		 * Calculate the cubic root of a value.\n		 * @param x Value for which to calculate the cubic root.\n		 * @param allRoots Optional, false by default. Only applicable when x is\n		 * a number or complex number. If true, all complex roots are returned,\n		 * if false (default) the principal root is returned.\n		 * @returns Returns the cubic root of x\n		 */\n		cbrt(x: Complex, allRoots?: boolean): Complex;\n		cbrt<T extends number | BigNumber | Unit>(x: T): T;\n\n		// Rounding functions, grouped for similarity, even though it breaks\n		// the alphabetic order among arithmetic functions.\n\n		/**\n		 * Round a value towards plus infinity If x is complex, both real and\n		 * imaginary part are rounded towards plus infinity. For matrices, the\n		 * function is evaluated element wise.\n		 * @param x Number to be rounded\n		 * @param n Number of decimals Default value: 0.\n		 * @returns Rounded value\n		 */\n		ceil<T extends MathNumericType | MathCollection>(\n			x: T,\n			n?: number | BigNumber\n		): NoLiteralType<T>;\n		ceil<U extends MathCollection>(x: MathNumericType, n: U): U;\n\n		/**\n		 * Round a value towards zero. For matrices, the function is evaluated\n		 * element wise.\n		 * @param x Number to be rounded\n		 * @param n Number of decimals Default value: 0.\n		 * @returns Rounded value\n		 */\n		fix<T extends MathNumericType | MathCollection>(\n			x: T,\n			n?: number | BigNumber\n		): NoLiteralType<T>;\n		fix<U extends MathCollection>(x: MathNumericType, n: U): U;\n\n		/**\n		 * Round a value towards minus infinity. For matrices, the function is\n		 * evaluated element wise.\n		 * @param x Number to be rounded\n		 * @param n Number of decimals Default value: 0.\n		 * @returns Rounded value\n		 */\n		floor<T extends MathNumericType | MathCollection>(\n			x: T,\n			n?: number | BigNumber\n		): NoLiteralType<T>;\n		floor<U extends MathCollection>(x: MathNumericType, n: U): U;\n\n		/**\n		 * Round a value towards the nearest integer. For matrices, the function\n		 * is evaluated element wise.\n		 * @param x Number to be rounded\n		 * @param n Number of decimals Default value: 0.\n		 * @returns Rounded value of x\n		 */\n		round<T extends MathNumericType | MathCollection>(\n			x: T,\n			n?: number | BigNumber\n		): NoLiteralType<T>;\n		round<U extends MathCollection>(x: MathNumericType, n: U): U;\n		round<U extends MathCollection>(x: U, unit: Unit): U;\n		round(x: Unit, unit: Unit): Unit;\n		round(x: Unit, n: number | BigNumber, unit: Unit): Unit;\n		round<U extends MathCollection>(x: U, n: number | BigNumber, unit: Unit): U;\n\n		// End of group of rounding functions\n\n		/**\n		 * Compute the cube of a value, x * x * x. For matrices, the function is\n		 * evaluated element wise.\n		 * @param x Number for which to calculate the cube\n		 * @returns Cube of x\n		 */\n		cube<T extends MathNumericType | Unit>(x: T): T;\n\n		/**\n		 * Divide two values, x / y. To divide matrices, x is multiplied with\n		 * the inverse of y: x * inv(y).\n		 * @param x Numerator\n		 * @param y Denominator\n		 * @returns Quotient, x / y\n		 */\n		divide(x: Unit, y: Unit): Unit | number;\n		divide(x: Unit, y: number): Unit;\n		divide(x: number, y: number): number;\n		divide(x: MathType, y: MathType): MathType;\n\n		/**\n		 * Divide two matrices element wise. The function accepts both matrices\n		 * and scalar values.\n		 * @param x Numerator\n		 * @param y Denominator\n		 * @returns Quotient, x ./ y\n		 */\n		dotDivide<T extends MathCollection>(x: T, y: MathType): T;\n		dotDivide<T extends MathCollection>(x: MathType, y: T): T;\n		dotDivide(x: Unit, y: MathType): Unit;\n		dotDivide(x: MathType, y: Unit): Unit;\n		dotDivide(x: MathNumericType, y: MathNumericType): MathNumericType;\n\n		/**\n		 * Multiply two matrices element wise. The function accepts both\n		 * matrices and scalar values.\n		 * @param x Left hand value\n		 * @param y Right hand value\n		 * @returns Multiplication of x and y\n		 */\n		dotMultiply<T extends MathCollection>(x: T, y: MathType): T;\n		dotMultiply<T extends MathCollection>(x: MathType, y: T): T;\n		dotMultiply(x: Unit, y: MathType): Unit;\n		dotMultiply(x: MathType, y: Unit): Unit;\n		dotMultiply(x: MathNumericType, y: MathNumericType): MathNumericType;\n\n		/**\n		 * Calculates the power of x to y element wise.\n		 * @param x The base\n		 * @param y The exponent\n		 * @returns The value of x to the power y\n		 */\n		dotPow<T extends MathType>(x: T, y: MathType): T;\n\n		/**\n		 * Calculate the exponent of a value. For matrices, the function is\n		 * evaluated element wise.\n		 * @param x A number or matrix to exponentiate\n		 * @returns Exponent of x\n		 */\n		exp<T extends number | BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the value of subtracting 1 from the exponential value. For\n		 * matrices, the function is evaluated element wise.\n		 * @param x A number or matrix to apply expm1\n		 * @returns Exponent of x\n		 */\n		expm1<T extends number | BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the greatest common divisor for two or more values or\n		 * arrays. For matrices, the function is evaluated element wise.\n		 * @param args Two or more integer numbers\n		 * @returns The greatest common divisor\n		 */\n		gcd<T extends number | BigNumber | Fraction | MathCollection>(...args: T[]): T;\n		gcd<T extends number | BigNumber | Fraction | Matrix>(args: T[]): T;\n\n		/**\n		 * Calculate the hypotenuse of a list with values. The hypotenuse is\n		 * defined as: hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...) For\n		 * matrix input, the hypotenuse is calculated for all values in the\n		 * matrix.\n		 * @param args A list with numeric values or an Array or Matrix. Matrix\n		 * and Array input is flattened and returns a single number for the\n		 * whole matrix.\n		 * @returns Returns the hypothenuse of the input values.\n		 */\n		hypot<T extends number | BigNumber>(...args: T[]): T;\n		hypot<T extends number | BigNumber>(args: T[]): T;\n\n		/**\n		 * Calculate the least common multiple for two or more values or arrays.\n		 * lcm is defined as: lcm(a, b) = abs(a * b) / gcd(a, b) For matrices,\n		 * the function is evaluated element wise.\n		 * @param a An integer number\n		 * @param b An integer number\n		 * @returns The least common multiple\n		 */\n		lcm<T extends number | BigNumber | MathCollection>(a: T, b: T): T;\n\n		/**\n		 * Calculate the logarithm of a value.\n		 * @param x Value for which to calculate the logarithm.\n		 * @param base Optional base for the logarithm. If not provided, the\n		 * natural logarithm of x is calculated. Default value: e.\n		 * @returns Returns the logarithm of x\n		 */\n		log<T extends number | BigNumber | Complex>(\n			x: T,\n			base?: number | BigNumber | Complex\n		): NoLiteralType<T>;\n\n		/**\n		 * Calculate the 10-base of a value. This is the same as calculating\n		 * log(x, 10). For matrices, the function is evaluated element wise.\n		 * @param x Value for which to calculate the logarithm.\n		 * @returns Returns the 10-base logarithm of x\n		 */\n		log10<T extends number | BigNumber | Complex | MathCollection>(x: T): T;\n\n		/**\n		 * Calculate the logarithm of a value+1. For matrices, the function is\n		 * evaluated element wise.\n		 * @param x Value for which to calculate the logarithm.\n		 * @returns Returns the logarithm of x+1\n		 */\n		log1p<T extends number | BigNumber | Complex | MathCollection>(\n			x: T,\n			base?: number | BigNumber | Complex\n		): T;\n\n		/**\n		 * Calculate the 2-base of a value. This is the same as calculating\n		 * log(x, 2). For matrices, the function is evaluated element wise.\n		 * @param x Value for which to calculate the logarithm.\n		 * @returns Returns the 2-base logarithm of x\n		 */\n		log2<T extends number | BigNumber | Complex | MathCollection>(x: T): T;\n\n		/**\n		 * Calculates the modulus, the remainder of an integer division. For\n		 * matrices, the function is evaluated element wise. The modulus is\n		 * defined as: x - y * floor(x / y)\n		 * @see http://en.wikipedia.org/wiki/Modulo_operation.\n		 * @param x Dividend\n		 * @param y Divisor\n		 * @returns Returns the remainder of x divided by y\n		 */\n		mod<T extends number | BigNumber | bigint | Fraction | MathCollection>(\n			x: T,\n			y: number | BigNumber | bigint | Fraction | MathCollection\n		): NoLiteralType<T>;\n\n		/**\n		 * Multiply two values, x * y. The result is squeezed. For matrices, the\n		 * matrix product is calculated.\n		 * @param x The first value to multiply\n		 * @param y The second value to multiply\n		 * @returns Multiplication of x and y\n		 */\n\n		multiply<T extends Matrix>(x: T, y: MathType): Matrix;\n		multiply<T extends Matrix>(x: MathType, y: T): Matrix;\n\n		multiply<T extends MathNumericType[]>(x: T, y: T[]): T;\n		multiply<T extends MathNumericType[]>(x: T[], y: T): T;\n		multiply<T extends MathArray>(x: T, y: T): T;\n		multiply(x: Unit, y: Unit): Unit;\n		multiply(x: number, y: number): number;\n		multiply(x: MathType, y: MathType): MathType;\n		multiply<T extends MathType>(...values: T[]): T;\n		multiply(...values: MathType[]): MathType;\n\n		/**\n		 * Calculate the norm of a number, vector or matrix. The second\n		 * parameter p is optional. If not provided, it defaults to 2.\n		 * @param x Value for which to calculate the norm\n		 * @param p Vector space. Supported numbers include Infinity and\n		 * -Infinity. Supported strings are: 'inf', '-inf', and 'fro' (The\n		 * Frobenius norm) Default value: 2.\n		 * @returns the p-norm\n		 */\n		norm(\n			x: number | BigNumber | Complex | MathCollection,\n			p?: number | BigNumber | string\n		): number | BigNumber;\n\n		/**\n		 * Calculate the nth root of a value. The principal nth root of a\n		 * positive real number A, is the positive real solution of the equation\n		 * x^root = A For matrices, the function is evaluated element wise.\n		 * @param a Value for which to calculate the nth root\n		 * @param root The root. Default value: 2.\n		 * @return The nth root of a\n		 */\n		nthRoot(\n			a: number | BigNumber | MathCollection | Complex,\n			root?: number | BigNumber\n		): number | Complex | MathCollection;\n\n		/**\n		 * Calculates the power of x to y, x ^ y. Matrix exponentiation is\n		 * supported for square matrices x, and positive integer exponents y.\n		 * @param x The base\n		 * @param y The exponent\n		 * @returns x to the power y\n		 */\n		pow(x: MathType, y: number | BigNumber | bigint | Complex): MathType;\n\n		/**\n		 * Compute the sign of a value. The sign of a value x is: 1 when x > 1\n		 * -1 when x < 0 0 when x == 0 For matrices, the function is evaluated\n		 * element wise.\n		 * @param x The number for which to determine the sign\n		 * @returns The sign of x\n		 */\n		sign<T extends MathType>(x: T): T;\n\n		/**\n		 * Calculate the square root of a value. For matrices, use either\n		 * sqrtm for the matrix square root, or map(M, sqrt) to take the\n		 * square root element wise.\n		 * @param x Value for which to calculate the square root\n		 * @returns Returns the square root of x\n		 */\n		sqrt(x: number): number | Complex;\n		sqrt<T extends BigNumber | Complex | Unit>(x: T): T;\n\n		/**\n		 * Compute the square of a value, x * x.\n		 * @param x Number for which to calculate the square\n		 * @returns Squared value\n		 */\n		square<T extends MathNumericType | Unit>(x: T): T;\n\n		/**\n		 * Subtract two values, x - y. For matrices, the function is evaluated\n		 * element wise.\n		 * @param x Initial value\n		 * @param y Value to subtract from x\n		 * @returns Subtraction of x and y\n		 */\n		subtract<T extends MathType>(x: T, y: T): T;\n		subtract(x: MathType, y: MathType): MathType;\n\n		/**\n		 * Inverse the sign of a value, apply a unary minus operation. For\n		 * matrices, the function is evaluated element wise. Boolean values and\n		 * strings will be converted to a number. For complex numbers, both real\n		 * and complex value are inverted.\n		 * @param x Number to be inverted\n		 * @returns Retursn the value with inverted sign\n		 */\n		unaryMinus<T extends MathType>(x: T): T;\n\n		/**\n		 * Unary plus operation. Boolean values and strings will be converted to\n		 * a number, numeric values will be returned as is. For matrices, the\n		 * function is evaluated element wise.\n		 * @param x Input value\n		 * @returns Returns the input value when numeric, converts to a number\n		 * when input is non-numeric.\n		 */\n		unaryPlus<T extends string | MathType>(x: T): T;\n\n		/**\n		 * Calculate the extended greatest common divisor for two values. See\n		 * http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n		 * @param a An integer number\n		 * @param b An integer number\n		 * @returns Returns an array containing 3 integers [div, m, n] where div\n		 * = gcd(a, b) and a*m + b*n = div\n		 */\n		xgcd(a: number | BigNumber, b: number | BigNumber): MathArray;\n\n		/*************************************************************************\n		 * Bitwise functions\n		 ************************************************************************/\n\n		/**\n		 * Bitwise AND two values, x & y. For matrices, the function is\n		 * evaluated element wise.\n		 * @param x First value to and\n		 * @param y Second value to and\n		 * @returns AND of x and y\n		 */\n		bitAnd<T extends number | BigNumber | bigint | MathCollection>(\n			x: T,\n			y: number | BigNumber | bigint | MathCollection\n		): NoLiteralType<T>;\n\n		/**\n		 * Bitwise NOT value, ~x. For matrices, the function is evaluated\n		 * element wise. For units, the function is evaluated on the best prefix\n		 * base.\n		 * @param x Value to not\n		 * @returns NOT of x\n		 */\n		bitNot<T extends number | BigNumber | bigint | MathCollection>(x: T): T;\n\n		/**\n		 * Bitwise OR two values, x | y. For matrices, the function is evaluated\n		 * element wise. For units, the function is evaluated on the lowest\n		 * print base.\n		 * @param x First value to or\n		 * @param y Second value to or\n		 * @returns OR of x and y\n		 */\n		bitOr<T extends number | BigNumber | bigint | MathCollection>(x: T, y: T): T;\n\n		/**\n		 * Bitwise XOR two values, x ^ y. For matrices, the function is\n		 * evaluated element wise.\n		 * @param x First value to xor\n		 * @param y Second value to xor\n		 * @returns XOR of x and y\n		 */\n		bitXor<T extends number | BigNumber | bigint | MathCollection>(\n			x: T,\n			y: number | BigNumber | bigint | MathCollection\n		): NoLiteralType<T>;\n\n		/**\n		 * Bitwise left logical shift of a value x by y number of bits, x << y.\n		 * For matrices, the function is evaluated element wise. For units, the\n		 * function is evaluated on the best prefix base.\n		 * @param x Value to be shifted\n		 * @param y Amount of shifts\n		 * @returns x shifted left y times\n		 */\n		leftShift<T extends number | BigNumber | bigint | MathCollection>(\n			x: T,\n			y: number | BigNumber | bigint\n		): NoLiteralType<T>;\n\n		/**\n		 * Bitwise right arithmetic shift of a value x by y number of bits, x >>\n		 * y. For matrices, the function is evaluated element wise. For units,\n		 * the function is evaluated on the best prefix base.\n		 * @param x Value to be shifted\n		 * @param y Amount of shifts\n		 * @returns x sign-filled shifted right y times\n		 */\n		rightArithShift<T extends number | BigNumber | bigint | MathCollection>(\n			x: T,\n			y: number | BigNumber | bigint\n		): NoLiteralType<T>;\n\n		/**\n		 * Bitwise right logical shift of value x by y number of bits, x >>> y.\n		 * For matrices, the function is evaluated element wise. For units, the\n		 * function is evaluated on the best prefix base.\n		 * @param x Value to be shifted\n		 * @param y Amount of shifts\n		 * @returns x zero-filled shifted right y times\n		 */\n		rightLogShift<T extends number | MathCollection>(\n			x: T,\n			y: number\n		): NoLiteralType<T>;\n\n		/*************************************************************************\n		 * Combinatorics functions\n		 ************************************************************************/\n\n		/**\n		 * The Bell Numbers count the number of partitions of a set. A partition\n		 * is a pairwise disjoint subset of S whose union is S. bellNumbers only\n		 * takes integer arguments. The following condition must be enforced: n\n		 * >= 0\n		 * @param n Total number of objects in the set\n		 * @returns B(n)\n		 */\n		bellNumbers<T extends number | BigNumber>(n: T): T;\n\n		/**\n		 * The Catalan Numbers enumerate combinatorial structures of many\n		 * different types. catalan only takes integer arguments. The following\n		 * condition must be enforced: n >= 0\n		 * @param n nth Catalan number\n		 * @returns Cn(n)\n		 */\n		catalan<T extends number | BigNumber>(n: T): T;\n\n		/**\n		 * The composition counts of n into k parts. Composition only takes\n		 * integer arguments. The following condition must be enforced: k <= n.\n		 * @param n Total number of objects in the set\n		 * @param k Number of objects in the subset\n		 * @returns Returns the composition counts of n into k parts.\n		 */\n		composition<T extends number | BigNumber>(\n			n: T,\n			k: number | BigNumber\n		): NoLiteralType<T>;\n\n		/**\n		 * The Stirling numbers of the second kind, counts the number of ways to\n		 * partition a set of n labelled objects into k nonempty unlabelled\n		 * subsets. stirlingS2 only takes integer arguments. The following\n		 * condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) =\n		 * 1\n		 * @param n Total number of objects in the set\n		 * @param k Number of objects in the subset\n		 * @returns S(n,k)\n		 */\n		stirlingS2<T extends number | BigNumber>(\n			n: T,\n			k: number | BigNumber\n		): NoLiteralType<T>;\n\n		/*************************************************************************\n		 * Complex functions\n		 ************************************************************************/\n\n		/**\n		 * Compute the argument of a complex value. For a complex number a + bi,\n		 * the argument is computed as atan2(b, a). For matrices, the function\n		 * is evaluated element wise.\n		 * @param x A complex number or array with complex numbers\n		 * @returns The argument of x\n		 */\n		arg(x: number | Complex): number;\n		arg(x: BigNumber | Complex): BigNumber;\n		arg<T extends MathCollection>(x: T): T;\n\n		/**\n		 * Compute the complex conjugate of a complex value. If x = a+bi, the\n		 * complex conjugate of x is a - bi. For matrices, the function is\n		 * evaluated element wise.\n		 * @param x A complex number or array with complex numbers\n		 * @returns The complex conjugate of x\n		 */\n		conj<T extends number | BigNumber | Complex | MathCollection>(\n			x: T\n		): NoLiteralType<T>;\n\n		/**\n		 * Get the imaginary part of a complex number. For a complex number a +\n		 * bi, the function returns b. For matrices, the function is evaluated\n		 * element wise.\n		 * @param x A complex number or array with complex numbers\n		 * @returns The imaginary part of x\n		 */\n		im(x: MathJsChain<number | Complex>): MathJsChain<number>;\n		im<T extends BigNumber | MathCollection>(x: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Get the real part of a complex number. For a complex number a + bi,\n		 * the function returns a. For matrices, the function is evaluated\n		 * element wise.\n		 * @param x A complex number or array of complex numbers\n		 * @returns The real part of x\n		 */\n		re(x: MathJsChain<number | Complex>): MathJsChain<number>;\n		re<T extends BigNumber | MathCollection>(x: MathJsChain<T>): MathJsChain<T>;\n\n		/*************************************************************************\n		 * Geometry functions\n		 ************************************************************************/\n\n		/**\n		 * Calculates: The eucledian distance between two points in 2 and 3\n		 * dimensional spaces. Distance between point and a line in 2 and 3\n		 * dimensional spaces. Pairwise distance between a set of 2D or 3D\n		 * points NOTE: When substituting coefficients of a line(a, b and c),\n		 * use ax + by + c = 0 instead of ax + by = c For parametric equation of\n		 * a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b,\n		 * c)\n		 * @param x Coordinates of the first point\n		 * @param y Coordinates of the second point OR coefficients of a line in 3D OR first end-point of a line if the calculation is for distance between point and a line in 2D\n		 * @param z Coordinates of second end-point of a line if the calculation is for distance between point and a line in 2D\n		 * @returns Returns the distance from two/three points\n		 */\n		distance(\n			x: MathCollection | object,\n			y: MathCollection | object,\n			z?: MathCollection | object\n		): number | BigNumber;\n\n		/**\n		 * Calculates the point of intersection of two lines in two or three\n		 * dimensions and of a line and a plane in three dimensions. The inputs\n		 * are in the form of arrays or 1 dimensional matrices. The line\n		 * intersection functions return null if the lines do not meet. Note:\n		 * Fill the plane coefficients as x + y + z = c and not as x + y + z + c\n		 * = 0.\n		 * @param w Co-ordinates of first end-point of first line\n		 * @param x Co-ordinates of second end-point of first line\n		 * @param y Co-ordinates of first end-point of second line OR\n		 * Coefficients of the plane's equation\n		 * @param z Co-ordinates of second end-point of second line OR null if\n		 * the calculation is for line and plane\n		 * @returns Returns the point of intersection of lines/lines-planes\n		 */\n		intersect(\n			w: MathCollection,\n			x: MathCollection,\n			y: MathCollection,\n			z?: MathCollection\n		): MathArray;\n\n		/*************************************************************************\n		 * Logical functions\n		 ************************************************************************/\n\n		/**\n		 * Logical and. Test whether two values are both defined with a\n		 * nonzero/nonempty value. For matrices, the function is evaluated\n		 * element wise.\n		 * @param x First value to and\n		 * @param y Second value to and\n		 * @returns Returns true when both inputs are defined with a\n		 * nonzero/nonempty value.\n		 */\n		and(\n			x: number | BigNumber | bigint | Complex | Unit | MathCollection,\n			y: number | BigNumber | bigint | Complex | Unit | MathCollection\n		): boolean | MathCollection;\n\n		/**\n		 * Logical not. Flips boolean value of a given parameter. For matrices,\n		 * the function is evaluated element wise.\n		 * @param x First value to not\n		 * @returns Returns true when input is a zero or empty value.\n		 */\n		not(\n			x: number | BigNumber | bigint | Complex | Unit | MathCollection\n		): boolean | MathCollection;\n\n		/**\n		 * Logical or. Test if at least one value is defined with a\n		 * nonzero/nonempty value. For matrices, the function is evaluated\n		 * element wise.\n		 * @param x First value to or\n		 * @param y Second value to or\n		 * @returns Returns true when one of the inputs is defined with a\n		 * nonzero/nonempty value.\n		 */\n		or(\n			x: number | BigNumber | bigint | Complex | Unit | MathCollection,\n			y: number | BigNumber | bigint | Complex | Unit | MathCollection\n		): boolean | MathCollection;\n\n		/**\n		 * Logical xor. Test whether one and only one value is defined with a\n		 * nonzero/nonempty value. For matrices, the function is evaluated\n		 * element wise.\n		 * @param x First value to xor\n		 * @param y Second value to xor\n		 * @returns Returns true when one and only one input is defined with a\n		 * nonzero/nonempty value.\n		 */\n		xor(\n			x: number | BigNumber | bigint | Complex | Unit | MathCollection,\n			y: number | BigNumber | bigint | Complex | Unit | MathCollection\n		): boolean | MathCollection;\n\n		/*************************************************************************\n		 * Matrix functions\n		 ************************************************************************/\n\n		/**\n		 * Apply a function that maps an array to a scalar along a given axis of a\n		 * matrix or array. Returns a new matrix or array with one less dimension\n		 * than the input.\n		 * @param array The input Matrix\n		 * @param dim The dimension along which the callback is applied\n		 * @param callback The callback function that is applied. This Function should take an\n		 * array or 1-d matrix as an input and return a number.\n		 * @returns The residual matrix with the function applied over some dimension.\n		 */\n		apply<T extends MathCollection>(\n			array: T,\n			dim: number,\n			callback: (array: MathCollection) => number\n		): T;\n\n		/**\n		 * Concatenate two or more matrices. dim: number is a zero-based\n		 * dimension over which to concatenate the matrices. By default the last\n		 * dimension of the matrices.\n		 * @param args Two or more matrices\n		 * @returns Concatenated matrix\n		 */\n		concat(...args: Array<MathCollection | number | BigNumber>): MathCollection;\n\n		/**\n		 * Calculate the cross product for two vectors in three dimensional\n		 * space. The cross product of A = [a1, a2, a3] and B =[b1, b2, b3] is\n		 * defined as: cross(A, B) = [ a2 * b3 - a3 * b2, a3 * b1 - a1 * b3, a1\n		 * * b2 - a2 * b1 ]\n		 * @param x First vector\n		 * @param y Second vector\n		 * @returns Returns the cross product of x and y\n		 */\n		cross(x: MathCollection, y: MathCollection): MathCollection;\n\n		/**\n		 * Calculate the determinant of a matrix.\n		 * @param x A Matrix\n		 * @returns the determinant of x\n		 */\n		det(x: MathCollection): number;\n\n		/**\n		 * Create a diagonal matrix or retrieve the diagonal of a matrix. When x\n		 * is a vector, a matrix with vector x on the diagonal will be returned.\n		 * When x is a two dimensional matrix, the matrixes kth diagonal will be\n		 * returned as vector. When k is positive, the values are placed on the\n		 * super diagonal. When k is negative, the values are placed on the sub\n		 * diagonal.\n		 * @param X A two dimensional matrix or a vector\n		 * @param k The diagonal where the vector will be filled in or\n		 * retrieved. Default value: 0.\n		 * @param format The matrix storage format. Default value: 'dense'.\n		 * @returns Diagonal matrix from input vector, or diagonal from input\n		 * matrix\n		 */\n		diag(X: MathCollection, format?: string): Matrix;\n		diag(\n			X: MathCollection,\n			k: number | BigNumber,\n			format?: string\n		): MathCollection;\n\n		/**\n		 * Calculate the dot product of two vectors. The dot product of A = [a1,\n		 * a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] is defined as: dot(A,\n		 * B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn\n		 * @param x First vector\n		 * @param y Second vector\n		 * @returns Returns the dot product of x and y\n		 */\n		dot(x: MathCollection, y: MathCollection): number;\n\n		/**\n		 * Compute eigenvalues and eigenvectors of a matrix.\n		 * The eigenvalues are sorted by their absolute value, ascending.\n		 * An eigenvalue with multiplicity k will be listed k times.\n		 * The eigenvectors are returned as an array of objects, each with a\n		 * `value` and a `vector`. If the algorithm fails to converge,\n		 * it will throw an error – in that case, however, you may still find useful\n		 * information in err.values and err.vectors\n		 * @param x Matrix to be diagonalized\n		 * @param prec Precision, default value: 1e-15\n		 * @returns Object containing an array of eigenvalues and a matrix with eigenvectors as columns.\n		 */\n		eigs(\n			x: MathCollection,\n			opts?:\n				| number\n				| BigNumber\n				| { precision?: number | BigNumber; eigenvectors?: true }\n		): {\n			values: MathCollection\n			eigenvectors: {\n				value: number | BigNumber\n				vector: MathCollection\n			}[]\n		};\n		eigs(\n			x: MathCollection,\n			opts: { eigenvectors: false; precision?: number | BigNumber }\n		): { values: MathCollection };\n		/**\n		 * Compute the matrix exponential, expm(A) = e^A. The matrix must be\n		 * square. Not to be confused with exp(a), which performs element-wise\n		 * exponentiation. The exponential is calculated using the Padé\n		 * approximant with scaling and squaring; see “Nineteen Dubious Ways to\n		 * Compute the Exponential of a Matrix,” by Moler and Van Loan.\n		 * @param x A square matrix\n		 * @returns The exponential of x\n		 */\n		expm(x: Matrix): Matrix;\n\n		/**\n		 * Solves the real-valued Sylvester equation AX-XB=C for X, where A, B and C are\n		 * matrices of appropriate dimensions, being A and B squared. The method used is\n		 * the Bartels-Stewart algorithm.\n		 * https://en.wikipedia.org/wiki/Sylvester_equation\n		 * @param A  Matrix A\n		 * @param B  Matrix B\n		 * @param C  Matrix C\n		 * @returns  Matrix X, solving the Sylvester equation\n		 */\n		sylvester(\n			A: MathCollection,\n			B: MathCollection,\n			C: MathCollection\n		): MathCollection;\n\n		/**\n		 * Performs a real Schur decomposition of the real matrix A = UTU' where U is orthogonal\n		 * and T is upper quasi-triangular.\n		 * https://en.wikipedia.org/wiki/Schur_decomposition\n		 * @param A  Matrix A\n		 * @returns Object containing both matrix U and T of the Schur Decomposition A=UTU'\n		 */\n		schur(A: MathCollection): SchurDecomposition;\n\n		/**\n		 * Solves the Continuous-time Lyapunov equation AP+PA'=Q for P, where Q is a positive semidefinite\n		 * matrix.\n		 * https://en.wikipedia.org/wiki/Lyapunov_equation\n		 * @param A  Matrix A\n		 * @param Q  Matrix Q\n		 * @returns  Matrix P solution to the Continuous-time Lyapunov equation AP+PA'=Q\n		 */\n		lyap(A: MathCollection, Q: MathCollection): MathCollection;\n\n		/**\n		 * Create a 2-dimensional identity matrix with size m x n or n x n. The\n		 * matrix has ones on the diagonal and zeros elsewhere.\n		 * @param size The size for the matrix\n		 * @param format The Matrix storage format\n		 * @returns A matrix with ones on the diagonal\n		 */\n		identity(\n			size: number | number[] | MathCollection,\n			format?: string\n		): MathCollection | number;\n		/**\n		 * @param m The x dimension for the matrix\n		 * @param n The y dimension for the matrix\n		 * @param format The Matrix storage format\n		 * @returns A matrix with ones on the diagonal\n		 */\n		identity(m: number, n: number, format?: string): MathCollection | number;\n\n		/**\n		 * Filter the items in an array or one dimensional matrix.\n		 * @param x A one dimensional matrix or array to filter\n		 * @param test A function or regular expression to test items. All\n		 * entries for which test returns true are returned. When test is a\n		 * function, it is invoked with three parameters: the value of the\n		 * element, the index of the element, and the matrix/array being\n		 * traversed. The function must return a boolean.\n		 */\n		filter(\n			x: MathCollection | string[],\n			test:\n				| ((\n				// eslint-disable-next-line @typescript-eslint/no-explicit-any\n				value: any,\n				// eslint-disable-next-line @typescript-eslint/no-explicit-any\n				index: any,\n				matrix: MathCollection | string[]\n			) => boolean)\n				| RegExp\n		): MathCollection;\n\n		/**\n		 * Flatten a multi dimensional matrix into a single dimensional matrix.\n		 * @param x Matrix to be flattened\n		 * @returns Returns the flattened matrix\n		 */\n		flatten<T extends MathCollection>(x: T): T;\n\n		/**\n		 * Iterate over all elements of a matrix/array, and executes the given\n		 * callback function.\n		 * @param x The matrix to iterate on.\n		 * @param callback The callback function is invoked with three\n		 * parameters: the value of the element, the index of the element, and\n		 * the Matrix/array being traversed.\n		 */\n		forEach<T extends MathCollection>(\n			x: T,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			callback: (value: any, index: any, matrix: T) => void\n		): void;\n\n		/**\n		 * Calculate the inverse of a square matrix.\n		 * @param x Matrix to be inversed\n		 * @returns The inverse of x\n		 */\n		inv<T extends number | Complex | MathCollection>(x: T): NoLiteralType<T>;\n\n		/**\n		 * Calculate the Kronecker product of two matrices or vectors\n		 * @param x First vector\n		 * @param y Second vector\n		 * @returns Returns the Kronecker product of x and y\n		 */\n		kron(x: MathCollection, y: MathCollection): Matrix;\n\n		/**\n		 * Iterate over all elements of a matrix/array, and executes the given\n		 * callback function.\n		 * @param x The matrix to iterate on.\n		 * @param callback The callback function is invoked with three\n		 * parameters: the value of the element, the index of the element, and\n		 * the Matrix/array being traversed.\n		 * @returns Transformed map of x\n		 */\n		map<T extends MathCollection>(\n			x: T,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			callback: (value: any, index: number[], matrix: T) => MathType | string\n		): T;\n\n		/**\n		 * Iterate over all elements of multiple matrices/arrays, and executes the given\n		 * callback function.\n		 * @param x The first matrix to iterate on.\n		 * @param args The rest of the matrices and at the end the callback function is invoked with multiple\n		 * parameters: the values of the elements, the indices of the elements, and\n		 * the matrices/arrays being traversed.\n		 * @returns Transformed map of matrices\n		 */\n		map<T extends MathCollection>(\n			x: T,\n			...args: Array<\n				| T\n				| ((\n				// eslint-disable-next-line @typescript-eslint/no-explicit-any\n				value: any,\n				// eslint-disable-next-line @typescript-eslint/no-explicit-any\n				...args: Array<any | number[] | T>\n			) => MathType | string)\n			>\n		): T;\n\n		/**\n		 * Create a matrix filled with ones. The created matrix can have one or\n		 * multiple dimensions.\n		 * @param size The size of each dimension of the matrix\n		 * @param format The matrix storage format\n		 * @returns A matrix filled with ones\n		 */\n		ones(\n			size?: number | number[] | BigNumber | BigNumber[],\n			format?: string\n		): MathCollection;\n		/**\n		 * @param m The x dimension of the matrix\n		 * @param n The y dimension of the matrix\n		 * @param format The matrix storage format\n		 * @returns A matrix filled with ones\n		 */\n		ones(\n			m: number | BigNumber,\n			n: number | BigNumber,\n			format?: string\n		): MathCollection;\n		/**\n		 * @param m The x dimension of the matrix\n		 * @param n The y dimension of the matrix\n		 * @param p The z dimension of the matrix\n		 * @param format The matrix storage format\n		 * @returns A matrix filled with ones\n		 */\n		ones(\n			m: number | BigNumber,\n			n: number | BigNumber,\n			p: number | BigNumber,\n			format?: string\n		): MathCollection;\n		/** Actually ones can take an arbitrary number of dimensions before the\n		 ** optional format, not sure how to write that in TypeScript\n		 **/\n\n		/**\n		 * Partition-based selection of an array or 1D matrix. Will find the kth\n		 * smallest value, and mutates the input array. Uses Quickselect.\n		 * @param x A one dimensional matrix or array to sort\n		 * @param k The kth smallest value to be retrieved; zero-based index\n		 * @param compare  An optional comparator function. The function is\n		 * called as compare(a, b), and must return 1 when a > b, -1 when a < b,\n		 * and 0 when a == b. Default value: 'asc'.\n		 * @returns Returns the kth lowest value.\n		 */\n		partitionSelect(\n			x: MathCollection,\n			k: number,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			compare?: 'asc' | 'desc' | ((a: any, b: any) => number)\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		): any;\n\n		/**\n		 * Calculate the Moore–Penrose inverse of a matrix.\n		 * @param x Matrix to be inversed\n		 * @return The inverse of `x`.\n		 */\n		pinv<T extends MathType>(x: T): T;\n\n		/**\n		 * Create an array from a range. By default, the range end is excluded.\n		 * This can be customized by providing an extra parameter includeEnd.\n		 * @param str A string 'start:end' or 'start:step:end'\n		 * @param start Start of the range\n		 * @param end End of the range, excluded by default, included when\n		 * parameter includeEnd=true\n		 * @param step Step size. Default value is 1.\n		 * @param includeEnd: Option to specify whether to include the end or\n		 * not. False by default\n		 * @returns Parameters describing the ranges start, end, and optional\n		 * step.\n		 */\n		range(str: string, includeEnd?: boolean): Matrix;\n		range(\n			start: number | BigNumber,\n			end: number | BigNumber,\n			includeEnd?: boolean\n		): Matrix;\n		range(\n			start: number | BigNumber | Unit,\n			end: number | BigNumber | Unit,\n			step: number | BigNumber | Unit,\n			includeEnd?: boolean\n		): Matrix;\n\n		/**\n		 * Reshape a multi dimensional array to fit the specified dimensions\n		 * @param x Matrix to be reshaped\n		 * @param sizes One dimensional array with integral sizes for each\n		 * dimension\n		 * @returns A reshaped clone of matrix x\n		 */\n		reshape<T extends MathCollection>(x: T, sizes: number[]): T;\n\n		/**\n		 * Resize a matrix\n		 * @param x Matrix to be resized\n		 * @param size One dimensional array with numbers\n		 * @param defaultValue Zero by default, except in case of a string, in\n		 * that case defaultValue = ' ' Default value: 0.\n		 * @returns A resized clone of matrix x\n		 */\n		resize<T extends MathCollection>(\n			x: T,\n			size: MathCollection,\n			defaultValue?: number | string\n		): T;\n\n		/**\n		 * Return a Rotation Matrix for a given angle in radians\n		 * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n		 * @param {Array | Matrix} [v]                           Rotation axis\n		 * @param {string} [format]                              Result Matrix storage format. Default value: 'dense'.\n		 * @return {Matrix}                                      Rotation Matrix\n		 */\n		rotationMatrix<T extends MathCollection>(\n			theta?: number | BigNumber | Complex | Unit,\n			axis?: T,\n			format?: 'sparse' | 'dense'\n		): T;\n\n		/**\n		 * Return a row from a Matrix.\n		 * @param value An array or matrix\n		 * @param row The index of the row\n		 * @returns The retrieved row\n		 */\n		row<T extends MathCollection>(value: T, row: number): T;\n\n		/**\n		 * Return a column from a Matrix.\n		 * @param value An array or matrix\n		 * @param column The index of the column\n		 * @returns The retrieved column\n		 */\n		column<T extends MathCollection>(value: T, column: number): T;\n\n		/**\n		 * Return a rotated matrix.\n		 * @param {Array | Matrix} w                             Vector to rotate\n		 * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n		 * @param {Array | Matrix} [v]                           Rotation axis\n		 * @return {Array | Matrix}                              Multiplication of the rotation matrix and w\n		 */\n		rotate<T extends MathCollection>(\n			w: T,\n			theta: number | BigNumber | Complex | Unit,\n			v?: T\n		): T;\n\n		/**\n		 * Calculate the size of a matrix or scalar.\n		 * @param A matrix\n		 * @returns A vector with the size of x\n		 */\n		size(\n			x: boolean | number | Complex | Unit | string | MathCollection\n		): MathCollection;\n\n		/**\n		 * Sort the items in a matrix\n		 * @param x A one dimensional matrix or array to sort\n		 * @param compare An optional _comparator function or name. The function\n		 * is called as compare(a, b), and must return 1 when a > b, -1 when a <\n		 * b, and 0 when a == b. Default value: ‘asc’\n		 * @returns Returns the sorted matrix\n		 */\n		sort<T extends MathCollection>(\n			x: T,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			compare: ((a: any, b: any) => number) | 'asc' | 'desc' | 'natural'\n		): T;\n\n		/**\n		 * Calculate the principal square root of a square matrix. The principal\n		 * square root matrix X of another matrix A is such that X * X = A.\n		 * @param A The square matrix A\n		 * @returns The principal square root of matrix A\n		 */\n		sqrtm<T extends MathCollection>(A: T): T;\n\n		/**\n		 * Squeeze a matrix, remove inner and outer singleton dimensions from a\n		 * matrix.\n		 * @param x Matrix to be squeezed\n		 * @returns Squeezed matrix\n		 */\n		squeeze<T extends MathCollection>(x: T): T;\n\n		/**\n		 * Get or set a subset of a matrix or string.\n		 * @param value An array, matrix, or string\n		 * @param index For each dimension, an index or list of indices to get or set.\n		 * @param replacement An array, matrix, or scalar. If provided, the\n		 * subset is replaced with replacement. If not provided, the subset is\n		 * returned\n		 * @param defaultValue Default value, filled in on new entries when the\n		 * matrix is resized. If not provided, math.matrix elements will be left\n		 * undefined. Default value: undefined.\n		 * @returns Either the retrieved subset or the updated matrix\n		 */\n		subset<T extends MathCollection | string>(\n			value: T,\n			index: Index,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			replacement?: any,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			defaultValue?: any\n		): T;\n\n		/**\n		 * Calculate the trace of a matrix: the sum of the elements on the main\n		 * diagonal of a square matrix.\n		 * @param x A matrix\n		 * @returns The trace of x\n		 */\n		trace(x: MathCollection): number;\n\n		/**\n		 * Transpose a matrix. All values of the matrix are reflected over its\n		 * main diagonal. Only two dimensional matrices are supported.\n		 * @param x Matrix to be transposed\n		 * @returns The transposed matrix\n		 */\n		transpose<T extends MathCollection>(x: T): T;\n\n		/**\n		 * Create a matrix filled with zeros. The created matrix can have one or\n		 * multiple dimensions.\n		 * @param size The size of each dimension of the matrix\n		 * @param format The matrix storage format\n		 * @returns A matrix filled with zeros\n		 */\n		zeros(\n			size?: number | number[] | BigNumber | BigNumber[],\n			format?: string\n		): MathCollection;\n		/**\n		 * @param m The x dimension of the matrix\n		 * @param n The y dimension of the matrix\n		 * @param format The matrix storage format\n		 * @returns A matrix filled with zeros\n		 */\n		zeros(\n			m: number | BigNumber,\n			n: number | BigNumber,\n			format?: string\n		): MathCollection;\n		/**\n		 * @param m The x dimension of the matrix\n		 * @param n The y dimension of the matrix\n		 * @param p The z dimension of the matrix\n		 * @param format The matrix storage format\n		 * @returns A matrix filled with zeros\n		 */\n		zeros(\n			m: number | BigNumber,\n			n: number | BigNumber,\n			p: number | BigNumber,\n			format?: string\n		): MathCollection;\n		/** Actually zeros can take any number of dimensions before the\n		 ** optional format, not sure how to write that in TypeScript\n		 **/\n\n		/**\n		 * Calculate N-dimensional Fourier transform\n		 * @param {Array | Matrix} arr    An array or matrix\n		 * @return {Array | Matrix}       N-dimensional Fourier transformation of the array\n		 */\n		fft<T extends MathCollection>(arr: T): T;\n\n		/**\n		 * Calculate N-dimensional inverse Fourier transform\n		 * @param {Array | Matrix} arr    An array or matrix\n		 * @return {Array | Matrix}       N-dimensional Fourier transformation of the array\n		 */\n		ifft<T extends MathCollection>(arr: T): T;\n\n		/*************************************************************************\n		 * Probability functions\n		 ************************************************************************/\n\n		/**\n		 * Compute the number of ways of picking k unordered outcomes from n\n		 * possibilities. Combinations only takes integer arguments. The\n		 * following condition must be enforced: k <= n.\n		 * @param n Total number of objects in the set\n		 * @param k Number of objects in the subset\n		 * @returns Number of possible combinations\n		 */\n		combinations<T extends number | BigNumber>(\n			n: T,\n			k: number | BigNumber\n		): NoLiteralType<T>;\n\n		/**\n		 * Compute the factorial of a value Factorial only supports an integer\n		 * value as argument. For matrices, the function is evaluated element\n		 * wise.\n		 * @param n An integer number\n		 * @returns The factorial of n\n		 */\n		factorial<T extends number | BigNumber | MathCollection>(\n			n: T\n		): NoLiteralType<T>;\n\n		/**\n		 * Compute the gamma function of a value using Lanczos approximation for\n		 * small values, and an extended Stirling approximation for large\n		 * values.\n		 * @param n A real or complex number\n		 * @returns The gamma of n\n		 */\n		gamma<T extends number | BigNumber | Complex>(n: T): NoLiteralType<T>;\n\n		/**\n		 * Calculate the Kullback-Leibler (KL) divergence between two\n		 * distributions\n		 * @param q First vector\n		 * @param p Second vector\n		 * @returns Returns disance between q and p\n		 */\n		kldivergence(q: MathCollection, p: MathCollection): number;\n\n		/**\n		 * Compute the log gamma function of a value, using Lanczos approximation for numbers and Stirling series for complex numbers.\n		 * @param n A real or complex number\n		 * @returns The log gamma of `n`\n		 */\n		lgamma<T extends number | Complex>(n: T): NoLiteralType<T>;\n\n		/**\n		 * Multinomial Coefficients compute the number of ways of picking a1,\n		 * a2, ..., ai unordered outcomes from n possibilities. multinomial\n		 * takes one array of integers as an argument. The following condition\n		 * must be enforced: every ai <= 0\n		 * @param a Integer number of objects in the subset\n		 * @returns multinomial coefficent\n		 */\n		multinomial<T extends number | BigNumber>(a: T[]): NoLiteralType<T>;\n\n		/**\n		 * Compute the number of ways of obtaining an ordered subset of k\n		 * elements from a set of n elements. Permutations only takes integer\n		 * arguments. The following condition must be enforced: k <= n.\n		 * @param n The number of objects in total\n		 * @param k The number of objects in the subset\n		 * @returns The number of permutations\n		 */\n		permutations<T extends number | BigNumber>(\n			n: T,\n			k?: number | BigNumber\n		): NoLiteralType<T>;\n\n		/**\n		 * Random pick a value from a one dimensional array. Array element is\n		 * picked using a random function with uniform distribution.\n		 * @param array A one dimensional array\n		 * @param number An int or float\n		 * @param weights An array of ints or floats\n		 * @returns Returns a single random value from array when number is undefined.\n		 * Returns an array with the configured number of elements when number is defined.\n		 */\n		pickRandom<T>(array: T[]): T;\n		pickRandom<T>(array: T[], number: number): T[];\n		pickRandom<T>(array: T[], number: number, weights: number[]): T[];\n\n		/**\n		 * Return a random number larger or equal to min and smaller than max\n		 * using a uniform distribution.\n		 * @param size If provided, an array or matrix with given size and\n		 * filled with random values is returned\n		 * @param min Minimum boundary for the random value, included\n		 * @param max Maximum boundary for the random value, excluded\n		 * @returns A random number\n		 */\n		random(min?: number, max?: number): number;\n		random<T extends MathCollection>(size: T, min?: number, max?: number): T;\n\n		/**\n		 * Return a random integer number larger or equal to min and smaller\n		 * than max using a uniform distribution.\n		 * @param size If provided, an array or matrix with given size and\n		 * filled with random values is returned\n		 * @param min Minimum boundary for the random value, included\n		 * @param max Maximum boundary for the random value, excluded\n		 * @returns A random number\n		 */\n		randomInt(min: number, max?: number): number;\n		randomInt<T extends MathCollection>(size: T, min?: number, max?: number): T;\n\n		/*************************************************************************\n		 * Relational functions\n		 ************************************************************************/\n\n		/**\n		 * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x\n		 * == y. x and y are considered equal when the relative difference\n		 * between x and y is smaller than the configured relTol and absTol. The function\n		 * cannot be used to compare values smaller than approximately 2.22e-16.\n		 * For matrices, the function is evaluated element wise.\n		 * @param x First value to compare\n		 * @param y Second value to compare\n		 * @returns Returns the result of the comparison: 1 when x > y, -1 when\n		 * x < y, and 0 when x == y.\n		 */\n		compare(\n			x: MathType | string,\n			y: MathType | string\n		): number | BigNumber | Fraction | MathCollection;\n\n		/**\n		 * Compare two values of any type in a deterministic, natural way. For\n		 * numeric values, the function works the same as math.compare. For\n		 * types of values that can’t be compared mathematically, the function\n		 * compares in a natural way.\n		 * @param x First value to compare\n		 * @param y Second value to compare\n		 * @returns Returns the result of the comparison: 1 when x > y, -1 when\n		 * x < y, and 0 when x == y.\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		compareNatural(x: any, y: any): number;\n\n		/**\n		 * Compare two strings lexically. Comparison is case sensitive. Returns\n		 * 1 when x > y, -1 when x < y, and 0 when x == y. For matrices, the\n		 * function is evaluated element wise.\n		 * @param x First string to compare\n		 * @param y Second string to compare\n		 * @returns Returns the result of the comparison: 1 when x > y, -1 when\n		 * x < y, and 0 when x == y.\n		 */\n		compareText(\n			x: string | MathCollection,\n			y: string | MathCollection\n		): number | MathCollection;\n\n		/**\n		 * Test element wise whether two matrices are equal. The function\n		 * accepts both matrices and scalar values.\n		 * @param x First matrix to compare\n		 * @param y Second amtrix to compare\n		 * @returns Returns true when the input matrices have the same size and\n		 * each of their elements is equal.\n		 */\n		deepEqual(x: MathType, y: MathType): MathType;\n\n		/**\n		 * Test whether two values are equal.\n		 *\n		 * The function tests whether the relative difference between x and y is\n		 * smaller than the configured relTol and absTol. The function cannot be used to\n		 * compare values smaller than approximately 2.22e-16. For matrices, the\n		 * function is evaluated element wise. In case of complex numbers, x.re\n		 * must equal y.re, and x.im must equal y.im. Values null and undefined\n		 * are compared strictly, thus null is only equal to null and nothing\n		 * else, and undefined is only equal to undefined and nothing else.\n		 * @param x First value to compare\n		 * @param y Second value to compare\n		 * @returns Returns true when the compared values are equal, else\n		 * returns false\n		 */\n		equal(x: MathType | string, y: MathType | string): boolean | MathCollection;\n\n		/**\n		 * Check equality of two strings. Comparison is case sensitive. For\n		 * matrices, the function is evaluated element wise.\n		 * @param x First string to compare\n		 * @param y Second string to compare\n		 * @returns Returns true if the values are equal, and false if not.\n		 */\n		equalText(\n			x: string | MathCollection,\n			y: string | MathCollection\n		): number | MathCollection;\n\n		/**\n		 * Test whether value x is larger than y. The function returns true when\n		 * x is larger than y and the relative difference between x and y is\n		 * larger than the configured relTol and absTol. The function cannot be used to\n		 * compare values smaller than approximately 2.22e-16. For matrices, the\n		 * function is evaluated element wise.\n		 * @param x First value to compare\n		 * @param y Second value to vcompare\n		 * @returns Returns true when x is larger than y, else returns false\n		 */\n		larger(x: MathType | string, y: MathType | string): boolean | MathCollection;\n\n		/**\n		 * Test whether value x is larger or equal to y. The function returns\n		 * true when x is larger than y or the relative difference between x and\n		 * y is smaller than the configured relTol and absTol. The function cannot be used\n		 * to compare values smaller than approximately 2.22e-16. For matrices,\n		 * the function is evaluated element wise.\n		 * @param x First value to compare\n		 * @param y Second value to vcompare\n		 * @returns Returns true when x is larger than or equal to y, else\n		 * returns false\n		 */\n		largerEq(x: MathType | string, y: MathType | string): boolean | MathCollection;\n\n		/**\n		 * Test whether value x is smaller than y. The function returns true\n		 * when x is smaller than y and the relative difference between x and y\n		 * is smaller than the configured relTol and absTol. The function cannot be used\n		 * to compare values smaller than approximately 2.22e-16. For matrices,\n		 * the function is evaluated element wise.\n		 * @param x First value to compare\n		 * @param y Second value to vcompare\n		 * @returns Returns true when x is smaller than y, else returns false\n		 */\n		smaller(x: MathType | string, y: MathType | string): boolean | MathCollection;\n\n		/**\n		 * Test whether value x is smaller or equal to y. The function returns\n		 * true when x is smaller than y or the relative difference between x\n		 * and y is smaller than the configured relTol and absTol. The function cannot be\n		 * used to compare values smaller than approximately 2.22e-16. For\n		 * matrices, the function is evaluated element wise.\n		 * @param x First value to compare\n		 * @param y Second value to vcompare\n		 * @returns Returns true when x is smaller than or equal to y, else\n		 * returns false\n		 */\n		smallerEq(\n			x: MathType | string,\n			y: MathType | string\n		): boolean | MathCollection;\n\n		/**\n		 * Determines if two expressions are symbolically equal, i.e. one is the\n		 * result of valid algebraic manipulations on the other.\n		 * @param {Node|string} expr1 The first expression to compare\n		 * @param {Node|string} expr2 The second expression to compare\n		 * @param {Object} [options] Optional option object, passed to simplify\n		 * @returns {boolean} Returns true if a valid manipulation making the\n		 * expressions equal is found.\n		 */\n		symbolicEqual(\n			expr1: MathNode | string,\n			expr2: MathNode | string,\n			options?: SimplifyOptions\n		): boolean;\n\n		/**\n		 * Test whether two values are unequal. The function tests whether the\n		 * relative difference between x and y is larger than the configured\n		 * relTol and absTol. The function cannot be used to compare values smaller than\n		 * approximately 2.22e-16. For matrices, the function is evaluated\n		 * element wise. In case of complex numbers, x.re must unequal y.re, or\n		 * x.im must unequal y.im. Values null and undefined are compared\n		 * strictly, thus null is unequal with everything except null, and\n		 * undefined is unequal with everything except undefined.\n		 * @param x First value to compare\n		 * @param y Second value to vcompare\n		 * @returns Returns true when the compared values are unequal, else\n		 * returns false\n		 */\n		unequal(x: MathType | string, y: MathType | string): boolean | MathCollection;\n\n		/*************************************************************************\n		 * Set functions\n		 ************************************************************************/\n\n		/**\n		 * Create the cartesian product of two (multi)sets. Multi-dimension\n		 * arrays will be converted to single-dimension arrays and the values\n		 * will be sorted in ascending order before the operation.\n		 * @param a1 A (multi)set\n		 * @param a2 A (multi)set\n		 * @returns The cartesian product of two (multi)sets\n		 */\n		setCartesian<T extends MathCollection>(a1: T, a2: MathCollection): T;\n\n		/**\n		 * Create the difference of two (multi)sets: every element of set1, that\n		 * is not the element of set2. Multi-dimension arrays will be converted\n		 * to single-dimension arrays before the operation\n		 * @param a1 A (multi)set\n		 * @param a2 A (multi)set\n		 * @returns The difference of two (multi)sets\n		 */\n		setDifference<T extends MathCollection>(a1: T, a2: MathCollection): T;\n\n		/**\n		 * Collect the distinct elements of a multiset. A multi-dimension array\n		 * will be converted to a single-dimension array before the operation.\n		 * @param a A multiset\n		 * @returns A set containing the distinct elements of the multiset\n		 */\n		setDistinct<T extends MathCollection>(a: T): T;\n\n		/**\n		 * Create the intersection of two (multi)sets. Multi-dimension arrays\n		 * will be converted to single-dimension arrays before the operation.\n		 * @param a1 A (multi)set\n		 * @param a2 A (multi)set\n		 * @returns The intersection of two (multi)sets\n		 */\n		setIntersect<T extends MathCollection>(a1: T, a2: MathCollection): T;\n\n		/**\n		 * Check whether a (multi)set is a subset of another (multi)set. (Every\n		 * element of set1 is the element of set2.) Multi-dimension arrays will\n		 * be converted to single-dimension arrays before the operation.\n		 * @param a1 A (multi)set\n		 * @param a2 A (multi)set\n		 * @returns True if a1 is subset of a2, else false\n		 */\n		setIsSubset(a1: MathCollection, a2: MathCollection): boolean;\n\n		/**\n		 * Count the multiplicity of an element in a multiset. A multi-dimension\n		 * array will be converted to a single-dimension array before the\n		 * operation.\n		 * @param e An element in the multiset\n		 * @param a A multiset\n		 * @returns The number of how many times the multiset contains the\n		 * element\n		 */\n		setMultiplicity(e: MathNumericType, a: MathCollection): number;\n\n		/**\n		 * Create the powerset of a (multi)set. (The powerset contains very\n		 * possible subsets of a (multi)set.) A multi-dimension array will be\n		 * converted to a single-dimension array before the operation.\n		 * @param a A multiset\n		 * @returns The powerset of the (multi)set\n		 */\n		setPowerset<T extends MathCollection>(a: T): T;\n\n		/**\n		 * Count the number of elements of a (multi)set. When a second parameter\n		 * is ‘true’, count only the unique values. A multi-dimension array will\n		 * be converted to a single-dimension array before the operation.\n		 * @param a A multiset\n		 * @returns The number of elements of the (multi)set\n		 */\n		setSize(a: MathCollection): number;\n\n		/**\n		 * Create the symmetric difference of two (multi)sets. Multi-dimension\n		 * arrays will be converted to single-dimension arrays before the\n		 * operation.\n		 * @param a1 A (multi)set\n		 * @param a2 A (multi)set\n		 * @returns The symmetric difference of two (multi)sets\n		 */\n		setSymDifference<T extends MathCollection>(a1: T, a2: MathCollection): T;\n\n		/**\n		 * Create the union of two (multi)sets. Multi-dimension arrays will be\n		 * converted to single-dimension arrays before the operation.\n		 * @param a1 A (multi)set\n		 * @param a2 A (multi)set\n		 * @returns The union of two (multi)sets\n		 */\n		setUnion<T extends MathCollection>(a1: T, a2: MathCollection): T;\n\n		/*************************************************************************\n		 * Signal functions\n		 ************************************************************************/\n		/**\n		 * Compute the transfer function of a zero-pole-gain model.\n		 * @param z Zeroes of the model\n		 * @param p Poles of the model\n		 * @param k Gain of the model\n		 * @returns The transfer function as array of numerator and denominator\n		 */\n		zpk2tf<T extends MathCollection>(z: T, p: T, k?: number): T;\n\n		/**\n		 * Calculates the frequency response of a filter given its numerator and denominator coefficients.\n		 * @param b The numerator polynomial of the filter\n		 * @param a The denominator polynomial of the filter\n		 * @param w The range of frequencies in which the response is to be calculated\n		 * @returns The frequency response\n		 *\n		 */\n		freqz<T extends MathCollection>(b: T, a: T, w?: number | T): { w: T; h: T };\n\n		/*************************************************************************\n		 * Special functions\n		 ************************************************************************/\n\n		/**\n		 * Compute the erf function of a value using a rational Chebyshev\n		 * approximations for different intervals of x.\n		 * @param x A real number\n		 * @returns The erf of x\n		 */\n		erf<T extends number | MathCollection>(x: T): NoLiteralType<T>;\n\n		/**\n		 * Compute the Riemann Zeta function of a value using an infinite series\n		 * and Riemann's Functional equation.\n		 * @param s A real, complex or BigNumber\n		 * @returns The Riemann Zeta of s\n		 */\n		zeta<T extends number | Complex | BigNumber>(s: T): T;\n\n		/*************************************************************************\n		 * Statistics functions\n		 ************************************************************************/\n\n		/**\n		 * Compute the median absolute deviation of a matrix or a list with\n		 * values. The median absolute deviation is defined as the median of the\n		 * absolute deviations from the median.\n		 * @param array A single matrix or multiple scalar values.\n		 * @returns The median absolute deviation\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		mad(array: MathCollection): any;\n\n		/**\n		 * Compute the maximum value of a matrix or a list with values. In case\n		 * of a multi dimensional array, the maximum of the flattened array will\n		 * be calculated. When dim is provided, the maximum over the selected\n		 * dimension will be calculated. Parameter dim is zero-based.\n		 * @param args Multiple scalar values\n		 * @returns The maximum value\n		 */\n		max<T extends MathScalarType>(...args: T[]): T;\n		/**\n		 * @param args Multiple scalar values\n		 * @returns The maximum value\n		 */\n		max(...args: MathScalarType[]): MathScalarType;\n		/**\n		 * @param A A single matrix\n		 * @param dimension The maximum over the selected dimension\n		 * @returns The maximum value\n		 */\n		max<T extends MathScalarType>(\n			A: T[] | T[][],\n			dimension?: number | BigNumber\n		): T;\n		/**\n		 * @param A A single matrix\n		 * @param dimension The maximum over the selected dimension\n		 * @returns The maximum value\n		 */\n		max(A: MathCollection, dimension?: number | BigNumber): MathScalarType;\n\n		/**\n		 * Compute the mean value of matrix or a list with values. In case of a\n		 * multi dimensional array, the mean of the flattened array will be\n		 * calculated. When dim is provided, the maximum over the selected\n		 * dimension will be calculated. Parameter dim is zero-based.\n		 * @param args Multiple scalar values\n		 * @returns The mean of all values\n		 */\n		mean<T extends MathScalarType>(...args: T[]): T;\n		/**\n		 * @param args Multiple scalar values\n		 * @returns The mean value\n		 */\n		mean(...args: MathScalarType[]): MathScalarType;\n		/**\n		 * @param A A single matrix\n		 * @param dimension The mean over the selected dimension\n		 * @returns The mean value\n		 */\n		mean<T extends MathScalarType>(\n			A: T[] | T[][],\n			dimension?: number | BigNumber\n		): T;\n		/**\n		 * @param A A single matrix\n		 * @param dimension The mean over the selected dimension\n		 * @returns The mean value\n		 */\n		mean(A: MathCollection, dimension?: number | BigNumber): MathScalarType;\n\n		/**\n		 * Compute the median of a matrix or a list with values. The values are\n		 * sorted and the middle value is returned. In case of an even number of\n		 * values, the average of the two middle values is returned. Supported\n		 * types of values are: Number, BigNumber, Unit In case of a (multi\n		 * dimensional) array or matrix, the median of all elements will be\n		 * calculated.\n		 * @param args Multiple scalar values\n		 * @returns The median value\n		 */\n		median<T extends MathScalarType>(...args: T[]): T;\n		/**\n		 * @param args Multiple scalar values\n		 * @returns The median value\n		 */\n		median(...args: MathScalarType[]): MathScalarType;\n		/**\n		 * @param A A single matrix\n		 * @returns The median value\n		 */\n		median<T extends MathScalarType>(A: T[] | T[][]): T;\n		/**\n		 * @param A A single matrix\n		 * @returns The median value\n		 */\n		median(A: MathCollection): MathScalarType;\n\n		/**\n		 * Compute the minimum value of a matrix or a list of values. In case of\n		 * a multi dimensional array, the minimum of the flattened array will be\n		 * calculated. When dim is provided, the minimum over the selected\n		 * dimension will be calculated. Parameter dim is zero-based.\n		 * @param args multiple scalar values\n		 * @returns The minimum value\n		 */\n		min<T extends MathScalarType>(...args: T[]): T;\n		/**\n		 * @param args Multiple scalar values\n		 * @returns The minimum value\n		 */\n		min(...args: MathScalarType[]): MathScalarType;\n		/**\n		 * @param A A single matrix\n		 * @param dimension The minimum over the selected dimension\n		 * @returns The minimum value\n		 */\n		min<T extends MathScalarType>(\n			A: T[] | T[][],\n			dimension?: number | BigNumber\n		): T;\n		/**\n		 * @param A A single matrix\n		 * @param dimension The minimum over the selected dimension\n		 * @returns The minimum value\n		 */\n		min(A: MathCollection, dimension?: number | BigNumber): MathScalarType;\n\n		/**\n		 * Computes the mode of a set of numbers or a list with values(numbers\n		 * or characters). If there are more than one modes, it returns a list\n		 * of those values.\n		 * @param args Multiple scalar values\n		 * @returns The mode of all values\n		 */\n		mode<T extends MathScalarType>(...args: T[]): T[];\n		/**\n		 * @param args Multiple scalar values\n		 * @returns The mode of all values\n		 */\n		mode(...args: MathScalarType[]): MathScalarType[];\n		/**\n		 * @param A A single matrix\n		 * @returns The mode value\n		 */\n		mode<T extends MathScalarType>(A: T[] | T[][]): T[];\n		/**\n		 * @param A A single matrix\n		 * @returns The mode of all values\n		 */\n		mode(A: MathCollection): MathScalarType[];\n\n		/**\n		 * Compute the product of a matrix or a list with values. In case of a\n		 * (multi dimensional) array or matrix, the sum of all elements will be\n		 * calculated.\n		 * @param args Multiple scalar values\n		 * @returns The product of all values\n		 */\n		prod<T extends MathScalarType>(...args: T[]): T;\n		/**\n		 * @param args Multiple scalar values\n		 * @returns The product of all values\n		 */\n		prod(...args: MathScalarType[]): MathScalarType;\n		/**\n		 * @param A A single matrix\n		 * @returns The product of all values\n		 */\n		prod<T extends MathScalarType>(A: T[] | T[][]): T;\n		/**\n		 * @param A A single matrix\n		 * @returns The product of all values\n		 */\n		prod(A: MathCollection): MathScalarType;\n\n		/**\n		 * @param A A single matrix\n		 * @param probOrN prob is the order of the quantile, while N is the\n		 * amount of evenly distributed steps of probabilities; only one of\n		 * these options can be provided\n		 * @param sorted =false is data sorted in ascending order\n		 * @returns Quantile(s)\n		 */\n		quantileSeq<T extends MathScalarType>(\n			A: T[] | T[][],\n			prob: number | BigNumber,\n			sorted?: boolean\n		): T;\n		/**\n		 * Compute the prob order quantile of a matrix or a list with values.\n		 * The sequence is sorted and the middle value is returned. Supported\n		 * types of sequence values are: Number, BigNumber, Unit Supported types\n		 * of probability are: Number, BigNumber In case of a (multi\n		 * dimensional) array or matrix, the prob order quantile of all elements\n		 * will be calculated.\n		 * @param A A single matrix or array\n		 * @param probOrN prob is the order of the quantile, while N is the\n		 * amount of evenly distributed steps of probabilities; only one of\n		 * these options can be provided\n		 * @param sorted =false is data sorted in ascending order\n		 * @returns Quantile(s)\n		 */\n		quantileSeq(\n			A: MathCollection,\n			prob: number | BigNumber | MathArray,\n			sorted?: boolean\n		): MathScalarType | MathArray;\n\n		/**\n		 * Compute the standard deviation of a matrix or a list with values. The\n		 * standard deviations is defined as the square root of the variance:\n		 * std(A) = sqrt(variance(A)). In case of a (multi dimensional) array or\n		 * matrix, the standard deviation over all elements will be calculated.\n		 * Optionally, the type of normalization can be specified as second\n		 * parameter. The parameter normalization can be one of the following\n		 * values: 'unbiased' (default) The sum of squared errors is divided by\n		 * (n - 1) 'uncorrected' The sum of squared errors is divided by n\n		 * 'biased' The sum of squared errors is divided by (n + 1)\n		 * @param args variadic argument of number to calculate standard deviation\n		 * @returns The standard deviation\n		 */\n		std<T extends MathScalarType>(...args: T[]): T;\n		/**\n		 * @param args Multiple scalar values\n		 * @returns The standard deviation\n		 */\n		std(...args: MathScalarType[]): MathScalarType;\n		/**\n		 * Compute the standard deviation of a matrix or a list with values. The\n		 * standard deviations is defined as the square root of the variance:\n		 * std(A) = sqrt(variance(A)). In case of a (multi dimensional) array or\n		 * matrix, the standard deviation over all elements will be calculated.\n		 * Optionally, the type of normalization can be specified as second\n		 * parameter. The parameter normalization can be one of the following\n		 * values: 'unbiased' (default) The sum of squared errors is divided by\n		 * (n - 1) 'uncorrected' The sum of squared errors is divided by n\n		 * 'biased' The sum of squared errors is divided by (n + 1)\n		 * @param array A single matrix to compute standard deviation.\n		 * @param dimension A dimension to calculate standard deviation\n		 * @param normalization Determines how to normalize the variance. Choose\n		 * ‘unbiased’ (default), ‘uncorrected’, or ‘biased’. Default value:\n		 * ‘unbiased’.\n		 * @returns The standard deviation array\n		 */\n		std(\n			array: MathCollection,\n			dimension?: number,\n			normalization?: 'unbiased' | 'uncorrected' | 'biased'\n		): MathNumericType[];\n		/**\n		 * Compute the standard deviation of a matrix or a list with values. The\n		 * standard deviations is defined as the square root of the variance:\n		 * std(A) = sqrt(variance(A)). In case of a (multi dimensional) array or\n		 * matrix, the standard deviation over all elements will be calculated.\n		 * Optionally, the type of normalization can be specified as second\n		 * parameter. The parameter normalization can be one of the following\n		 * values: 'unbiased' (default) The sum of squared errors is divided by\n		 * (n - 1) 'uncorrected' The sum of squared errors is divided by n\n		 * 'biased' The sum of squared errors is divided by (n + 1)\n		 * @param array A single matrix or multiple scalar values\n		 * @param normalization Determines how to normalize the variance. Choose\n		 * ‘unbiased’ (default), ‘uncorrected’, or ‘biased’. Default value:\n		 * ‘unbiased’.\n		 * @returns The standard deviation\n		 */\n		std(\n			array: MathCollection,\n			normalization: 'unbiased' | 'uncorrected' | 'biased'\n		): MathNumericType;\n\n		/**\n		 * Compute the sum of a matrix or a list with values. In case of a\n		 * (multi dimensional) array or matrix, the sum of all elements will be\n		 * calculated.\n		 * @param args A single matrix or multiple scalar values\n		 * @returns The sum of all values\n		 */\n		sum<T extends MathScalarType>(...args: T[]): T;\n		/**\n		 * @param args Multiple scalar values\n		 * @returns The sum of all values\n		 */\n		sum(...args: MathScalarType[]): MathScalarType;\n		/**\n		 * @param A A single matrix\n		 * @param dimension The sum over the selected dimension\n		 * @returns The sum of all values\n		 */\n		sum<T extends MathScalarType>(\n			A: T[] | T[][],\n			dimension?: number | BigNumber\n		): T;\n		/**\n		 * @param A A single matrix\n		 * @param dimension The sum over the selected dimension\n		 * @returns The sum of all values\n		 */\n		sum(A: MathCollection, dimension?: number | BigNumber): MathScalarType;\n\n		/**\n		 * Count the number of elements of a matrix, array or string.\n		 * @param x A matrix, array or string.\n		 * @returns The number of members passed in parameters\n		 */\n		count(x: MathCollection | string): number;\n\n		/**\n		 * Compute the cumulative sum of a matrix or a list with values.\n		 * In case of a (multi dimensional) array or matrix, the cumulative sums\n		 * along a specified dimension (defaulting to the first) will be calculated.\n		 * @param args A single matrix or multiple scalar values\n		 * @returns The cumulative sums of the the values.\n		 */\n		cumsum(...args: MathType[]): MathType[];\n		/**\n		 * @param array A single matrix\n		 * @param dim The dimension along which to sum (defaults to 0)\n		 * @returns The cumulative sums along the given dimension\n		 */\n		cumsum(array: MathCollection, dim?: number): MathCollection;\n\n		/**\n		 * Compute the variance of a matrix or a list with values. In case of a\n		 * (multi dimensional) array or matrix, the variance over all elements\n		 * will be calculated. Optionally, the type of normalization can be\n		 * specified as second parameter. The parameter normalization can be one\n		 * of the following values: 'unbiased' (default) The sum of squared\n		 * errors is divided by (n - 1) 'uncorrected' The sum of squared errors\n		 * is divided by n 'biased' The sum of squared errors is divided by (n +\n		 * 1) Note that older browser may not like the variable name var. In\n		 * that case, the function can be called as math['var'](...) instead of\n		 * math.variance(...).\n		 * @param args A single matrix or multiple scalar values\n		 * @returns The variance\n		 */\n		variance(...args: MathNumericType[]): MathNumericType;\n		/**\n		 * Compute the variance of a matrix or a list with values. In case of a\n		 * (multi dimensional) array or matrix, the variance over all elements\n		 * will be calculated. Optionally, the type of normalization can be\n		 * specified as second parameter. The parameter normalization can be one\n		 * of the following values: 'unbiased' (default) The sum of squared\n		 * errors is divided by (n - 1) 'uncorrected' The sum of squared errors\n		 * is divided by n 'biased' The sum of squared errors is divided by (n +\n		 * 1) Note that older browser may not like the variable name var. In\n		 * that case, the function can be called as math['var'](...) instead of\n		 * math.variance(...).\n		 * @param array A matrix to compute variance.\n		 * @param dimension A dimension to compute variance on\n		 * @param normalization normalization Determines how to normalize the\n		 * variance. Choose ‘unbiased’ (default), ‘uncorrected’, or ‘biased’.\n		 * Default value: ‘unbiased’.\n		 * @returns variance matrix.\n		 */\n		variance(\n			array: MathCollection,\n			dimension?: number,\n			normalization?: 'unbiased' | 'uncorrected' | 'biased'\n		): MathNumericType[];\n		/**\n		 * @param array A single matrix\n		 * @param normalization normalization Determines how to normalize the\n		 * variance. Choose ‘unbiased’ (default), ‘uncorrected’, or ‘biased’.\n		 * Default value: ‘unbiased’.\n		 * @returns The variance\n		 */\n		variance(\n			array: MathCollection,\n			normalization: 'unbiased' | 'uncorrected' | 'biased'\n		): MathNumericType;\n\n		/**\n		 * Calculate the correlation coefficient between two matrix.\n		 * @param {Array | Matrix} x The first array or matrix to compute correlation coefficient\n		 * @param {Array | Matrix} y The second array or matrix to compute correlation coefficient\n		 * @returns correlation coefficient\n		 */\n		corr(x: MathCollection, y: MathCollection): MathType;\n\n		/*************************************************************************\n		 * String functions\n		 ************************************************************************/\n\n		/**\n		 * Format a value of any type into a string.\n		 * @param value The value to be formatted\n		 * @param options An object with formatting options.\n		 * @param callback A custom formatting function, invoked for all numeric\n		 * elements in value, for example all elements of a matrix, or the real\n		 * and imaginary parts of a complex number. This callback can be used to\n		 * override the built-in numeric notation with any type of formatting.\n		 * Function callback is called with value as parameter and must return a\n		 * string.\n		 * @see http://mathjs.org/docs/reference/functions/format.html\n		 * @returns The formatted value\n		 */\n		format(\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			value: any,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			options?: FormatOptions | number | BigNumber | ((item: any) => string),\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			callback?: (value: any) => string\n		): string;\n\n		/**\n		 * Interpolate values into a string template.\n		 * @param template A string containing variable placeholders.\n		 * @param values An object containing variables which will be filled in\n		 * in the template.\n		 * @param precision Number of digits to format numbers. If not provided,\n		 * the value will not be rounded.\n		 * @param options Formatting options, or the number of digits to format\n		 * numbers. See function math.format for a description of all options.\n		 * @returns Interpolated string\n		 */\n		print(\n			template: string,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			values: any,\n			precision?: number,\n			options?: number | object\n		): void;\n\n		/*************************************************************************\n		 * Trigonometry functions\n		 ************************************************************************/\n\n		/**\n		 * Calculate the inverse cosine of a value.\n		 * @param x Function input\n		 * @returns The arc cosine of x\n		 */\n		acos(x: number): number | Complex;\n		acos<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the hyperbolic arccos of a value, defined as acosh(x) =\n		 * ln(sqrt(x^2 - 1) + x).\n		 * @param x Function input\n		 * @returns The hyperbolic arccosine of x\n		 */\n		acosh(x: number): number | Complex;\n		acosh<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the inverse cotangent of a value.\n		 * @param x Function input\n		 * @returns The arc cotangent of x\n		 */\n		acot(x: number): number;\n		acot<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the inverse hyperbolic tangent of a value, defined as acoth(x)\n		 * = (ln((x+1)/x) + ln(x/(x-1))) / 2.\n		 * @param x Function input\n		 * @returns The inverse hyperbolic tangent of x\n		 */\n		acoth(x: number): number;\n		acoth<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the inverse cosecant of a value.\n		 * @param x Function input\n		 * @returns The arc cosecant of x\n		 */\n		acsc(x: number): number | Complex;\n		acsc<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the inverse hyperbolic cosecant of a value, defined as acsch(x)\n		 * = ln(1/x + sqrt(1/x^2 + 1)).\n		 * @param x Function input\n		 * @returns The inverse hyperbolic cosecant of x\n		 */\n		acsch(x: number): number;\n		acsch<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the inverse secant of a value.\n		 * @param x Function input\n		 * @returns The arc secant of x\n		 */\n		asec(x: number): number | Complex;\n		asec<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the hyperbolic arcsecant of a value, defined as asech(x) =\n		 * ln(sqrt(1/x^2 - 1) + 1/x).\n		 * @param x Function input\n		 * @returns The hyperbolic arcsecant of x\n		 */\n		asech(x: number): number | Complex;\n		asech<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the inverse sine of a value.\n		 * @param x Function input\n		 * @returns The arc sine of x\n		 */\n		asin(x: number): number | Complex;\n		asin<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the hyperbolic arcsine of a value, defined as asinh(x) =\n		 * ln(x + sqrt(x^2 + 1)).\n		 * @param x Function input\n		 * @returns The hyperbolic arcsine of x\n		 */\n		asinh<T extends number | BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the inverse tangent of a value.\n		 * @param x Function input\n		 * @returns The arc tangent of x\n		 */\n		atan<T extends number | BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the inverse tangent function with two arguments, y/x. By\n		 * providing two arguments, the right quadrant of the computed angle can\n		 * be determined. For matrices, the function is evaluated element wise.\n		 * @param x Function input\n		 * @returns Four quadrant inverse tangent\n		 */\n		atan2<T extends number | MathCollection>(y: T, x: T): T;\n\n		/**\n		 * Calculate the hyperbolic arctangent of a value, defined as atanh(x) =\n		 * ln((1 + x)/(1 - x)) / 2.\n		 * @param x Function input\n		 * @returns The hyperbolic arctangent of x\n		 */\n		atanh(x: number): number | Complex;\n		atanh<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the cosine of a value.\n		 * @param x Function input\n		 * @returns The cosine of x\n		 */\n		cos(x: number | Unit): number;\n		cos<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the hyperbolic cosine of a value, defined as cosh(x) = 1/2\n		 * * (exp(x) + exp(-x)).\n		 * @param x Function input\n		 * @returns The hyperbolic cosine of x\n		 */\n		cosh(x: number | Unit): number;\n		cosh<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the cotangent of a value. cot(x) is defined as 1 / tan(x).\n		 * @param x Function input\n		 * @returns The cotangent of x\n		 */\n		cot(x: number | Unit): number;\n		cot<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the hyperbolic cotangent of a value, defined as coth(x) = 1\n		 * / tanh(x).\n		 * @param x Function input\n		 * @returns The hyperbolic cotangent of x\n		 */\n		coth(x: number | Unit): number;\n		coth<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the cosecant of a value, defined as csc(x) = 1/sin(x).\n		 * @param x Function input\n		 * @returns The cosecant hof x\n		 */\n		csc(x: number | Unit): number;\n		csc<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the hyperbolic cosecant of a value, defined as csch(x) = 1\n		 * / sinh(x).\n		 * @param x Function input\n		 * @returns The hyperbolic cosecant of x\n		 */\n		csch(x: number | Unit): number;\n		csch<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the secant of a value, defined as sec(x) = 1/cos(x).\n		 * @param x Function input\n		 * @returns The secant of x\n		 */\n		sec(x: number | Unit): number;\n		sec<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the hyperbolic secant of a value, defined as sech(x) = 1 /\n		 * cosh(x).\n		 * @param x Function input\n		 * @returns The hyperbolic secant of x\n		 */\n		sech(x: number | Unit): number;\n		sech<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the sine of a value.\n		 * @param x Function input\n		 * @returns The sine of x\n		 */\n		sin(x: number | Unit): number;\n		sin<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the hyperbolic sine of a value, defined as sinh(x) = 1/2 *\n		 * (exp(x) - exp(-x)).\n		 * @param x Function input\n		 * @returns The hyperbolic sine of x\n		 */\n		sinh(x: number | Unit): number;\n		sinh<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the tangent of a value. tan(x) is equal to sin(x) / cos(x).\n		 * @param x Function input\n		 * @returns The tangent of x\n		 */\n		tan(x: number | Unit): number;\n		tan<T extends BigNumber | Complex>(x: T): T;\n\n		/**\n		 * Calculate the hyperbolic tangent of a value, defined as tanh(x) =\n		 * (exp(2 * x) - 1) / (exp(2 * x) + 1).\n		 * @param x Function input\n		 * @returns The hyperbolic tangent of x\n		 */\n		tanh(x: number | Unit): number;\n		tanh<T extends BigNumber | Complex>(x: T): T;\n\n		/*************************************************************************\n		 * Unit functions\n		 ************************************************************************/\n\n		/**\n		 * Change the unit of a value. For matrices, the function is evaluated\n		 * element wise.\n		 * @param x The unit to be converted.\n		 * @param unit New unit. Can be a string like \"cm\" or a unit without\n		 * value.\n		 * @returns Value with changed, fixed unit\n		 */\n		to(x: Unit | MathCollection, unit: Unit | string): Unit | MathCollection;\n\n		/*************************************************************************\n		 * Utils\n		 ************************************************************************/\n		isNumber(x: unknown): x is number;\n\n		isBigNumber(x: unknown): x is BigNumber;\n\n		isBigInt(x: unknown): x is bigint;\n\n		isComplex(x: unknown): x is Complex;\n\n		isFraction(x: unknown): x is Fraction;\n\n		isUnit(x: unknown): x is Unit;\n\n		isString(x: unknown): x is string;\n\n		isArray: ArrayConstructor['isArray'];\n\n		isMatrix(x: unknown): x is Matrix;\n\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		isCollection(x: unknown): x is Matrix | any[];\n\n		isDenseMatrix(x: unknown): x is Matrix;\n\n		isSparseMatrix(x: unknown): x is Matrix;\n\n		isRange(x: unknown): boolean;\n\n		isIndex(x: unknown): x is Index;\n\n		isBoolean(x: unknown): x is boolean;\n\n		isResultSet(x: unknown): boolean;\n\n		isHelp(x: unknown): x is Help;\n\n		isFunction(x: unknown): boolean;\n\n		isDate(x: unknown): x is Date;\n\n		isRegExp(x: unknown): x is RegExp;\n\n		isObject(x: unknown): boolean;\n\n		isMap<T, U>(x: unknown): x is Map<T, U>;\n\n		isPartitionedMap<T, U>(x: unknown): x is PartitionedMap<T, U>;\n\n		isObjectWrappingMap<T extends string | number | symbol, U>(\n			x: unknown\n		): x is ObjectWrappingMap<T, U>;\n\n		isNull(x: unknown): x is null;\n\n		isUndefined(x: unknown): x is undefined;\n\n		isAccessorNode(x: unknown): x is AccessorNode;\n\n		isArrayNode(x: unknown): x is ArrayNode;\n\n		isAssignmentNode(x: unknown): x is AssignmentNode;\n\n		isBlockNode(x: unknown): x is BlockNode;\n\n		isConditionalNode(x: unknown): x is ConditionalNode;\n\n		isConstantNode(x: unknown): x is ConstantNode;\n\n		isFunctionAssignmentNode(x: unknown): x is FunctionAssignmentNode;\n\n		isFunctionNode(x: unknown): x is FunctionNode;\n\n		isIndexNode(x: unknown): x is IndexNode;\n\n		isNode(x: unknown): x is MathNode;\n\n		isObjectNode(x: unknown): x is ObjectNode;\n\n		isOperatorNode(x: unknown): x is OperatorNode<OperatorNodeOp, OperatorNodeFn>;\n\n		isParenthesisNode(x: unknown): x is ParenthesisNode;\n\n		isRangeNode(x: unknown): x is RangeNode;\n\n		isRelationalNode(x: unknown): x is RelationalNode;\n\n		isSymbolNode(x: unknown): x is SymbolNode;\n\n		isChain(x: unknown): x is MathJsChain<unknown>;\n\n		/*************************************************************************\n		 * Functions -> Utils\n		 ************************************************************************/\n\n		/**\n		 * Clone an object.\n		 * @param x Object to be cloned\n		 * @returns A clone of object x\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		clone<TType>(x: TType): TType;\n\n		/**\n		 * Test whether a value is an numeric value. In case of a string,\n		 *  true is returned if the string contains a numeric value.\n		 * @param x Value to be tested\n		 * @returns Returns true when x is a number, BigNumber, bigint, Fraction, Boolean, or a String containing number.\n		 * Returns false for other types.\n		 * Throws an error in case of unknown types.\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		hasNumericValue(x: any): boolean | boolean[];\n\n		/**\n		 * Test whether a value is an integer number. The function supports\n		 * number, BigNumber, and Fraction. The function is evaluated\n		 * element-wise in case of Array or Matrix input.\n		 * @param x Value to be tested\n		 * @returns Returns true when x contains a numeric, integer value.\n		 * Throws an error in case of an unknown data type.\n		 */\n		isInteger(x: number | BigNumber | Fraction | MathCollection): boolean;\n\n		/**\n		 * Test whether a value is NaN (not a number). The function supports\n		 * types number, BigNumber, Fraction, Unit and Complex. The function is\n		 * evaluated element-wise in case of Array or Matrix input.\n		 * @param x Value to be tested\n		 * @returns Returns true when x is NaN. Throws an error in case of an\n		 * unknown data type.\n		 */\n		isNaN(\n			x: number | BigNumber | bigint | Fraction | MathCollection | Unit\n		): boolean;\n\n		/**\n		 * Test whether a value is negative: smaller than zero. The function\n		 * supports types number, BigNumber, Fraction, and Unit. The function is\n		 * evaluated element-wise in case of Array or Matrix input.\n		 * @param x Value to be tested\n		 * @returns Returns true when x is larger than zero. Throws an error in\n		 * case of an unknown data type.\n		 */\n		isNegative(\n			x: number | BigNumber | bigint | Fraction | MathCollection | Unit\n		): boolean;\n\n		/**\n		 * Test whether a value is an numeric value. The function is evaluated\n		 * element-wise in case of Array or Matrix input.\n		 * @param x Value to be tested\n		 * @returns Returns true when x is a number, BigNumber, bigint, Fraction, or\n		 * boolean. Returns false for other types. Throws an error in case of\n		 * unknown types.\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		isNumeric(x: any): x is number | BigNumber | bigint | Fraction | boolean;\n\n		/**\n		 * Test whether a value is positive: larger than zero. The function\n		 * supports types number, BigNumber, Fraction, and Unit. The function is\n		 * evaluated element-wise in case of Array or Matrix input.\n		 * @param x Value to be tested\n		 * @returns Returns true when x is larger than zero. Throws an error in\n		 * case of an unknown data type.\n		 */\n		isPositive(\n			x: number | BigNumber | bigint | Fraction | MathCollection | Unit\n		): boolean;\n\n		/**\n		 * Test whether a value is prime: has no divisors other than itself and\n		 * one. The function supports type number, bignumber. The function is\n		 * evaluated element-wise in case of Array or Matrix input.\n		 * @param x Value to be tested\n		 * @returns Returns true when x is larger than zero. Throws an error in\n		 * case of an unknown data type.\n		 */\n		isPrime(x: number | BigNumber | MathCollection): boolean;\n\n		/**\n		 * Test whether a value is zero. The function can check for zero for\n		 * types number, BigNumber, Fraction, Complex, and Unit. The function is\n		 * evaluated element-wise in case of Array or Matrix input.\n		 * @param x Value to be tested\n		 * @returns Returns true when x is zero. Throws an error in case of an\n		 * unknown data type.\n		 */\n		isZero(x: MathType): boolean;\n\n		/**\n		 * Determine the type of a variable.\n		 * @param x The variable for which to test the type\n		 * @returns Returns the name of the type. Primitive types are lower\n		 * case, non-primitive types are upper-camel-case. For example ‘number’,\n		 * ‘string’, ‘Array’, ‘Date’.\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		typeOf(x: any): string;\n\n		/**\n		 * Import functions from an object or a module\n		 * To avoid errors when using one of the imported functions extend module like this:\n		 *\n		 * @example\n		 * // imported_math_functions.ts\n		 * declare module 'mathjs' {\n		 *      interface MathJsInterface {\n		 *          hello(a: number): number;\n		 *      }\n		 * }\n		 *\n		 * @param object An object with functions to be imported.\n		 * @param options An object with import options.\n		 */\n		import(object: ImportObject | ImportObject[], options?: ImportOptions): void;\n	}\n\n	/**\n	 * @deprecated since v12.0.0. The interface MathJsStatic has been renamed to MathJsInstance\n	 */\n	type MathJsStatic = MathJsInstance\n\n	/**\n	 * @deprecated since v12.0.0. Use MathJsFactory instead and import dependency maps directly from the library\n	 */\n	type FactoryDependencies = void\n\n	/*************************************************************************\n	 * Factory and Dependencies\n	 ************************************************************************/\n	interface MathJsFactory {\n		create: (\n			factories: FactoryFunctionMap,\n			config?: ConfigOptions\n		) => MathJsInstance;\n\n		factory: <T, TDeps extends readonly MathJsFunctionName[]>(\n			name: string,\n			dependencies: TDeps,\n			create: (\n				injected: Pick<MathJsInstance, Extract<MathJsFunctionName, TDeps[number]>>\n			) => T,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			meta?: any\n		) => FactoryFunction<T>;\n	}\n\n	interface Matrix {\n		type: string;\n		storage(): string;\n		datatype(): string;\n		create(data: MathArray, datatype?: string): void;\n		density(): number;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		subset(index: Index, replacement?: any, defaultValue?: any): Matrix;\n		apply(\n			dim: number,\n			callback: (array: MathCollection) => number\n		): MathCollection;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		get(index: number[]): any;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		set(index: number[], value: any, defaultValue?: number | string): Matrix;\n		resize(size: MathCollection, defaultValue?: number | string): Matrix;\n		clone(): Matrix;\n		size(): number[];\n		map(\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			callback: (a: any, b: number[], c: Matrix) => any,\n			skipZeros?: boolean\n		): Matrix;\n		forEach(\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			callback: (a: any, b: number[], c: Matrix) => void,\n			skipZeros?: boolean\n		): void;\n		toArray(): MathArray;\n		valueOf(): MathArray;\n		format(\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			options?: FormatOptions | number | BigNumber | ((value: any) => string)\n		): string;\n		toString(): string;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		toJSON(): any;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		diagonal(k?: number | BigNumber): any[];\n		swapRows(i: number, j: number): Matrix;\n	}\n\n	interface MatrixCtor {\n		new(): Matrix;\n	}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\n	interface BigNumber extends decimal.Decimal {\n	}\n\n	interface Fraction {\n		s: number;\n		n: number;\n		d: number;\n	}\n\n	interface Complex {\n		re: number;\n		im: number;\n		clone(): Complex;\n		equals(other: Complex): boolean;\n		format(precision?: number): string;\n		fromJSON(json: object): Complex;\n		fromPolar(polar: object): Complex;\n		fromPolar(r: number, phi: number): Complex;\n		toJSON(): object;\n		toPolar(): PolarCoordinates;\n		toString(): string;\n		compare(a: Complex, b: Complex): number;\n	}\n\n	interface PolarCoordinates {\n		r: number;\n		phi: number;\n	}\n\n	interface MathJSON {\n		mathjs?: string;\n		value: number;\n		unit: string;\n		fixPrefix?: boolean;\n	}\n\n	interface BaseUnit {\n		dimensions: number[];\n		key: string;\n	}\n\n	interface UnitComponent {\n		power: number;\n		prefix: string;\n		unit: {\n			name: string\n			base: BaseUnit\n			prefixes: Record<string, UnitPrefix>\n			value: number\n			offset: number\n			dimensions: number[]\n		};\n	}\n\n	interface UnitPrefix {\n		name: string;\n		value: number;\n		scientific: boolean;\n	}\n\n	interface Unit {\n		valueOf(): string;\n		clone(): Unit;\n		hasBase(base: BaseUnit | string | undefined): boolean;\n		equalBase(unit: Unit): boolean;\n		equals(unit: Unit): boolean;\n		multiply(unit: Unit): Unit;\n		divide(unit: Unit): Unit | number;\n		pow(unit: Unit): Unit;\n		abs(unit: Unit): Unit;\n		to(unit: string): Unit;\n		toNumber(unit?: string): number;\n		toNumeric(unit?: string): number | Fraction | BigNumber;\n		toSI(): Unit;\n		toString(): string;\n		toJSON(): MathJSON;\n		formatUnits(): string;\n		format(options: FormatOptions): string;\n		simplify(): Unit;\n		splitUnit(parts: ReadonlyArray<string | Unit>): Unit[];\n\n		units: UnitComponent[];\n		dimensions: number[];\n		value: number;\n		fixPrefix: boolean;\n		skipAutomaticSimplification: true;\n	}\n\n	type UnitSystemName = 'si' | 'cgs' | 'us' | 'auto'\n\n	interface UnitStatic {\n		PREFIXES: Record<string, UnitPrefix>;\n		BASE_DIMENSIONS: string[];\n		BASE_UNITS: Record<string, BaseUnit>;\n		UNIT_SYSTEMS: Record<\n			UnitSystemName,\n			Record<string, { unit: Unit; prefix: UnitPrefix }>\n		>;\n		UNITS: Record<string, Unit>;\n		parse(str: string): Unit;\n		isValuelessUnit(name: string): boolean;\n		fromJSON(json: MathJSON): Unit;\n		isValidAlpha(c: string): boolean;\n		createUnit(\n			obj: Record<string, string | Unit | UnitDefinition>,\n			options?: { override: boolean }\n		): Unit;\n		createUnitSingle(\n			name: string,\n			definition: string | Unit | UnitDefinition\n		): Unit;\n		getUnitSystem(): UnitSystemName;\n		setUnitSystem(name: UnitSystemName): void;\n	}\n\n	interface UnitCtor extends UnitStatic {\n		new(\n			value: number | BigNumber | Fraction | Complex | boolean,\n			name: string\n		): Unit;\n	}\n\n	interface CreateUnitOptions {\n		prefixes?: 'none' | 'short' | 'long' | 'binary_short' | 'binary_long';\n		aliases?: string[];\n		offset?: number;\n		override?: boolean;\n	}\n\n	type SimplifyContext = Partial<\n		Record<\n			OperatorNodeFn,\n			{\n				trivial: boolean\n				total: boolean\n				commutative: boolean\n				associative: boolean\n			}\n		>\n	>\n\n	interface SimplifyOptions {\n		/** A boolean which is `true` by default. */\n		exactFractions?: boolean;\n		/**\n		 * When `exactFractions` is true, a fraction will be returned only\n		 * when both numerator and denominator are smaller than `fractionsLimit`.\n		 * Default value is 10000.\n		 */\n		fractionsLimit?: number;\n		/** A boolean which is `false` by default. */\n		consoleDebug?: boolean;\n		/**\n		 * gives properties of each operator, which determine what simplifications\n		 * are allowed. Properties are commutative, associative, total (whether\n		 * the operation is defined for all arguments), and trivial (whether\n		 * the operation applied to a single argument leaves that argument\n		 * unchanged).\n		 */\n		context?: SimplifyContext;\n	}\n\n	type SimplifyRule =\n		| {\n		l: string\n		r: string\n		repeat?: boolean\n		assuming?: SimplifyContext\n		imposeContext?: SimplifyContext\n	}\n		| {\n		s: string\n		repeat?: boolean\n		assuming?: SimplifyContext\n		imposeContext?: SimplifyContext\n	}\n		| string\n		| ((node: MathNode) => MathNode)\n\n	interface Simplify {\n		(expr: MathNode | string): MathNode;\n		(\n			expr: MathNode | string,\n			rules: SimplifyRule[],\n			scope?: object,\n			options?: SimplifyOptions\n		): MathNode;\n		(expr: MathNode | string, scope: object, options?: SimplifyOptions): MathNode;\n\n		rules: SimplifyRule[];\n	}\n\n	interface UnitDefinition {\n		definition?: string | Unit;\n		prefixes?: string;\n		offset?: number;\n		aliases?: string[];\n		baseName?: string;\n	}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\n	interface Index {\n	}\n\n	interface PartitionedMap<T, U> {\n		a: Map<T, U>;\n		b: Map<T, U>;\n	}\n\n	interface ObjectWrappingMap<T extends string | number | symbol, U> {\n		wrappedObject: Record<T, U>;\n	}\n\n	interface EvalFunction {\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		evaluate(scope?: any): any;\n	}\n\n	interface MathNode {\n		isNode: true;\n		comment: string;\n		type: string;\n\n		isUpdateNode?: boolean;\n\n		/**\n		 * Create a shallow clone of the node. The node itself is cloned, its\n		 * childs are not cloned.\n		 */\n		clone(): this;\n		/**\n		 * Create a deep clone of the node. Both the node as well as all its\n		 * childs are cloned recursively.\n		 */\n		cloneDeep(): this;\n		/**\n		 * Compile an expression into optimized JavaScript code. compile returns\n		 * an object with a function evaluate([scope]) to evaluate. Example:\n		 */\n		compile(): EvalFunction;\n		/**\n		 * Compile and eval an expression, this is the equivalent of doing\n		 * node.compile().evaluate(scope). Example:\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		evaluate(expr?: any): any;\n		/**\n		 * Test whether this node equals an other node. Does a deep comparison\n		 * of the values of both nodes.\n		 */\n		equals(other: MathNode): boolean;\n		/**\n		 *\n		 * Filter nodes in an expression tree. The callback function is called\n		 * as callback(node: MathNode, path: string, parent: MathNode) : boolean\n		 * for every node in the tree, and must return a boolean. The function\n		 * filter returns an array with nodes for which the test returned true.\n		 * Parameter path is a string containing a relative JSON Path.\n		 *\n		 * Example:\n		 *\n		 * ```\n		 * var node = math.parse('x^2 + x/4 + 3*y');\n		 * var filtered = node.filter(function (node) {\n		 * return node.isSymbolMathNode && node.name == 'x';\n		 * });\n		 * // returns an array with two entries: two SymbolMathNodes 'x'\n		 * ```\n		 *\n		 * The callback function is called as callback(node: MathNode, path:\n		 * string, parent: MathNode) : boolean for every node in the tree, and\n		 * must return a boolean. The function filter returns an array with\n		 * nodes for which the test returned true. Parameter path is a string\n		 * containing a relative JSON Path.\n		 * @return Returns an array with nodes for which test returned true\n		 */\n		filter(\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			callback: (node: MathNode, path: string, parent: MathNode) => any\n		): MathNode[];\n\n		/**\n		 * [forEach description]\n		 */\n		forEach(\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			callback: (node: MathNode, path: string, parent: MathNode) => void\n		): void;\n\n		/**\n		 * Transform a node. Creates a new MathNode having it’s child's be the\n		 * results of calling the provided callback function for each of the\n		 * child's of the original node. The callback function is called as\n		 * `callback(child: MathNode, path: string, parent: MathNode)` and must\n		 * return a MathNode. Parameter path is a string containing a relative\n		 * JSON Path.\n		 *\n		 *\n		 * See also transform, which is a recursive version of map.\n		 */\n		map(\n			callback: (node: MathNode, path: string, parent: MathNode) => MathNode\n		): MathNode;\n\n		/**\n		 * Get a HTML representation of the parsed expression.\n		 */\n		toHTML(options?: object): string;\n\n		/**\n		 * Get a string representation of the parsed expression. This is not\n		 * exactly the same as the original input.\n		 */\n		toString(options?: object): string;\n\n		/**\n		 * Get a LaTeX representation of the expression.\n		 */\n		toTex(options?: object): string;\n\n		/**\n		 * Recursively transform an expression tree via a transform function.\n		 * Similar to Array.map, but recursively executed on all nodes in the\n		 * expression tree. The callback function is a mapping function\n		 * accepting a node, and returning a replacement for the node or the\n		 * original node. Function callback is called as callback(node:\n		 * MathNode, path: string, parent: MathNode) for every node in the tree,\n		 * and must return a MathNode. Parameter path is a string containing a\n		 * relative JSON Path.\n		 *\n		 * For example, to replace all nodes of type SymbolMathNode having name\n		 * ‘x’ with a ConstantMathNode with value 3:\n		 * ```js\n		 * var node = math.parse('x^2 + 5*x');\n		 * var transformed = node.transform(function (node, path, parent) {\n		 *   if (node.SymbolMathNode && node.name == 'x') {\n		 *     return new math.expression.node.ConstantMathNode(3);\n		 *   }\n		 *   else {\n		 *     return node;\n		 *   }\n		 * });\n		 * transformed.toString(); // returns '(3 ^ 2) + (5 * 3)'\n		 * ```\n		 */\n		transform<TResult>(\n			callback: (node: this, path: string, parent: MathNode) => TResult\n		): TResult;\n\n		/**\n		 * `traverse(callback)`\n		 *\n		 * Recursively traverse all nodes in a node tree. Executes given\n		 * callback for this node and each of its child nodes. Similar to\n		 * Array.forEach, except recursive. The callback function is a mapping\n		 * function accepting a node, and returning a replacement for the node\n		 * or the original node. Function callback is called as callback(node:\n		 * MathNode, path: string, parent: MathNode) for every node in the tree.\n		 * Parameter path is a string containing a relative JSON Path. Example:\n		 *\n		 * ```\n		 * var node = math.parse('3 * x + 2');\n		 * node.traverse(function (node, path, parent) {\n		 * switch (node.type) {\n		 * case 'OperatorMathNode': console.log(node.type, node.op);    break;\n		 * case 'ConstantMathNode': console.log(node.type, node.value); break;\n		 * case 'SymbolMathNode':   console.log(node.type, node.name);  break;\n		 * default:             console.log(node.type);\n		 * }\n		 * });\n		 * // outputs:\n		 * //   OperatorMathNode +\n		 * //   OperatorMathNode *\n		 * //   ConstantMathNode 3\n		 * //   SymbolMathNode x\n		 * //   ConstantMathNode 2\n		 * ```\n		 */\n		traverse(\n			callback: (node: MathNode, path: string, parent: MathNode) => void\n		): void;\n	}\n\n	interface Parser {\n		/**\n		 * Evaluate an expression. Returns the result of the expression.\n		 * @param expr The expression to evaluate\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		evaluate(expr: string | string[]): any;\n		/**\n		 * Retrieve a variable or function from the parser’s scope.\n		 * @param name The name of the variable or function to be retrieved\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		get(name: string): any;\n		/**\n		 * Retrieve an object with all defined variables in the parser’s scope.\n		 * @returns An object with all defined variables\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		getAll(): { [key: string]: any };\n		/**\n		 * Retrieve a map with all defined variables in the parser’s scope.\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		getAllAsMap(): Map<string, any>;\n		/**\n		 * Set a variable or function in the parser’s scope.\n		 * @param name The name of the variable or function to be set\n		 * @param value The value of the variable or function to be set\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		set: (name: string, value: any) => void;\n		/**\n		 * Remove a variable or function from the parser’s scope.\n		 * @param name The name of the variable or function to be removed\n		 */\n		remove: (name: string) => void;\n		/**\n		 * Completely clear the parser’s scope.\n		 */\n		clear: () => void;\n	}\n\n	interface Distribution {\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		random(size: any, min?: any, max?: any): any;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		randomInt(min: any, max?: any): any;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		pickRandom(array: any): any;\n	}\n\n	interface FormatOptions {\n		/**\n		 * Number notation. Choose from: 'fixed' Always use regular number\n		 * notation. For example '123.40' and '14000000' 'exponential' Always\n		 * use exponential notation. For example '1.234e+2' and '1.4e+7' 'auto'\n		 * (default) Regular number notation for numbers having an absolute\n		 * value between lower and upper bounds, and uses exponential notation\n		 * elsewhere. Lower bound is included, upper bound is excluded. For\n		 * example '123.4' and '1.4e7'.\n		 */\n		notation?:\n			| 'fixed'\n			| 'exponential'\n			| 'engineering'\n			| 'auto'\n			| 'hex'\n			| 'bin'\n			| 'oct';\n\n		/**\n		 * A number between 0 and 16 to round the digits of the number. In case\n		 * of notations 'exponential' and 'auto', precision defines the total\n		 * number of significant digits returned and is undefined by default. In\n		 * case of notation 'fixed', precision defines the number of significant\n		 * digits after the decimal point, and is 0 by default.\n		 */\n		precision?: number | BigNumber;\n\n		/**\n		 * Exponent determining the lower boundary for formatting a value with\n		 * an exponent when notation='auto. Default value is -3.\n		 */\n		lowerExp?: number | BigNumber;\n\n		/**\n		 * Exponent determining the upper boundary for formatting a value with\n		 * an exponent when notation='auto. Default value is 5.\n		 */\n		upperExp?: number | BigNumber;\n\n		/**\n		 * Available values: 'ratio' (default) or 'decimal'. For example\n		 * format(fraction(1, 3)) will output '1/3' when 'ratio' is configured,\n		 * and will output 0.(3) when 'decimal' is configured.\n		 */\n		fraction?: string;\n\n		/**\n		 * The word size in bits to use for formatting in binary, octal, or\n		 * hexadecimal notation. To be used only with `'bin'`, `'oct'`, or `'hex'`\n		 * values for `notation` option. When this option is defined the value\n		 * is formatted as a signed twos complement integer of the given word\n		 * size and the size suffix is appended to the output.\n		 */\n		wordSize?: number | BigNumber;\n	}\n\n	interface Help {\n		toString(): string;\n		toJSON(): string;\n	}\n\n	interface ConfigOptions {\n		relTol?: number;\n		absTol?: number;\n		/**\n		 * @deprecated Use `relTol` and `absTol` instead\n		 */\n		epsilon?: number;\n		matrix?: 'Matrix' | 'Array';\n		number?: 'number' | 'BigNumber' | 'bigint' | 'Fraction';\n		numberFallback?: 'number' | 'BigNumber';\n		precision?: number;\n		predictable?: boolean;\n		randomSeed?: string | null;\n	}\n\n	interface MathJsChain<TValue> {\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		done(): TValue;\n\n		/*************************************************************************\n		 * Construction functions\n		 ************************************************************************/\n\n		/**\n		 * Create a BigNumber, which can store numbers with arbitrary precision.\n		 * When a matrix is provided, all elements will be converted to\n		 * BigNumber.\n		 */\n		bignumber(\n			this: MathJsChain<\n				number | string | Fraction | BigNumber | bigint | Unit | boolean | null\n			>\n		): MathJsChain<BigNumber>;\n		bignumber<T extends MathCollection>(this: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Create a bigint, which can store integers with arbitrary precision.\n		 * When a matrix is provided, all elements will be converted to bigint.\n		 */\n		bigint(\n			this: MathJsChain<\n				number | string | Fraction | BigNumber | bigint | boolean | null\n			>\n		): MathJsChain<bigint>;\n		bigint<T extends MathCollection>(this: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Create a boolean or convert a string or number to a boolean. In case\n		 * of a number, true is returned for non-zero numbers, and false in case\n		 * of zero. Strings can be 'true' or 'false', or can contain a number.\n		 * When value is a matrix, all elements will be converted to boolean.\n		 */\n		boolean(\n			this: MathJsChain<string | number | boolean | null>\n		): MathJsChain<boolean>;\n		boolean(this: MathJsChain<MathCollection>): MathJsChain<MathCollection>;\n\n		/**\n		 * Create a complex value or convert a value to a complex value.\n		 * @param im Argument specifying the imaginary part of the complex\n		 * number\n		 */\n		complex(\n			this: MathJsChain<Complex | string | PolarCoordinates>,\n			im?: number\n		): MathJsChain<Complex>;\n		complex(this: MathJsChain<MathCollection>): MathJsChain<MathCollection>;\n\n		/**\n		 * Create a user-defined unit and register it with the Unit type.\n		 * @param definition Definition of the unit in terms of existing units.\n		 * For example, ‘0.514444444 m / s’.\n		 * @param options (optional) An object containing any of the following\n		 * properties:</br>- prefixes {string} “none”, “short”, “long”,\n		 * “binary_short”, or “binary_long”. The default is “none”.</br>-\n		 * aliases {Array} Array of strings. Example: [‘knots’, ‘kt’,\n		 * ‘kts’]</br>- offset {Numeric} An offset to apply when converting from\n		 * the unit. For example, the offset for celsius is 273.15. Default is\n		 * 0.\n		 */\n		createUnit(\n			this: MathJsChain<string>,\n			definition?: string | UnitDefinition | Unit,\n			options?: CreateUnitOptions\n		): MathJsChain<Unit>;\n		/**\n		 * Create a user-defined unit and register it with the Unit type.\n		 * @param options (optional) An object containing any of the following\n		 * properties:</br>- prefixes {string} “none”, “short”, “long”,\n		 * “binary_short”, or “binary_long”. The default is “none”.</br>-\n		 * aliases {Array} Array of strings. Example: [‘knots’, ‘kt’,\n		 * ‘kts’]</br>- offset {Numeric} An offset to apply when converting from\n		 * the unit. For example, the offset for celsius is 273.15. Default is\n		 * 0.\n		 */\n		createUnit(\n			this: MathJsChain<Record<string, string | UnitDefinition | Unit>>,\n			options?: CreateUnitOptions\n		): MathJsChain<Unit>;\n\n		/**\n		 * Create a fraction convert a value to a fraction.\n		 * @param denominator Argument specifying the denominator of the\n		 * fraction\n		 */\n		fraction(\n			this: MathJsChain<\n				| number\n				| string\n				| BigNumber\n				| bigint\n				| Unit\n				| Fraction\n				| FractionDefinition\n			>,\n			denominator?: number\n		): MathJsChain<Fraction>;\n		fraction(this: MathJsChain<MathCollection>): MathJsChain<MathCollection>;\n\n		/**\n		 * Create an index. An Index can store ranges having start, step, and\n		 * end for multiple dimensions. Matrix.get, Matrix.set, and math.subset\n		 * accept an Index as input.\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		index(this: MathJsChain<any[]>): MathJsChain<Index>;\n\n		/**\n		 * Create a Matrix. The function creates a new math.type.Matrix object\n		 * from an Array. A Matrix has utility functions to manipulate the data\n		 * in the matrix, like getting the size and getting or setting values in\n		 * the matrix. Supported storage formats are 'dense' and 'sparse'.\n		 */\n		matrix(\n			this: MathJsChain<MathCollection>,\n			format?: 'sparse' | 'dense',\n			dataType?: string\n		): MathJsChain<Matrix>;\n\n		/**\n		 * Create a number or convert a string, boolean, or unit to a number.\n		 * When value is a matrix, all elements will be converted to number.\n		 * @param valuelessUnit A valueless unit, used to convert a unit to a\n		 * number\n		 */\n		number(\n			this: MathJsChain<\n				string | number | BigNumber | bigint | Fraction | boolean | Unit | null\n			>,\n			valuelessUnit?: Unit | string\n		): MathJsChain<number>;\n		number(\n			this: MathJsChain<MathCollection>,\n			valuelessUnit?: Unit | string\n		): MathJsChain<MathCollection>;\n\n		/**\n		 * Convert a numeric input to a specific numeric type: number, BigNumber, bigint, or Fraction.\n		 * @param outputType The desired numeric output type\n		 */\n		numeric(\n			this: MathJsChain<string | number | BigNumber | bigint | Fraction>,\n			outputType: 'number'\n		): MathJsChain<number>;\n		numeric(\n			this: MathJsChain<string | number | BigNumber | bigint | Fraction>,\n			outputType: 'BigNumber'\n		): MathJsChain<BigNumber>;\n		numeric(\n			this: MathJsChain<string | number | BigNumber | bigint | Fraction>,\n			outputType: 'bigint'\n		): MathJsChain<bigint>;\n		numeric(\n			this: MathJsChain<string | number | BigNumber | bigint | Fraction>,\n			outputType: 'Fraction'\n		): MathJsChain<Fraction>;\n\n		/**\n		 * Create a Sparse Matrix. The function creates a new math.type.Matrix\n		 * object from an Array. A Matrix has utility functions to manipulate\n		 * the data in the matrix, like getting the size and getting or setting\n		 * values in the matrix.\n		 * @param dataType Sparse Matrix data type\n		 */\n		sparse(\n			this: MathJsChain<MathCollection>,\n			dataType?: string\n		): MathJsChain<Matrix>;\n\n		/**\n		 * Split a unit in an array of units whose sum is equal to the original\n		 * unit.\n		 * @param parts An array of strings or valueless units\n		 */\n		splitUnit(this: MathJsChain<Unit>, parts: Unit[]): MathJsChain<Unit[]>;\n\n		/**\n		 * Create a string or convert any object into a string. Elements of\n		 * Arrays and Matrices are processed element wise.\n		 */\n		string(\n			this: MathJsChain<MathNumericType | string | Unit | null>\n		): MathJsChain<string>;\n		string(this: MathJsChain<MathCollection>): MathJsChain<MathCollection>;\n\n		/**\n		 * Create a unit. Depending on the passed arguments, the function will\n		 * create and return a new math.type.Unit object. When a matrix is\n		 * provided, all elements will be converted to units.\n		 * @param unit The unit to be created\n		 */\n		unit(this: MathJsChain<string>, unit?: string): MathJsChain<Unit>;\n		unit(this: MathJsChain<MathNumericType>, unit?: string): MathJsChain<Unit>;\n		unit(this: MathJsChain<MathCollection>, unit?: string): MathJsChain<Unit[]>;\n\n		/*************************************************************************\n		 * Expression functions\n		 ************************************************************************/\n\n		/**\n		 * Parse and compile an expression. Returns a an object with a function\n		 * evaluate([scope]) to evaluate the compiled expression.\n		 */\n		compile(this: MathJsChain<MathExpression>): MathJsChain<EvalFunction>;\n\n		// TODO properly type this\n		/**\n		 * Evaluate an expression.\n		 * @param scope Scope to read/write variables\n		 */\n		evaluate(\n			this: MathJsChain<MathExpression | Matrix>,\n			scope?: object\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		): MathJsChain<any>;\n		evaluate(\n			this: MathJsChain<MathExpression[]>,\n			scope?: object\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		): MathJsChain<any[]>;\n\n		/**\n		 * Retrieve help on a function or data type. Help files are retrieved\n		 * from the documentation in math.expression.docs.\n		 */\n		help(this: MathJsChain<unknown>): MathJsChain<unknown>;\n\n		/**\n		 * @param options Available options: nodes - a set of custome nodes\n		 */\n		parse(\n			this: MathJsChain<MathExpression[]>,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			options?: any\n		): MathJsChain<MathNode[]>;\n\n		/**\n		 * Parse an expression. Returns a node tree, which can be evaluated by\n		 * invoking node.evaluate();\n		 * @param options Available options: nodes - a set of custome nodes\n		 */\n		parse(\n			this: MathJsChain<MathExpression>,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			options?: any\n		): MathJsChain<MathNode>;\n\n		/**\n		 *  Replaces variable nodes with their scoped values\n		 * @param scope Scope to read/write variables\n		 */\n		resolve(\n			this: MathJsChain<MathNode>,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			scope?: Record<string, any>\n		): MathJsChain<MathNode>;\n		resolve(\n			this: MathJsChain<MathNode[]>,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			scope?: Record<string, any>\n		): MathJsChain<MathNode[]>;\n\n		/*************************************************************************\n		 * Algebra functions\n		 ************************************************************************/\n		/**\n		 * @param variable The variable over which to differentiate\n		 * @param options There is one option available, simplify, which is true\n		 * by default. When false, output will not be simplified.\n		 */\n		derivative(\n			this: MathJsChain<MathNode | string>,\n			variable: MathNode | string,\n			options?: { simplify: boolean }\n		): MathJsChain<MathNode>;\n\n		/**\n		 * Solves the linear equation system by forwards substitution. Matrix\n		 * must be a lower triangular matrix.\n		 * @param b A column vector with the b values\n		 */\n		lsolve(this: MathJsChain<Matrix>, b: MathCollection): MathJsChain<Matrix>;\n		lsolve(\n			this: MathJsChain<MathArray>,\n			b: MathCollection\n		): MathJsChain<MathArray>;\n\n		/**\n		 * Calculate the Matrix LU decomposition with partial pivoting. Matrix A\n		 * is decomposed in two matrices (L, U) and a row permutation vector p\n		 * where A[p,:] = L * U\n		 */\n		lup(this: MathJsChain<MathCollection>): MathJsChain<LUDecomposition>;\n\n		/**\n		 * Solves the linear system A * x = b where A is an [n x n] matrix and b\n		 * is a [n] column vector.\n		 * @param b Column Vector\n		 * @param order The Symbolic Ordering and Analysis order, see slu for\n		 * details. Matrix must be a SparseMatrix\n		 * @param threshold Partial pivoting threshold (1 for partial pivoting),\n		 * see slu for details. Matrix must be a SparseMatrix.\n		 */\n		lusolve(\n			this: MathJsChain<Matrix>,\n			b: MathCollection,\n			order?: number,\n			threshold?: number\n		): MathJsChain<Matrix>;\n\n		lusolve(\n			this: MathJsChain<MathArray>,\n			b: MathCollection,\n			order?: number,\n			threshold?: number\n		): MathJsChain<MathArray>;\n\n		lusolve(\n			this: MathJsChain<LUDecomposition>,\n			b: MathCollection\n		): MathJsChain<Matrix>;\n\n		/**\n		 * Calculate the Matrix QR decomposition. Matrix A is decomposed in two\n		 * matrices (Q, R) where Q is an orthogonal matrix and R is an upper\n		 * triangular matrix.\n		 */\n		qr(this: MathJsChain<MathCollection>): MathJsChain<QRDecomposition>;\n\n		/**\n		 * Transform a rationalizable expression in a rational fraction. If\n		 * rational fraction is one variable polynomial then converts the\n		 * numerator and denominator in canonical form, with decreasing\n		 * exponents, returning the coefficients of numerator.\n		 * @param optional scope of expression or true for already evaluated\n		 * rational expression at input\n		 * @param detailed  optional True if return an object, false if return\n		 * expression node (default)\n		 */\n		rationalize(\n			this: MathJsChain<MathNode | string>,\n			optional?: object | boolean,\n			detailed?: boolean\n		): MathJsChain<MathNode>;\n\n		/**\n		 * Simplify an expression tree.\n		 * @param rules A list of rules are applied to an expression, repeating\n		 * over the list until no further changes are made. It’s possible to\n		 * pass a custom set of rules to the function as second argument. A rule\n		 * can be specified as an object, string, or function.\n		 * @param scope Scope to variables\n		 * @param options Options to configure the behavior of simplify\n		 */\n		simplify(\n			this: MathJsChain<MathNode | string>,\n			rules?: SimplifyRule[],\n			scope?: Map<string, MathType> | object,\n			options?: SimplifyOptions\n		): MathJsChain<MathNode>;\n\n		simplifyConstant(\n			this: MathJsChain<MathNode | string>,\n			options?: SimplifyOptions\n		): MathJsChain<MathNode>;\n		simplifyCore(\n			this: MathJsChain<MathNode | string>,\n			options?: SimplifyOptions\n		): MathJsChain<MathNode>;\n\n		/**\n		 * Calculate the Sparse Matrix LU decomposition with full pivoting.\n		 * Sparse Matrix A is decomposed in two matrices (L, U) and two\n		 * permutation vectors (pinv, q) where P * A * Q = L * U\n		 * @param order The Symbolic Ordering and Analysis order: 0 - Natural\n		 * ordering, no permutation vector q is returned 1 - Matrix must be\n		 * square, symbolic ordering and analisis is performed on M = A + A' 2 -\n		 * Symbolic ordering and analysis is performed on M = A' * A. Dense\n		 * columns from A' are dropped, A recreated from A'. This is appropriate\n		 * for LU factorization of non-symmetric matrices. 3 - Symbolic ordering\n		 * and analysis is performed on M = A' * A. This is best used for LU\n		 * factorization is matrix M has no dense rows. A dense row is a row\n		 * with more than 10*sqr(columns) entries.\n		 * @param threshold Partial pivoting threshold (1 for partial pivoting)\n		 */\n		slu(\n			this: MathJsChain<Matrix>,\n			order: number,\n			threshold: number\n		): MathJsChain<SLUDecomposition>;\n\n		/**\n		 * Solves the linear equation system by backward substitution. Matrix\n		 * must be an upper triangular matrix. U * x = b\n		 * @param b A column vector with the b values\n		 */\n		usolve(this: MathJsChain<Matrix>, b: MathCollection): MathJsChain<Matrix>;\n		usolve(\n			this: MathJsChain<MathArray>,\n			b: MathCollection\n		): MathJsChain<MathArray>;\n\n		/*************************************************************************\n		 * Arithmetic functions\n		 ************************************************************************/\n\n		/**\n		 * Calculate the absolute value of a number. For matrices, the function\n		 * is evaluated element wise.\n		 */\n		abs<T extends MathType>(this: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Add two values, x + y. For matrices, the function is evaluated\n		 * element wise.\n		 * @param y Second value to add\n		 */\n		add<T extends MathType>(this: MathJsChain<T>, y: T): MathJsChain<T>;\n		add(this: MathJsChain<MathType>, y: MathType): MathJsChain<MathType>;\n\n		/**\n		 * Apply a function that maps an array to a scalar along a given axis of the\n		 * matrix or array. Returns a new matrix or array with one less dimension\n		 * than the input.\n		 * @param dim The dimension along which the callback is applied\n		 * @param callback The callback function that is applied. This Function should take an\n		 * array or 1-d matrix as an input and return a number.\n		 * @returns The residual matrix with the function applied over some dimension.\n		 */\n		apply<T extends MathCollection>(\n			this: MathJsChain<T>,\n			dim: number,\n			callback: (array: Array<MathType> | Matrix) => number\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the cubic root of a value. For matrices, the function is\n		 * evaluated element wise.\n		 * @param allRoots Optional, false by default. Only applicable when x is\n		 * a number or complex number. If true, all complex roots are returned,\n		 * if false (default) the principal root is returned.\n		 */\n		cbrt<T extends number | BigNumber | Complex | Unit>(\n			this: MathJsChain<T>,\n			allRoots?: boolean\n		): MathJsChain<T>;\n\n		// Rounding functions grouped for similarity\n\n		/**\n		 * Round a value towards plus infinity If x is complex, both real and\n		 * imaginary part are rounded towards plus infinity. For matrices, the\n		 * function is evaluated element wise.\n		 * @param n Number of decimals Default value: 0.\n		 */\n		ceil<T extends MathNumericType | MathCollection>(\n			this: MathJsChain<T>,\n			n?: number | BigNumber | MathCollection\n		): MathJsChain<T>;\n\n		/**\n		 * Round a value towards zero. For matrices, the function is evaluated\n		 * element wise.\n		 * @param n Number of decimals Default value: 0.\n		 */\n		fix<T extends MathNumericType | MathCollection>(\n			this: MathJsChain<T>,\n			n?: number | BigNumber | MathCollection\n		): MathJsChain<T>;\n\n		/**\n		 * Round a value towards minus infinity. For matrices, the function is\n		 * evaluated element wise.\n		 * @param n Number of decimals Default value: 0.\n		 */\n		floor<T extends MathNumericType | MathCollection>(\n			this: MathJsChain<T>,\n			n?: number | BigNumber | MathCollection\n		): MathJsChain<T>;\n\n		/**\n		 * Round a value towards the nearest integer. For matrices, the function\n		 * is evaluated element wise.\n		 * @param n Number of decimals Default value: 0.\n		 */\n		round<T extends MathNumericType | MathCollection>(\n			this: MathJsChain<T>,\n			n?: number | BigNumber | MathCollection\n		): MathJsChain<T>;\n		round<U extends MathCollection>(\n			this: MathJsChain<MathNumericType | U>,\n			n: U\n		): MathJsChain<U>;\n		round(this: MathJsChain<Unit>, unit: Unit): MathJsChain<Unit>;\n		round<U extends MathCollection>(\n			this: MathJsChain<U>,\n			unit: Unit\n		): MathJsChain<U>;\n		round(\n			this: MathJsChain<Unit>,\n			n: number | BigNumber,\n			unit: Unit\n		): MathJsChain<Unit>;\n		round<U extends MathCollection>(\n			this: MathJsChain<U>,\n			n: number | BigNumber,\n			unit: Unit\n		): MathJsChain<U>;\n\n		// End of rounding group\n\n		/**\n		 * Compute the cube of a value, x * x * x. For matrices, the function is\n		 * evaluated element wise.\n		 */\n		cube<T extends MathNumericType | Unit>(this: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Divide two values, x / y. To divide matrices, x is multiplied with\n		 * the inverse of y: x * inv(y).\n		 * @param y Denominator\n		 */\n		divide(this: MathJsChain<Unit>, y: Unit): MathJsChain<Unit | number>;\n		divide(this: MathJsChain<Unit>, y: number): MathJsChain<Unit>;\n		divide(this: MathJsChain<number>, y: number): MathJsChain<number>;\n		divide(this: MathJsChain<MathType>, y: MathType): MathJsChain<MathType>;\n\n		/**\n		 * Divide two matrices element wise. The function accepts both matrices\n		 * and scalar values.\n		 * @param y Denominator\n		 */\n		dotDivide<T extends MathCollection>(\n			this: MathJsChain<T>,\n			y: MathType\n		): MathJsChain<T>;\n		dotDivide<T extends MathCollection>(\n			this: MathJsChain<MathType>,\n			y: T\n		): MathJsChain<T>;\n		dotDivide(this: MathJsChain<Unit>, y: MathType): MathJsChain<Unit>;\n		dotDivide(this: MathJsChain<MathType>, y: Unit): MathJsChain<Unit>;\n		dotDivide(\n			this: MathJsChain<MathNumericType>,\n			y: MathNumericType\n		): MathJsChain<MathNumericType>;\n\n		/**\n		 * Multiply two matrices element wise. The function accepts both\n		 * matrices and scalar values.\n		 * @param y Right hand value\n		 */\n		dotMultiply<T extends MathCollection>(\n			this: MathJsChain<T>,\n			y: MathType\n		): MathJsChain<T>;\n		dotMultiply<T extends MathCollection>(\n			this: MathJsChain<MathType>,\n			y: T\n		): MathJsChain<T>;\n		dotMultiply(this: MathJsChain<Unit>, y: MathType): MathJsChain<Unit>;\n		dotMultiply(this: MathJsChain<MathType>, y: Unit): MathJsChain<Unit>;\n		dotMultiply(\n			this: MathJsChain<MathNumericType>,\n			y: MathNumericType\n		): MathJsChain<MathNumericType>;\n\n		/**\n		 * Calculates the power of x to y element wise.\n		 * @param y The exponent\n		 */\n		dotPow<T extends MathType>(this: MathJsChain<T>, y: MathType): MathJsChain<T>;\n\n		/**\n		 * Calculate the exponent of a value. For matrices, the function is\n		 * evaluated element wise.\n		 */\n		exp<T extends number | BigNumber | Complex>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the value of subtracting 1 from the exponential value. For\n		 * matrices, the function is evaluated element wise.\n		 */\n		expm1<T extends number | BigNumber | Complex>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the greatest common divisor for two or more values or\n		 * arrays. For matrices, the function is evaluated element wise.\n		 */\n		gcd<T extends number | BigNumber | Fraction | Matrix>(\n			this: MathJsChain<T[]>,\n			...args: T[]\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the hypotenuse of a list with values. The hypotenuse is\n		 * defined as: hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...) For\n		 * matrix input, the hypotenuse is calculated for all values in the\n		 * matrix.\n		 */\n		hypot<T extends number | BigNumber>(this: MathJsChain<T[]>): MathJsChain<T>;\n\n		/**\n		 * Calculate the least common multiple for two or more values or arrays.\n		 * lcm is defined as: lcm(a, b) = abs(a * b) / gcd(a, b) For matrices,\n		 * the function is evaluated element wise.\n		 * @param b An integer number\n		 */\n		lcm<T extends number | BigNumber | MathCollection>(\n			this: MathJsChain<T>,\n			b: T\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the logarithm of a value. For matrices, the function is\n		 * evaluated element wise.\n		 * @param base Optional base for the logarithm. If not provided, the\n		 * natural logarithm of x is calculated. Default value: e.\n		 */\n		log<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>,\n			base?: number | BigNumber | Complex\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Calculate the 10-base of a value. This is the same as calculating\n		 * log(x, 10). For matrices, the function is evaluated element wise.\n		 */\n\n		log10<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the logarithm of a value+1. For matrices, the function is\n		 * evaluated element wise.\n		 */\n		log1p(\n			this: MathJsChain<number>,\n			base?: number | BigNumber | Complex\n		): MathJsChain<number>;\n		log1p(\n			this: MathJsChain<BigNumber>,\n			base?: number | BigNumber | Complex\n		): MathJsChain<BigNumber>;\n		log1p(\n			this: MathJsChain<Complex>,\n			base?: number | BigNumber | Complex\n		): MathJsChain<Complex>;\n		log1p(\n			this: MathJsChain<MathArray>,\n			base?: number | BigNumber | Complex\n		): MathJsChain<MathArray>;\n		log1p(\n			this: MathJsChain<Matrix>,\n			base?: number | BigNumber | Complex\n		): MathJsChain<Matrix>;\n\n		/**\n		 * Calculate the 2-base of a value. This is the same as calculating\n		 * log(x, 2). For matrices, the function is evaluated element wise.\n		 */\n\n		log2<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculates the modulus, the remainder of an integer division. For\n		 * matrices, the function is evaluated element wise. The modulus is\n		 * defined as: x - y * floor(x / y)\n		 * @see http://en.wikipedia.org/wiki/Modulo_operation.\n		 * @param y Divisor\n		 */\n		mod<T extends number | BigNumber | bigint | Fraction | MathCollection>(\n			this: MathJsChain<T>,\n			y: number | BigNumber | bigint | Fraction | MathCollection\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Multiply two values, x * y. The result is squeezed. For matrices, the\n		 * matrix product is calculated.\n		 * @param y The second value to multiply\n		 */\n		multiply<T extends MathCollection>(\n			this: MathJsChain<T>,\n			y: MathType\n		): MathJsChain<T>;\n		multiply(this: MathJsChain<Unit>, y: Unit): MathJsChain<Unit>;\n		multiply(this: MathJsChain<number>, y: number): MathJsChain<number>;\n		multiply(this: MathJsChain<MathType>, y: MathType): MathJsChain<MathType>;\n\n		/**\n		 * Calculate the norm of a number, vector or matrix. The second\n		 * parameter p is optional. If not provided, it defaults to 2.\n		 * @param p Vector space. Supported numbers include Infinity and\n		 * -Infinity. Supported strings are: 'inf', '-inf', and 'fro' (The\n		 * Frobenius norm) Default value: 2.\n		 */\n		norm(\n			this: MathJsChain<number | BigNumber | Complex | MathCollection>,\n			p?: number | BigNumber | string\n		): MathJsChain<number | BigNumber>;\n\n		/**\n		 * Calculate the nth root of a value. The principal nth root of a\n		 * positive real number A, is the positive real solution of the equation\n		 * x^root = A For matrices, the function is evaluated element wise.\n		 * @param root The root. Default value: 2.\n		 */\n		nthRoot(\n			this: MathJsChain<number | BigNumber | MathCollection | Complex>,\n			root?: number | BigNumber\n		): MathJsChain<number | Complex | MathCollection>;\n\n		/**\n		 * Calculates the power of x to y, x ^ y. Matrix exponentiation is\n		 * supported for square matrices x, and positive integer exponents y.\n		 * @param y The exponent\n		 */\n		pow(\n			this: MathJsChain<MathType>,\n			y: number | BigNumber | bigint | Complex\n		): MathJsChain<MathType>;\n\n		/**\n		 * Compute the sign of a value. The sign of a value x is: 1 when x > 1\n		 * -1 when x < 0 0 when x == 0 For matrices, the function is evaluated\n		 * element wise.\n		 * @param x The number for which to determine the sign\n		 * @returns The sign of x\n		 */\n		sign<T extends MathType>(this: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Calculate the square root of a value. For matrices, the function is\n		 * evaluated element wise.\n		 */\n\n		sqrt<T extends number | BigNumber | Complex | MathCollection | Unit>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Compute the square of a value, x * x. For matrices, the function is\n		 * evaluated element wise.\n		 */\n\n		square<T extends MathType>(this: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Subtract two values, x - y. For matrices, the function is evaluated\n		 * element wise.\n		 * @param y Value to subtract from x\n		 */\n		subtract<T extends MathType>(this: MathJsChain<T>, y: T): MathJsChain<T>;\n\n		/**\n		 * Inverse the sign of a value, apply a unary minus operation. For\n		 * matrices, the function is evaluated element wise. Boolean values and\n		 * strings will be converted to a number. For complex numbers, both real\n		 * and complex value are inverted.\n		 */\n\n		unaryMinus<T extends MathType>(this: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Unary plus operation. Boolean values and strings will be converted to\n		 * a number, numeric values will be returned as is. For matrices, the\n		 * function is evaluated element wise.\n		 */\n\n		unaryPlus<T extends string | MathType>(this: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Calculate the extended greatest common divisor for two values. See\n		 * http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n		 * @param b An integer number\n		 */\n		xgcd(\n			this: MathJsChain<number | BigNumber>,\n			b: number | BigNumber\n		): MathJsChain<MathArray>;\n\n		/**\n		 * Count the number of elements of a matrix, array or string.\n		 */\n		count(this: MathJsChain<MathCollection>): MathJsChain<number>;\n		count(this: MathJsChain<string>): MathJsChain<number>;\n\n		/**\n		 * Compute the sum of a matrix or a list with values. In case of a\n		 * (multi dimensional) array or matrix, the sum of all elements will be\n		 * calculated.\n		 */\n		sum(\n			this: MathJsChain<Array<number | BigNumber | Fraction>>\n		): MathJsChain<number>;\n		sum(this: MathJsChain<MathCollection>): MathJsChain<number>;\n		/*************************************************************************\n		 * Bitwise functions\n		 ************************************************************************/\n\n		/**\n		 * Bitwise AND two values, x & y. For matrices, the function is\n		 * evaluated element wise.\n		 * @param y Second value to and\n		 */\n		bitAnd<T extends number | BigNumber | bigint | MathCollection>(\n			this: MathJsChain<T>,\n			y: number | BigNumber | bigint | MathCollection\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Bitwise NOT value, ~x. For matrices, the function is evaluated\n		 * element wise. For units, the function is evaluated on the best prefix\n		 * base.\n		 */\n\n		bitNot<T extends number | BigNumber | bigint | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Bitwise OR two values, x | y. For matrices, the function is evaluated\n		 * element wise. For units, the function is evaluated on the lowest\n		 * print base.\n		 * @param y Second value to or\n		 */\n		bitOr<T extends number | BigNumber | bigint | MathCollection>(\n			this: MathJsChain<T>,\n			y: T\n		): MathJsChain<T>;\n\n		/**\n		 * Bitwise XOR two values, x ^ y. For matrices, the function is\n		 * evaluated element wise.\n		 * @param y Second value to xor\n		 */\n		bitXor<T extends number | BigNumber | bigint | MathCollection>(\n			this: MathJsChain<T>,\n			y: number | BigNumber | bigint | MathCollection\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Bitwise left logical shift of a value x by y number of bits, x << y.\n		 * For matrices, the function is evaluated element wise. For units, the\n		 * function is evaluated on the best prefix base.\n		 * @param y Amount of shifts\n		 */\n		leftShift<T extends number | BigNumber | bigint | MathCollection>(\n			this: MathJsChain<T>,\n			y: number | BigNumber | bigint\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Bitwise right arithmetic shift of a value x by y number of bits, x >>\n		 * y. For matrices, the function is evaluated element wise. For units,\n		 * the function is evaluated on the best prefix base.\n		 * @param y Amount of shifts\n		 */\n		rightArithShift<T extends number | BigNumber | bigint | MathCollection>(\n			this: MathJsChain<T>,\n			y: number | BigNumber | bigint\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Bitwise right logical shift of value x by y number of bits, x >>> y.\n		 * For matrices, the function is evaluated element wise. For units, the\n		 * function is evaluated on the best prefix base.\n		 * @param y Amount of shifts\n		 */\n		rightLogShift<T extends number | MathCollection>(\n			this: MathJsChain<T>,\n			y: number\n		): MathJsChain<NoLiteralType<T>>;\n\n		/*************************************************************************\n		 * Combinatorics functions\n		 ************************************************************************/\n\n		/**\n		 * The Bell Numbers count the number of partitions of a set. A partition\n		 * is a pairwise disjoint subset of S whose union is S. bellNumbers only\n		 * takes integer arguments. The following condition must be enforced: n\n		 * >= 0\n		 */\n\n		bellNumbers(this: MathJsChain<number>): MathJsChain<number>;\n		bellNumbers(this: MathJsChain<BigNumber>): MathJsChain<BigNumber>;\n\n		/**\n		 * The Catalan Numbers enumerate combinatorial structures of many\n		 * different types. catalan only takes integer arguments. The following\n		 * condition must be enforced: n >= 0\n		 */\n\n		catalan(this: MathJsChain<number>): MathJsChain<number>;\n		catalan(this: MathJsChain<BigNumber>): MathJsChain<BigNumber>;\n\n		/**\n		 * The composition counts of n into k parts. Composition only takes\n		 * integer arguments. The following condition must be enforced: k <= n.\n		 * @param k Number of objects in the subset\n		 */\n		composition<T extends number | BigNumber>(\n			this: MathJsChain<T>,\n			k: number | BigNumber\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * The Stirling numbers of the second kind, counts the number of ways to\n		 * partition a set of n labelled objects into k nonempty unlabelled\n		 * subsets. stirlingS2 only takes integer arguments. The following\n		 * condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) =\n		 * 1\n		 * @param k Number of objects in the subset\n		 */\n		stirlingS2<T extends number | BigNumber>(\n			this: MathJsChain<T>,\n			k: number | BigNumber\n		): MathJsChain<NoLiteralType<T>>;\n\n		/*************************************************************************\n		 * Complex functions\n		 ************************************************************************/\n\n		/**\n		 * Compute the argument of a complex value. For a complex number a + bi,\n		 * the argument is computed as atan2(b, a). For matrices, the function\n		 * is evaluated element wise.\n		 */\n\n		arg(this: MathJsChain<number | Complex>): MathJsChain<number>;\n		arg(this: MathJsChain<BigNumber | Complex>): MathJsChain<BigNumber>;\n		arg(this: MathJsChain<MathArray>): MathJsChain<MathArray>;\n		arg(this: MathJsChain<Matrix>): MathJsChain<Matrix>;\n\n		/**\n		 * Compute the complex conjugate of a complex value. If x = a+bi, the\n		 * complex conjugate of x is a - bi. For matrices, the function is\n		 * evaluated element wise.\n		 */\n		conj<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Get the imaginary part of a complex number. For a complex number a +\n		 * bi, the function returns b. For matrices, the function is evaluated\n		 * element wise.\n		 */\n		im(this: MathJsChain<number | Complex>): MathJsChain<number>;\n		im(this: MathJsChain<BigNumber>): MathJsChain<BigNumber>;\n		im(this: MathJsChain<MathCollection>): MathJsChain<MathCollection>;\n\n		/**\n		 * Get the real part of a complex number. For a complex number a + bi,\n		 * the function returns a. For matrices, the function is evaluated\n		 * element wise.\n		 */\n		re(this: MathJsChain<number | Complex>): MathJsChain<number>;\n		re(this: MathJsChain<BigNumber>): MathJsChain<BigNumber>;\n		re(this: MathJsChain<MathCollection>): MathJsChain<MathCollection>;\n\n		/*************************************************************************\n		 * Geometry functions\n		 ************************************************************************/\n\n		/**\n		 * Calculates: The eucledian distance between two points in 2 and 3\n		 * dimensional spaces. Distance between point and a line in 2 and 3\n		 * dimensional spaces. Pairwise distance between a set of 2D or 3D\n		 * points NOTE: When substituting coefficients of a line(a, b and c),\n		 * use ax + by + c = 0 instead of ax + by = c For parametric equation of\n		 * a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b,\n		 * c)\n		 * @param y Coordinates of the second point\n		 */\n		distance(\n			this: MathJsChain<MathCollection | object>,\n			y: MathCollection | object\n		): MathJsChain<number | BigNumber>;\n\n		/**\n		 * Calculates the point of intersection of two lines in two or three\n		 * dimensions and of a line and a plane in three dimensions. The inputs\n		 * are in the form of arrays or 1 dimensional matrices. The line\n		 * intersection functions return null if the lines do not meet. Note:\n		 * Fill the plane coefficients as x + y + z = c and not as x + y + z + c\n		 * = 0.\n		 * @param x Co-ordinates of second end-point of first line\n		 * @param y Co-ordinates of first end-point of second line OR\n		 * Coefficients of the plane's equation\n		 * @param z Co-ordinates of second end-point of second line OR null if\n		 * the calculation is for line and plane\n		 */\n		intersect(\n			this: MathJsChain<MathCollection>,\n			x: MathCollection,\n			y: MathCollection,\n			z?: MathCollection\n		): MathJsChain<MathArray>;\n\n		/*************************************************************************\n		 * Logical functions\n		 ************************************************************************/\n\n		/**\n		 * Logical and. Test whether two values are both defined with a\n		 * nonzero/nonempty value. For matrices, the function is evaluated\n		 * element wise.\n		 * @param y Second value to and\n		 */\n		and(\n			this: MathJsChain<\n				number | BigNumber | bigint | Complex | Unit | MathCollection\n			>,\n			y: number | BigNumber | bigint | Complex | Unit | MathCollection\n		): MathJsChain<boolean | MathCollection>;\n\n		/**\n		 * Logical not. Flips boolean value of a given parameter. For matrices,\n		 * the function is evaluated element wise.\n		 */\n		not(\n			this: MathJsChain<\n				number | BigNumber | bigint | Complex | Unit | MathCollection\n			>\n		): MathJsChain<boolean | MathCollection>;\n\n		/**\n		 * Logical or. Test if at least one value is defined with a\n		 * nonzero/nonempty value. For matrices, the function is evaluated\n		 * element wise.\n		 * @param y Second value to or\n		 */\n		or(\n			this: MathJsChain<\n				number | BigNumber | bigint | Complex | Unit | MathCollection\n			>,\n			y: number | BigNumber | bigint | Complex | Unit | MathCollection\n		): MathJsChain<boolean | MathCollection>;\n\n		/**\n		 * Logical xor. Test whether one and only one value is defined with a\n		 * nonzero/nonempty value. For matrices, the function is evaluated\n		 * element wise.\n		 * @param y Second value to xor\n		 */\n		xor(\n			this: MathJsChain<\n				number | BigNumber | bigint | Complex | Unit | MathCollection\n			>,\n			y: number | BigNumber | bigint | Complex | Unit | MathCollection\n		): MathJsChain<boolean | MathCollection>;\n\n		/*************************************************************************\n		 * Matrix functions\n		 ************************************************************************/\n\n		/**\n		 * Concatenate two or more matrices. dim: number is a zero-based\n		 * dimension over which to concatenate the matrices. By default the last\n		 * dimension of the matrices.\n		 */\n\n		concat(\n			this: MathJsChain<Array<MathCollection | number | BigNumber>>\n		): MathJsChain<MathCollection>;\n\n		/**\n		 * Calculate the cross product for two vectors in three dimensional\n		 * space. The cross product of A = [a1, a2, a3] and B =[b1, b2, b3] is\n		 * defined as: cross(A, B) = [ a2 * b3 - a3 * b2, a3 * b1 - a1 * b3, a1\n		 * * b2 - a2 * b1 ]\n		 * @param y Second vector\n		 */\n		cross(\n			this: MathJsChain<MathCollection>,\n			y: MathCollection\n		): MathJsChain<MathCollection>;\n\n		/**\n		 * Calculate the determinant of a matrix.\n		 */\n\n		det(this: MathJsChain<MathCollection>): MathJsChain<number>;\n\n		/**\n		 * Create a diagonal matrix or retrieve the diagonal of a matrix. When x\n		 * is a vector, a matrix with vector x on the diagonal will be returned.\n		 * When x is a two dimensional matrix, the matrixes kth diagonal will be\n		 * returned as vector. When k is positive, the values are placed on the\n		 * super diagonal. When k is negative, the values are placed on the sub\n		 * diagonal.\n		 * @param k The diagonal where the vector will be filled in or\n		 * retrieved. Default value: 0.\n		 * @param format The matrix storage format. Default value: 'dense'.\n		 */\n		diag(this: MathJsChain<MathCollection>, format?: string): MathJsChain<Matrix>;\n		diag(\n			this: MathJsChain<MathCollection>,\n			k: number | BigNumber,\n			format?: string\n		): MathJsChain<MathCollection>;\n\n		/**\n		 * Calculate the dot product of two vectors. The dot product of A = [a1,\n		 * a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] is defined as: dot(A,\n		 * B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn\n		 * @param y Second vector\n		 */\n		dot(this: MathJsChain<MathCollection>, y: MathCollection): MathJsChain<number>;\n\n		/**\n		 * Compute the matrix exponential, expm(A) = e^A. The matrix must be\n		 * square. Not to be confused with exp(a), which performs element-wise\n		 * exponentiation. The exponential is calculated using the Padé\n		 * approximant with scaling and squaring; see “Nineteen Dubious Ways to\n		 * Compute the Exponential of a Matrix,” by Moler and Van Loan.\n		 */\n\n		expm(this: MathJsChain<Matrix>): MathJsChain<Matrix>;\n\n		/**\n		 * Performs a real Schur decomposition of the real matrix A = UTU' where U is orthogonal\n		 * and T is upper quasi-triangular.\n		 * https://en.wikipedia.org/wiki/Schur_decomposition\n		 * @returns Object containing both matrix U and T of the Schur Decomposition A=UTU'\n		 */\n		schur(this: MathJsChain<MathCollection>): SchurDecomposition;\n\n		/**\n		 * Solves the Continuous-time Lyapunov equation AP+PA'=Q for P, where Q is a positive semidefinite\n		 * matrix.\n		 * https://en.wikipedia.org/wiki/Lyapunov_equation\n		 * @param Q  Matrix Q\n		 * @returns  Matrix P solution to the Continuous-time Lyapunov equation AP+PA'=Q\n		 */\n		lyap(\n			this: MathJsChain<MathCollection>,\n			Q: MathCollection\n		): MathJsChain<MathCollection>;\n\n		/**\n		 * Create a 2-dimensional identity matrix with size m x n or n x n. The\n		 * matrix has ones on the diagonal and zeros elsewhere.\n		 * @param format The Matrix storage format\n		 */\n		identity(\n			this: MathJsChain<number | number[] | MathCollection>,\n			format?: string\n		): MathJsChain<MathCollection | number>;\n\n		/**\n		 * @param n The y dimension for the matrix\n		 * @param format The Matrix storage format\n		 */\n		identity(\n			this: MathJsChain<number>,\n			n: number,\n			format?: string\n		): MathJsChain<MathCollection | number>;\n\n		/**\n		 * Filter the items in an array or one dimensional matrix.\n		 */\n		filter(\n			this: MathJsChain<MathCollection | string[]>,\n			test:\n				| ((\n				// eslint-disable-next-line @typescript-eslint/no-explicit-any\n				value: any,\n				// eslint-disable-next-line @typescript-eslint/no-explicit-any\n				index: any,\n				matrix: MathCollection | string[]\n			) => boolean)\n				| RegExp\n		): MathJsChain<MathCollection>;\n\n		/**\n		 * Flatten a multi dimensional matrix into a single dimensional matrix.\n		 */\n\n		flatten<T extends MathCollection>(x: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Iterate over all elements of a matrix/array, and executes the given\n		 * callback function.\n		 */\n		forEach<T extends MathCollection>(\n			this: MathJsChain<T>,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			callback: (value: any, index: any, matrix: T) => void\n		): void;\n\n		/**\n		 * Calculate the inverse of a square matrix.\n		 */\n\n		inv<T extends number | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Calculate the Kronecker product of two matrices or vectors\n		 * @param y Second vector\n		 */\n		kron(\n			this: MathJsChain<MathCollection>,\n			y: MathCollection\n		): MathJsChain<Matrix>;\n\n		/**\n		 * Iterate over all elements of a matrix/array, and executes the given\n		 * callback function.\n		 * @param callback The callback function is invoked with three\n		 * parameters: the value of the element, the index of the element, and\n		 * the Matrix/array being traversed.\n		 */\n		map<T extends MathCollection>(\n			this: MathJsChain<T>,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			callback: (value: any, index: any, matrix: T) => MathType | string\n		): MathJsChain<T>;\n\n		/**\n		 * Create a matrix filled with ones. The created matrix can have one or\n		 * multiple dimensions.\n		 * @param format The matrix storage format\n		 */\n		ones(\n			this: MathJsChain<number | number[] | BigNumber | BigNumber[]>,\n			format?: string\n		): MathJsChain<MathCollection>;\n\n		/**\n		 * Partition-based selection of an array or 1D matrix. Will find the kth\n		 * smallest value, and mutates the input array. Uses Quickselect.\n		 * @param k The kth smallest value to be retrieved; zero-based index\n		 * @param compare  An optional comparator function. The function is\n		 * called as compare(a, b), and must return 1 when a > b, -1 when a < b,\n		 * and 0 when a == b. Default value: 'asc'.\n		 */\n		partitionSelect(\n			this: MathJsChain<MathCollection>,\n			k: number,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			compare?: 'asc' | 'desc' | ((a: any, b: any) => number)\n		): MathJsChain<MathCollection>;\n\n		/**\n		 * Create an array from a range. By default, the range end is excluded.\n		 * This can be customized by providing an extra parameter includeEnd.\n		 * @param end End of the range, excluded by default, included when\n		 * parameter includeEnd=true\n		 * @param step Step size. Default value is 1.\n		 * @param includeEnd: Option to specify whether to include the end or\n		 * not. False by default\n		 */\n		range(this: MathJsChain<string>, includeEnd?: boolean): MathJsChain<Matrix>;\n		range(\n			this: MathJsChain<number | BigNumber>,\n			end: number | BigNumber,\n			includeEnd?: boolean\n		): MathJsChain<Matrix>;\n		range(\n			this: MathJsChain<number | BigNumber | Unit>,\n			end: number | BigNumber | Unit,\n			step: number | BigNumber | Unit,\n			includeEnd?: boolean\n		): MathJsChain<Matrix>;\n\n		/**\n		 * Reshape a multi dimensional array to fit the specified dimensions\n		 * @param sizes One dimensional array with integral sizes for each\n		 * dimension\n		 */\n		reshape<T extends MathCollection>(\n			this: MathJsChain<T>,\n			sizes: number[]\n		): MathJsChain<T>;\n\n		/**\n		 * Resize a matrix\n		 * @param size One dimensional array with numbers\n		 * @param defaultValue Zero by default, except in case of a string, in\n		 * that case defaultValue = ' ' Default value: 0.\n		 */\n		resize<T extends MathCollection>(\n			this: MathJsChain<T>,\n			size: MathCollection,\n			defaultValue?: number | string\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the size of a matrix or scalar.\n		 */\n		size(\n			this: MathJsChain<\n				boolean | number | Complex | Unit | string | MathCollection\n			>\n		): MathJsChain<MathCollection>;\n\n		/**\n		 * Sort the items in a matrix\n		 * @param compare An optional _comparator function or name. The function\n		 * is called as compare(a, b), and must return 1 when a > b, -1 when a <\n		 * b, and 0 when a == b. Default value: ‘asc’\n		 */\n		sort<T extends MathCollection>(\n			this: MathJsChain<T>,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			compare: ((a: any, b: any) => number) | 'asc' | 'desc' | 'natural'\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the principal square root of a square matrix. The principal\n		 * square root matrix X of another matrix A is such that X * X = A.\n		 */\n\n		sqrtm<T extends MathCollection>(A: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Squeeze a matrix, remove inner and outer singleton dimensions from a\n		 * matrix.\n		 */\n\n		squeeze<T extends MathCollection>(x: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Get or set a subset of a matrix or string.\n		 * @param index For each dimension, an index or list of indices to get or set\n		 * @param replacement An array, matrix, or scalar. If provided, the\n		 * subset is replaced with replacement. If not provided, the subset is\n		 * returned\n		 * @param defaultValue Default value, filled in on new entries when the\n		 * matrix is resized. If not provided, math.matrix elements will be left\n		 * undefined. Default value: undefined.\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		subset<T extends MathCollection | string>(\n			this: MathJsChain<T>,\n			index: Index,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			replacement?: any,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			defaultValue?: any\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the trace of a matrix: the sum of the elements on the main\n		 * diagonal of a square matrix.\n		 */\n\n		trace(this: MathJsChain<MathCollection>): MathJsChain<number>;\n\n		/**\n		 * Transpose a matrix. All values of the matrix are reflected over its\n		 * main diagonal. Only two dimensional matrices are supported.\n		 */\n\n		transpose<T extends MathCollection>(x: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Create a matrix filled with zeros. The created matrix can have one or\n		 * multiple dimensions.\n		 * @param format The matrix storage format\n		 * @returns A matrix filled with zeros\n		 */\n		zeros(\n			this: MathJsChain<number | number[] | BigNumber | BigNumber[]>,\n			format?: string\n		): MathJsChain<MathCollection>;\n\n		/*************************************************************************\n		 * Probability functions\n		 ************************************************************************/\n\n		/**\n		 * Compute the number of ways of picking k unordered outcomes from n\n		 * possibilities. Combinations only takes integer arguments. The\n		 * following condition must be enforced: k <= n.\n		 * @param k Number of objects in the subset\n		 */\n		combinations<T extends number | BigNumber>(\n			n: MathJsChain<T>,\n			k: number | BigNumber\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Compute the factorial of a value Factorial only supports an integer\n		 * value as argument. For matrices, the function is evaluated element\n		 * wise.\n		 */\n\n		factorial<T extends number | BigNumber | MathCollection>(\n			n: MathJsChain<T>\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Compute the gamma function of a value using Lanczos approximation for\n		 * small values, and an extended Stirling approximation for large\n		 * values. For matrices, the function is evaluated element wise.\n		 */\n\n		gamma<T extends number | BigNumber | Complex | MathCollection>(\n			n: MathJsChain<T>\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Calculate the Kullback-Leibler (KL) divergence between two\n		 * distributions\n		 * @param p Second vector\n		 */\n		kldivergence(\n			this: MathJsChain<MathCollection>,\n			p: MathCollection\n		): MathJsChain<number>;\n\n		/**\n		 * Multinomial Coefficients compute the number of ways of picking a1,\n		 * a2, ..., ai unordered outcomes from n possibilities. multinomial\n		 * takes one array of integers as an argument. The following condition\n		 * must be enforced: every ai <= 0\n		 */\n\n		multinomial<T extends number | BigNumber>(\n			a: MathJsChain<T[]>\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Compute the number of ways of obtaining an ordered subset of k\n		 * elements from a set of n elements. Permutations only takes integer\n		 * arguments. The following condition must be enforced: k <= n.\n		 * @param k The number of objects in the subset\n		 */\n		permutations<T extends number | BigNumber>(\n			n: MathJsChain<T>,\n			k?: number | BigNumber\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Random pick a value from a one dimensional array. Array element is\n		 * picked using a random function with uniform distribution.\n		 * @param number An int or float\n		 * @param weights An array of ints or floats\n		 */\n		pickRandom<T>(this: MathJsChain<T[]>): MathJsChain<T>;\n		pickRandom<T>(this: MathJsChain<T[]>, number: number): MathJsChain<T[]>;\n		pickRandom<T>(\n			this: MathJsChain<T[]>,\n			number: number,\n			weights: number[]\n		): MathJsChain<T[]>;\n\n		/**\n		 * Return a random number larger or equal to min and smaller than max\n		 * using a uniform distribution.\n		 * @param min Minimum boundary for the random value, included\n		 * @param max Maximum boundary for the random value, excluded\n		 */\n		random(this: MathJsChain<number>, max?: number): MathJsChain<number>;\n\n		// tslint:disable-next-line unified-signatures\n		random<T extends MathCollection>(\n			this: MathJsChain<T>,\n			min?: number,\n			max?: number\n		): MathJsChain<T>;\n\n		/**\n		 * Return a random integer number larger or equal to min and smaller\n		 * than max using a uniform distribution.\n		 * @param min Minimum boundary for the random value, included\n		 * @param max Maximum boundary for the random value, excluded\n		 */\n		randomInt<T extends MathCollection>(\n			this: MathJsChain<T>,\n			max?: number\n		): MathJsChain<T>;\n		randomInt<T extends MathCollection>(\n			this: MathJsChain<T>,\n			max?: number\n		): MathJsChain<T>;\n		// tslint:disable-next-line unified-signatures\n		randomInt<T extends MathCollection>(\n			this: MathJsChain<T>,\n			min: number,\n			max: number\n		): MathJsChain<T>;\n\n		/*************************************************************************\n		 * Relational functions\n		 ************************************************************************/\n\n		/**\n		 * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x\n		 * == y. x and y are considered equal when the relative difference\n		 * between x and y is smaller than the configured relTol and absTol. The function\n		 * cannot be used to compare values smaller than approximately 2.22e-16.\n		 * For matrices, the function is evaluated element wise.\n		 * @param y Second value to compare\n		 */\n		compare(\n			this: MathJsChain<MathType | string>,\n			y: MathType | string\n		): MathJsChain<number | BigNumber | Fraction | MathCollection>;\n\n		/**\n		 * Compare two values of any type in a deterministic, natural way. For\n		 * numeric values, the function works the same as math.compare. For\n		 * types of values that can’t be compared mathematically, the function\n		 * compares in a natural way.\n		 * @param y Second value to compare\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		compareNatural(this: MathJsChain<any>, y: any): MathJsChain<number>;\n\n		/**\n		 * Compare two strings lexically. Comparison is case sensitive. Returns\n		 * 1 when x > y, -1 when x < y, and 0 when x == y. For matrices, the\n		 * function is evaluated element wise.\n		 * @param y Second string to compare\n		 */\n		compareText(\n			this: MathJsChain<string | MathCollection>,\n			y: string | MathCollection\n		): MathJsChain<number | MathCollection>;\n\n		/**\n		 * Test element wise whether two matrices are equal. The function\n		 * accepts both matrices and scalar values.\n		 * @param y Second amtrix to compare\n		 */\n		deepEqual(this: MathJsChain<MathType>, y: MathType): MathJsChain<MathType>;\n\n		/**\n		 * Test whether two values are equal.\n		 *\n		 * The function tests whether the relative difference between x and y is\n		 * smaller than the configured relTol and absTol. The function cannot be used to\n		 * compare values smaller than approximately 2.22e-16. For matrices, the\n		 * function is evaluated element wise. In case of complex numbers, x.re\n		 * must equal y.re, and x.im must equal y.im. Values null and undefined\n		 * are compared strictly, thus null is only equal to null and nothing\n		 * else, and undefined is only equal to undefined and nothing else.\n		 * @param y Second value to compare\n		 */\n		equal(\n			this: MathJsChain<MathType | string>,\n			y: MathType | string\n		): MathJsChain<boolean | MathCollection>;\n\n		/**\n		 * Check equality of two strings. Comparison is case sensitive. For\n		 * matrices, the function is evaluated element wise.\n		 * @param y Second string to compare\n		 */\n		equalText(\n			this: MathJsChain<string | MathCollection>,\n			y: string | MathCollection\n		): MathJsChain<number | MathCollection>;\n\n		/**\n		 * Test whether value x is larger than y. The function returns true when\n		 * x is larger than y and the relative difference between x and y is\n		 * larger than the configured relTol and absTol. The function cannot be used to\n		 * compare values smaller than approximately 2.22e-16. For matrices, the\n		 * function is evaluated element wise.\n		 * @param y Second value to compare\n		 */\n		larger(\n			this: MathJsChain<MathType | string>,\n			y: MathType | string\n		): MathJsChain<boolean | MathCollection>;\n\n		/**\n		 * Test whether value x is larger or equal to y. The function returns\n		 * true when x is larger than y or the relative difference between x and\n		 * y is smaller than the configured relTol and absTol. The function cannot be used\n		 * to compare values smaller than approximately 2.22e-16. For matrices,\n		 * the function is evaluated element wise.\n		 * @param y Second value to vcompare\n		 */\n		largerEq(\n			this: MathJsChain<MathType | string>,\n			y: MathType | string\n		): MathJsChain<boolean | MathCollection>;\n\n		/**\n		 * Test whether value x is smaller than y. The function returns true\n		 * when x is smaller than y and the relative difference between x and y\n		 * is smaller than the configured relTol and absTol. The function cannot be used\n		 * to compare values smaller than approximately 2.22e-16. For matrices,\n		 * the function is evaluated element wise.\n		 * @param y Second value to vcompare\n		 */\n		smaller(\n			this: MathJsChain<MathType | string>,\n			y: MathType | string\n		): MathJsChain<boolean | MathCollection>;\n\n		/**\n		 * Test whether value x is smaller or equal to y. The function returns\n		 * true when x is smaller than y or the relative difference between x\n		 * and y is smaller than the configured relTol and absTol. The function cannot be\n		 * used to compare values smaller than approximately 2.22e-16. For\n		 * matrices, the function is evaluated element wise.\n		 * @param y Second value to compare\n		 */\n		smallerEq(\n			this: MathJsChain<MathType | string>,\n			y: MathType | string\n		): MathJsChain<boolean | MathCollection>;\n\n		/**\n		 * Determines if two expressions are symbolically equal, i.e. one is the\n		 * result of valid algebraic manipulations on the other.\n		 * @param {Node|string} expr1 The first expression to compare\n		 * @param {Node|string} expr2 The second expression to compare\n		 * @param {Object} [options] Optional option object, passed to simplify\n		 * @returns {boolean} Returns true if a valid manipulation making the\n		 * expressions equal is found.\n		 */\n		symbolicEqual(\n			this: MathJsChain<MathNode | string>,\n			expr2: MathNode | string,\n			options?: SimplifyOptions\n		): boolean;\n\n		/**\n		 * Test whether two values are unequal. The function tests whether the\n		 * relative difference between x and y is larger than the configured\n		 * relTol and absTol. The function cannot be used to compare values smaller than\n		 * approximately 2.22e-16. For matrices, the function is evaluated\n		 * element wise. In case of complex numbers, x.re must unequal y.re, or\n		 * x.im must unequal y.im. Values null and undefined are compared\n		 * strictly, thus null is unequal with everything except null, and\n		 * undefined is unequal with everything except undefined.\n		 * @param y Second value to vcompare\n		 */\n		unequal(\n			this: MathJsChain<MathType | string>,\n			y: MathType | string\n		): MathJsChain<boolean | MathCollection>;\n\n		/*************************************************************************\n		 * Set functions\n		 ************************************************************************/\n\n		/**\n		 * Create the cartesian product of two (multi)sets. Multi-dimension\n		 * arrays will be converted to single-dimension arrays and the values\n		 * will be sorted in ascending order before the operation.\n		 * @param a2 A (multi)set\n		 */\n		setCartesian<T extends MathCollection>(\n			this: MathJsChain<T>,\n			a2: MathCollection\n		): MathJsChain<T>;\n\n		/**\n		 * Create the difference of two (multi)sets: every element of set1, that\n		 * is not the element of set2. Multi-dimension arrays will be converted\n		 * to single-dimension arrays before the operation\n		 * @param a2 A (multi)set\n		 */\n		setDifference<T extends MathCollection>(\n			this: MathJsChain<T>,\n			a2: MathCollection\n		): MathJsChain<T>;\n\n		/**\n		 * Collect the distinct elements of a multiset. A multi-dimension array\n		 * will be converted to a single-dimension array before the operation.\n		 */\n\n		setDistinct<T extends MathCollection>(a: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Create the intersection of two (multi)sets. Multi-dimension arrays\n		 * will be converted to single-dimension arrays before the operation.\n		 * @param a2 A (multi)set\n		 */\n		setIntersect<T extends MathCollection>(\n			this: MathJsChain<T>,\n			a2: MathCollection\n		): MathJsChain<T>;\n\n		/**\n		 * Check whether a (multi)set is a subset of another (multi)set. (Every\n		 * element of set1 is the element of set2.) Multi-dimension arrays will\n		 * be converted to single-dimension arrays before the operation.\n		 * @param a2 A (multi)set\n		 */\n		setIsSubset(\n			this: MathJsChain<MathCollection>,\n			a2: MathCollection\n		): MathJsChain<boolean>;\n\n		/**\n		 * Count the multiplicity of an element in a multiset. A multi-dimension\n		 * array will be converted to a single-dimension array before the\n		 * operation.\n		 * @param a A multiset\n		 */\n		setMultiplicity(\n			e: MathJsChain<MathNumericType>,\n			a: MathCollection\n		): MathJsChain<number>;\n\n		/**\n		 * Create the powerset of a (multi)set. (The powerset contains very\n		 * possible subsets of a (multi)set.) A multi-dimension array will be\n		 * converted to a single-dimension array before the operation.\n		 */\n\n		setPowerset<T extends MathCollection>(a: MathJsChain<T>): MathJsChain<T>;\n\n		/**\n		 * Count the number of elements of a (multi)set. When a second parameter\n		 * is ‘true’, count only the unique values. A multi-dimension array will\n		 * be converted to a single-dimension array before the operation.\n		 */\n\n		setSize(this: MathJsChain<MathCollection>): MathJsChain<number>;\n\n		/**\n		 * Create the symmetric difference of two (multi)sets. Multi-dimension\n		 * arrays will be converted to single-dimension arrays before the\n		 * operation.\n		 * @param a2 A (multi)set\n		 */\n		setSymDifference<T extends MathCollection>(\n			this: MathJsChain<T>,\n			a2: MathCollection\n		): MathJsChain<T>;\n\n		/**\n		 * Create the union of two (multi)sets. Multi-dimension arrays will be\n		 * converted to single-dimension arrays before the operation.\n		 * @param a2 A (multi)set\n		 */\n		setUnion<T extends MathCollection>(\n			this: MathJsChain<T>,\n			a2: MathCollection\n		): MathJsChain<T>;\n\n		/*************************************************************************\n		 * Signal functions\n		 ************************************************************************/\n		/**\n		 * Compute the transfer function of a zero-pole-gain model.\n		 */\n		zpk2tf<T extends MathCollection>(\n			this: MathJsChain<T>, // chained variable will be used as z\n			p: T,\n			k?: number\n		): MathJsChain<T>;\n\n		/**\n		 * Calculates the frequency response of a filter given its numerator and denominator coefficients.\n		 */\n		freqz<T extends number | MathArray | MathArray[]>(\n			this: MathJsChain<T>,\n			a: T,\n			w?: T | number\n		): MathJsChain<{ w: T; h: T }>;\n\n		/*************************************************************************\n		 * Special functions\n		 ************************************************************************/\n\n		/**\n		 * Compute the erf function of a value using a rational Chebyshev\n		 * approximations for different intervals of x.\n		 */\n		erf<T extends number | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<NoLiteralType<T>>;\n\n		/**\n		 * Compute the Riemann Zeta function of a value using an infinite series\n		 * and Riemann's Functional equation.\n		 */\n		zeta<T extends number | Complex | BigNumber>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/*************************************************************************\n		 * Statistics functions\n		 ************************************************************************/\n\n		/**\n		 * Compute the median absolute deviation of a matrix or a list with\n		 * values. The median absolute deviation is defined as the median of the\n		 * absolute deviations from the median.\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		mad(this: MathJsChain<MathCollection>): MathJsChain<any>;\n\n		/**\n		 * Compute the maximum value of a matrix or a list with values. In case\n		 * of a multi dimensional array, the maximum of the flattened array will\n		 * be calculated. When dim is provided, the maximum over the selected\n		 * dimension will be calculated. Parameter dim is zero-based.\n		 * @param dim The maximum over the selected dimension\n		 */\n\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		max(this: MathJsChain<MathType[]>, dim?: number): MathJsChain<any>;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		max(this: MathJsChain<MathCollection>, dim?: number): MathJsChain<any>;\n\n		/**\n		 * Compute the mean value of matrix or a list with values. In case of a\n		 * multi dimensional array, the mean of the flattened array will be\n		 * calculated. When dim is provided, the maximum over the selected\n		 * dimension will be calculated. Parameter dim is zero-based.\n		 * @param dim The mean over the selected dimension\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		mean(this: MathJsChain<MathType[]>, dim?: number): MathJsChain<any>;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		mean(this: MathJsChain<MathCollection>, dim?: number): MathJsChain<any>;\n\n		/**\n		 * Compute the median of a matrix or a list with values. The values are\n		 * sorted and the middle value is returned. In case of an even number of\n		 * values, the average of the two middle values is returned. Supported\n		 * types of values are: Number, BigNumber, Unit In case of a (multi\n		 * dimensional) array or matrix, the median of all elements will be\n		 * calculated.\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		median(this: MathJsChain<MathType[]>, dim?: number): MathJsChain<any>;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		median(this: MathJsChain<MathCollection>, dim?: number): MathJsChain<any>;\n\n		/**\n		 * Compute the minimum value of a matrix or a list of values. In case of\n		 * a multi dimensional array, the minimum of the flattened array will be\n		 * calculated. When dim is provided, the minimum over the selected\n		 * dimension will be calculated. Parameter dim is zero-based.\n		 * @param dim The minimum over the selected dimension\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		min(this: MathJsChain<MathType[]>): MathJsChain<MathType[]>;\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		min(this: MathJsChain<MathCollection>, dim?: number): MathJsChain<any>;\n\n		/**\n		 * Computes the mode of a set of numbers or a list with values(numbers\n		 * or characters). If there are more than one modes, it returns a list\n		 * of those values.\n		 */\n\n		mode(this: MathJsChain<MathType[]>): MathJsChain<MathType[]>;\n\n		/**\n		 * Compute the product of a matrix or a list with values. In case of a\n		 * (multi dimensional) array or matrix, the sum of all elements will be\n		 * calculated.\n		 */\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		prod(this: MathJsChain<MathType[]>): MathJsChain<any>;\n\n		/**\n		 * Compute the prob order quantile of a matrix or a list with values.\n		 * The sequence is sorted and the middle value is returned. Supported\n		 * types of sequence values are: Number, BigNumber, Unit Supported types\n		 * of probability are: Number, BigNumber In case of a (multi\n		 * dimensional) array or matrix, the prob order quantile of all elements\n		 * will be calculated.\n		 * @param probOrN prob is the order of the quantile, while N is the\n		 * amount of evenly distributed steps of probabilities; only one of\n		 * these options can be provided\n		 * @param sorted =false is data sorted in ascending order\n		 */\n		quantileSeq(\n			A: MathJsChain<MathCollection>,\n			prob: number | BigNumber | MathArray,\n			sorted?: boolean\n		): MathJsChain<number | BigNumber | Unit | MathArray>;\n\n		/**\n		 * Compute the standard deviation of a matrix or a list with values. The\n		 * standard deviations is defined as the square root of the variance:\n		 * std(A) = sqrt(variance(A)). In case of a (multi dimensional) array or\n		 * matrix, the standard deviation over all elements will be calculated.\n		 * Optionally, the type of normalization can be specified as second\n		 * parameter. The parameter normalization can be one of the following\n		 * values: 'unbiased' (default) The sum of squared errors is divided by\n		 * (n - 1) 'uncorrected' The sum of squared errors is divided by n\n		 * 'biased' The sum of squared errors is divided by (n + 1)\n		 * @param dim A dimension to compute standard deviation.\n		 * @param normalization Determines how to normalize the variance. Choose\n		 * ‘unbiased’ (default), ‘uncorrected’, or ‘biased’. Default value:\n		 * ‘unbiased’.\n		 * @returns The standard deviation\n		 */\n		std(\n			this: MathJsChain<number[]>,\n			dim?: number,\n			normalization?: 'unbiased' | 'uncorrected' | 'biased'\n		): MathJsChain<number>;\n\n		/**\n		 * Compute the standard deviation of a matrix or a list with values. The\n		 * standard deviations is defined as the square root of the variance:\n		 * std(A) = sqrt(variance(A)). In case of a (multi dimensional) array or\n		 * matrix, the standard deviation over all elements will be calculated.\n		 * Optionally, the type of normalization can be specified as second\n		 * parameter. The parameter normalization can be one of the following\n		 * values: 'unbiased' (default) The sum of squared errors is divided by\n		 * (n - 1) 'uncorrected' The sum of squared errors is divided by n\n		 * 'biased' The sum of squared errors is divided by (n + 1)\n		 * @param normalization Determines how to normalize the variance. Choose\n		 * ‘unbiased’ (default), ‘uncorrected’, or ‘biased’. Default value:\n		 * ‘unbiased’.\n		 * @returns The standard deviation\n		 */\n		std(\n			this: MathJsChain<MathCollection>,\n			dimension?: number,\n			normalization?: 'unbiased' | 'uncorrected' | 'biased'\n		): MathJsChain<number[]>;\n\n		/**\n		 * Compute the sum of a matrix or a list with values. In case of a\n		 * (multi dimensional) array or matrix, the sum of all elements will be\n		 * calculated.\n		 */\n		std(\n			this: MathJsChain<MathCollection>,\n			normalization: 'unbiased' | 'uncorrected' | 'biased'\n		): MathJsChain<number>;\n\n		/**\n		 * Compute the variance of a matrix or a list with values. In case of a\n		 * (multi dimensional) array or matrix, the variance over all elements\n		 * will be calculated. Optionally, the type of normalization can be\n		 * specified as second parameter. The parameter normalization can be one\n		 * of the following values: 'unbiased' (default) The sum of squared\n		 * errors is divided by (n - 1) 'uncorrected' The sum of squared errors\n		 * is divided by n 'biased' The sum of squared errors is divided by (n +\n		 * 1) Note that older browser may not like the variable name var. In\n		 * that case, the function can be called as math['var'](...) instead of\n		 * math.variance(...).\n		 * @param dim a dimension to compute variance.\n		 * @param normalization normalization Determines how to normalize the\n		 * variance. Choose ‘unbiased’ (default), ‘uncorrected’, or ‘biased’.\n		 * Default value: ‘unbiased’.\n		 * @returns The variance\n		 */\n		variance(\n			this: MathJsChain<Array<Array<number | BigNumber | Fraction>>>\n		): MathJsChain<number>;\n\n		/**\n		 * Compute the variance of a matrix or a list with values. In case of a\n		 * (multi dimensional) array or matrix, the variance over all elements\n		 * will be calculated. Optionally, the type of normalization can be\n		 * specified as second parameter. The parameter normalization can be one\n		 * of the following values: 'unbiased' (default) The sum of squared\n		 * errors is divided by (n - 1) 'uncorrected' The sum of squared errors\n		 * is divided by n 'biased' The sum of squared errors is divided by (n +\n		 * 1) Note that older browser may not like the variable name var. In\n		 * that case, the function can be called as math['var'](...) instead of\n		 * math.variance(...).\n		 * @param normalization normalization Determines how to normalize the\n		 * variance. Choose ‘unbiased’ (default), ‘uncorrected’, or ‘biased’.\n		 * Default value: ‘unbiased’.\n		 * @returns The variance\n		 */\n		variance(\n			this: MathJsChain<MathCollection>,\n			dimension?: number,\n			normalization?: 'unbiased' | 'uncorrected' | 'biased'\n		): MathJsChain<number[]>;\n\n		variance(\n			this: MathJsChain<MathCollection>,\n			normalization: 'unbiased' | 'uncorrected' | 'biased'\n		): MathJsChain<number>;\n\n		/*************************************************************************\n		 * String functions\n		 ************************************************************************/\n\n		/**\n		 * Format a value of any type into a string.\n		 * @param options An object with formatting options.\n		 * @param callback A custom formatting function, invoked for all numeric\n		 * elements in value, for example all elements of a matrix, or the real\n		 * and imaginary parts of a complex number. This callback can be used to\n		 * override the built-in numeric notation with any type of formatting.\n		 * Function callback is called with value as parameter and must return a\n		 * string.\n		 * @see http://mathjs.org/docs/reference/functions/format.html\n		 */\n		format(\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			this: MathJsChain<any>,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			value: any,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			options?: FormatOptions | number | ((item: any) => string),\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			callback?: (value: any) => string\n		): MathJsChain<string>;\n\n		/**\n		 * Interpolate values into a string template.\n		 * @param values An object containing variables which will be filled in\n		 * in the template.\n		 * @param precision Number of digits to format numbers. If not provided,\n		 * the value will not be rounded.\n		 * @param options Formatting options, or the number of digits to format\n		 * numbers. See function math.format for a description of all options.\n		 */\n		print(\n			this: MathJsChain<string>,\n			// eslint-disable-next-line @typescript-eslint/no-explicit-any\n			values: any,\n			precision?: number,\n			options?: number | object\n		): MathJsChain<string>;\n\n		/*************************************************************************\n		 * Trigonometry functions\n		 ************************************************************************/\n\n		/**\n		 * Calculate the inverse cosine of a value. For matrices, the function\n		 * is evaluated element wise.\n		 */\n\n		acos<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the hyperbolic arccos of a value, defined as acosh(x) =\n		 * ln(sqrt(x^2 - 1) + x). For matrices, the function is evaluated\n		 * element wise.\n		 */\n\n		acosh<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the inverse cotangent of a value. For matrices, the\n		 * function is evaluated element wise.\n		 */\n\n		acot<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the inverse hyperbolic tangent of a value, defined as acoth(x)\n		 * = (ln((x+1)/x) + ln(x/(x-1))) / 2. For matrices, the function is\n		 * evaluated element wise.\n		 */\n\n		acoth<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the inverse cosecant of a value. For matrices, the function\n		 * is evaluated element wise.\n		 */\n\n		acsc<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the inverse hyperbolic cosecant of a value, defined as acsch(x)\n		 * = ln(1/x + sqrt(1/x^2 + 1)). For matrices, the function is evaluated\n		 * element wise.\n		 */\n\n		acsch<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the inverse secant of a value. For matrices, the function\n		 * is evaluated element wise.\n		 */\n\n		asec<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the hyperbolic arcsecant of a value, defined as asech(x) =\n		 * ln(sqrt(1/x^2 - 1) + 1/x). For matrices, the function is evaluated\n		 * element wise.\n		 */\n\n		asech<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the inverse sine of a value. For matrices, the function is\n		 * evaluated element wise.\n		 */\n\n		asin<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the hyperbolic arcsine of a value, defined as asinh(x) =\n		 * ln(x + sqrt(x^2 + 1)). For matrices, the function is evaluated\n		 * element wise.\n		 */\n\n		asinh<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the inverse tangent of a value. For matrices, the function\n		 * is evaluated element wise.\n		 */\n\n		atan<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the inverse tangent function with two arguments, y/x. By\n		 * providing two arguments, the right quadrant of the computed angle can\n		 * be determined. For matrices, the function is evaluated element wise.\n		 */\n\n		atan2<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>,\n			x: number\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the hyperbolic arctangent of a value, defined as atanh(x) =\n		 * ln((1 + x)/(1 - x)) / 2. For matrices, the function is evaluated\n		 * element wise.\n		 */\n\n		atanh<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the cosine of a value. For matrices, the function is\n		 * evaluated element wise.\n		 */\n\n		cos<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the hyperbolic cosine of a value, defined as cosh(x) = 1/2\n		 * * (exp(x) + exp(-x)). For matrices, the function is evaluated element\n		 * wise.\n		 */\n\n		cosh<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the cotangent of a value. cot(x) is defined as 1 / tan(x).\n		 * For matrices, the function is evaluated element wise.\n		 */\n\n		cot<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the hyperbolic cotangent of a value, defined as coth(x) = 1\n		 * / tanh(x). For matrices, the function is evaluated element wise.\n		 */\n\n		coth<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the cosecant of a value, defined as csc(x) = 1/sin(x). For\n		 * matrices, the function is evaluated element wise.\n		 */\n\n		csc<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the hyperbolic cosecant of a value, defined as csch(x) = 1\n		 * / sinh(x). For matrices, the function is evaluated element wise.\n		 */\n\n		csch<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the secant of a value, defined as sec(x) = 1/cos(x). For\n		 * matrices, the function is evaluated element wise.\n		 */\n\n		sec<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the hyperbolic secant of a value, defined as sech(x) = 1 /\n		 * cosh(x). For matrices, the function is evaluated element wise.\n		 */\n\n		sech<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the sine of a value. For matrices, the function is\n		 * evaluated element wise.\n		 */\n\n		sin<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the hyperbolic sine of a value, defined as sinh(x) = 1/2 *\n		 * (exp(x) - exp(-x)). For matrices, the function is evaluated element\n		 * wise.\n		 */\n\n		sinh<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the tangent of a value. tan(x) is equal to sin(x) / cos(x).\n		 * For matrices, the function is evaluated element wise.\n		 */\n\n		tan<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/**\n		 * Calculate the hyperbolic tangent of a value, defined as tanh(x) =\n		 * (exp(2 * x) - 1) / (exp(2 * x) + 1). For matrices, the function is\n		 * evaluated element wise.\n		 */\n\n		tanh<T extends number | BigNumber | Complex | MathCollection>(\n			this: MathJsChain<T>\n		): MathJsChain<T>;\n\n		/*************************************************************************\n		 * Unit functions\n		 ************************************************************************/\n\n		/**\n		 * Change the unit of a value. For matrices, the function is evaluated\n		 * element wise.\n		 * @param unit New unit. Can be a string like \"cm\" or a unit without\n		 * value.\n		 */\n		to(\n			this: MathJsChain<Unit | MathCollection>,\n			unit: Unit | string\n		): MathJsChain<Unit | MathCollection>;\n\n		/*************************************************************************\n		 * Utils functions\n		 ************************************************************************/\n\n		/**\n		 * Clone an object.\n		 */\n\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		clone<TValue>(this: MathJsChain<TValue>): MathJsChain<TValue>;\n\n		/**\n		 * Test whether a value is an integer number. The function supports\n		 * number, BigNumber, and Fraction. The function is evaluated\n		 * element-wise in case of Array or Matrix input.\n		 */\n\n		isInteger(\n			this: MathJsChain<number | BigNumber | bigint | Fraction | MathCollection>\n		): MathJsChain<boolean>;\n\n		/**\n		 * Test whether a value is NaN (not a number). The function supports\n		 * types number, BigNumber, Fraction, Unit and Complex. The function is\n		 * evaluated element-wise in case of Array or Matrix input.\n		 */\n\n		isNaN(\n			this: MathJsChain<number | BigNumber | Fraction | MathCollection | Unit>\n		): MathJsChain<boolean>;\n\n		/**\n		 * Test whether a value is negative: smaller than zero. The function\n		 * supports types number, BigNumber, Fraction, and Unit. The function is\n		 * evaluated element-wise in case of Array or Matrix input.\n		 */\n\n		isNegative(\n			this: MathJsChain<number | BigNumber | Fraction | MathCollection | Unit>\n		): MathJsChain<boolean>;\n\n		/**\n		 * Test whether a value is a numeric value. The function is evaluated\n		 * element-wise in case of Array or Matrix input.\n		 */\n\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		isNumeric(this: MathJsChain<any>): MathJsChain<boolean>;\n\n		/**\n		 * Test whether a value is positive: larger than zero. The function\n		 * supports types number, BigNumber, Fraction, and Unit. The function is\n		 * evaluated element-wise in case of Array or Matrix input.\n		 */\n\n		isPositive(\n			this: MathJsChain<\n				number | BigNumber | bigint | Fraction | MathCollection | Unit\n			>\n		): MathJsChain<boolean>;\n\n		/**\n		 * Test whether a value is prime: has no divisors other than itself and\n		 * one. The function supports type number, bignumber. The function is\n		 * evaluated element-wise in case of Array or Matrix input.\n		 */\n\n		isPrime(\n			this: MathJsChain<number | BigNumber | bigint | MathCollection>\n		): MathJsChain<boolean>;\n\n		/**\n		 * Test whether a value is zero. The function can check for zero for\n		 * types number, BigNumber, Fraction, Complex, and Unit. The function is\n		 * evaluated element-wise in case of Array or Matrix input.\n		 */\n\n		isZero(this: MathJsChain<MathType>): MathJsChain<boolean>;\n\n		/**\n		 * Determine the type of a variable.\n		 */\n\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		typeOf(this: MathJsChain<any>): MathJsChain<string>;\n	}\n\n	interface ImportOptions {\n		override?: boolean;\n		silent?: boolean;\n		wrap?: boolean;\n	}\n\n	interface ImportObject {\n		// eslint-disable-next-line @typescript-eslint/no-explicit-any\n		[key: string]: any;\n	}\n}\n";
const dts$9 = "// @ts-ignore\ndeclare var $options: O23.ErrorHandleOptions<any, any>;\n";
const dts$8 = "// @ts-ignore\ndeclare var $options: O23.ErrorHandleOptions<any, any, O23.CatchableError>;\n";
const dts$7 = "declare namespace O23 {\n	interface ErrorHandleOptions<In = any, InFragment = any, E extends Error = Error> {\n		$code: string;\n		$error: E;\n		$factor: InFragment;\n		// @ts-ignore\n		$request: PipelineStepData<In>;\n	}\n}\n";
const dts$6 = "// @ts-ignore\ndeclare var $options: O23.ErrorHandleOptions<any, any, O23.ExposedUncatchableError>;\n";
const dts$5 = "// @ts-ignore\ndeclare var $options: O23.ErrorHandleOptions<any, any, O23.UncatchableError>;\n";
const dts$4 = "declare var $factor: any;\n";
const dts$3 = "declare namespace O23 {\n	type Undefinable<T> = T | undefined;\n	type DateTime = string;\n\n	interface Config {\n		/** get string value of given name */\n		getString(name: string, defaultValue?: string): Undefinable<string>;\n		/** get boolean value of given name */\n		getBoolean(name: string, defaultValue?: boolean): Undefinable<boolean>;\n		/** get number value of given name */\n		getNumber(name: string, defaultValue?: number): Undefinable<number>;\n		/** get json object of given name */\n		getJson<R>(name: string, defaultValue?: R): Undefinable<R>;\n	}\n\n	interface Logger {\n		/** Write a 'log' level log.  */\n		log(message: any, ...optionalParams: any[]): void;\n		/** Write an 'error' level log.  */\n		error(message: any, ...optionalParams: any[]): void;\n		/** Write a 'warn' level log.  */\n		warn(message: any, ...optionalParams: any[]): void;\n		/** Write a 'debug' level log.  */\n		debug?(message: any, ...optionalParams: any[]): void;\n		/** Write a 'verbose' level log.  */\n		verbose?(message: any, ...optionalParams: any[]): void;\n	}\n\n	interface PipelineStepDateHelper {\n		/**\n		 * Get current datetime on configured format by CFG_FORMAT_DATETIME, default is 'YYYY-MM-DD HH:mm:ss'.\n		 */\n		now(): DateTime;\n		// @ts-ignore\n		dayjs(): dayjs.DayjsFn;\n	}\n\n	// @ts-ignore\n	type PipelineStepMathHelper = mathjs.MathJsInstance;\n\n	interface PipelineStepErrorOptions {\n		// exactly same as http status\n		status: number;\n		code: string;\n		reason: string;\n	}\n\n	interface CatchableError extends Error {\n		getCode(): string;\n	}\n\n	interface UncatchableError extends Error {\n		getCode(): string;\n	}\n\n	interface ExposedUncatchableError extends UncatchableError {\n		getStatus(): number;\n	}\n\n	// TODO need to import nodejs Buffer\n	type NodeJSBuffer = any;\n\n	interface PipelineStepFileOptions {\n		name?: string;\n		type?: string;\n		content: string | NodeJSBuffer;\n	}\n\n	interface PipelineStepFile {\n		$file: Symbol;\n		name?: string;\n		type?: string;\n		content: NodeJSBuffer;\n	}\n\n	interface PipelineStepHelpers {\n		$config: Config;\n		$logger: Logger;\n		$date: PipelineStepDateHelper;\n		$math: PipelineStepMathHelper;\n		$nano: (size?: number) => string;\n		$ascii: (size?: number) => string;\n		/** create an exposed uncatchable error*/\n		$error: (options: PipelineStepErrorOptions) => never;\n		$errorCodes: Readonly<Record<string, string>>;\n		$errors: {\n			catchable: (options: Omit<PipelineStepErrorOptions, 'status'>) => never;\n			isCatchable: (e: any) => e is CatchableError;\n			exposed: (options: PipelineStepErrorOptions) => never;\n			isExposed: (e: any) => e is ExposedUncatchableError;\n			uncatchable: (options: Omit<PipelineStepErrorOptions, 'status'>) => never;\n			isUncatchable: (e: any) => e is UncatchableError;\n		};\n		/** Create a file */\n		$file: (options: PipelineStepFileOptions) => PipelineStepFile;\n		/** Create a symbol. When this symbol is used as a return value in a pipeline, it will be marked by the system as not requiring any return. */\n		$clearContextData: () => Symbol;\n		/**\n		 * Check given value is empty or not.\n		 * undefined, null, empty array, empty array likes, empty string, empty Map, empty Set, object with no keys.\n		 */\n		isEmpty: (value: any) => boolean;\n		/** Opposite of isEmpty */\n		isNotEmpty: (value: any) => boolean;\n		/**\n		 * Check given value is blank or not.\n		 * undefined, null, blank string.\n		 */\n		isBlank: (value: any) => boolean;\n		/** Opposite of isNotBlank */\n		isNotBlank: (value: any) => boolean;\n		/**\n		 * Trim given value, only available for undefined, null and string, otherwise raise an UncatchableError.\n		 */\n		trim: (value: any) => string;\n	}\n}\n\ndeclare var $helpers: O23.PipelineStepHelpers;\ndeclare var $: O23.PipelineStepHelpers;\n\n";
const dts$2 = "declare namespace O23 {\n	type PipelineStepPayload = any;\n\n	interface PipelineStepContext {\n		traceId?: string;\n	}\n\n	interface PipelineStepData<C = PipelineStepPayload, CTX = PipelineStepContext> {\n		/** this is runtime context */\n		$context?: CTX;\n		content: C;\n	}\n}\n";
const dts$1 = "// @ts-ignore\ndeclare var $request: O23.PipelineStepData;\n";
const dts = "declare var $result: any;\n";
const DTS = {
  stepInterfaces: dts$2,
  stepFactor: dts$4,
  stepResult: dts,
  stepRequest: dts$1,
  stepHelpers: `${dts$g}
${dts$f}
${dts$a}
${dts$3}`,
  stepCatchableErrorHandle: `${dts$7}
${dts$8}`,
  stepUncatchableErrorHandle: `${dts$7}
${dts$5}`,
  stepExposedErrorHandle: `${dts$7}
${dts$6}`,
  stepAnyErrorHandle: `${dts$7}
${dts$9}`,
  httpResponse: dts$b,
  fetchEndpointUrl: dts$e,
  fetchResponse: dts$c,
  fetchErrorHandle: dts$d,
  typeormRunner: ""
};
const createTheme = (theme) => {
  const themeListener = new Compartment();
  const themeExtension = theme == null ? void 0 : theme();
  const changeableThemeExtension = themeExtension == null ? [] : [themeListener.of(themeExtension)];
  return {
    extension: changeableThemeExtension,
    listener: themeListener
  };
};
const useTheme = (options) => {
  const { theme, editor, listener } = options;
  const rootEventBus = useRootEventBus();
  reactExports.useEffect(() => {
    var _a;
    if (editor == null || listener == null || theme == null) {
      return;
    }
    const onThemeChanged = (newTheme) => {
      editor.dispatch({ effects: listener.reconfigure(theme(newTheme)) });
    };
    (_a = rootEventBus == null ? void 0 : rootEventBus.on) == null ? void 0 : _a.call(rootEventBus, RootEventTypes.THEME_CHANGED, onThemeChanged);
    return () => {
      var _a2;
      (_a2 = rootEventBus == null ? void 0 : rootEventBus.off) == null ? void 0 : _a2.call(rootEventBus, RootEventTypes.THEME_CHANGED, onThemeChanged);
    };
  }, [rootEventBus == null ? void 0 : rootEventBus.on, rootEventBus == null ? void 0 : rootEventBus.off, theme, editor, listener]);
};
const useInitCodeEditor = (options) => {
  const { state, setState, createCodeMirrorExtensions: createCodeMirrorExtensions2, decorator: { theme } = {} } = options;
  const ref = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (ref.current == null) {
      return;
    }
    const changeListener = new Compartment();
    const { extension: changeableThemeExtension, listener: themeListener } = createTheme(theme);
    const editor = new EditorView({
      state: EditorState.create({
        doc: "",
        extensions: [
          basicSetup,
          indentUnit.of("  "),
          keymap.of([indentWithTab]),
          lintGutter(),
          createCodeMirrorExtensions2(),
          changeListener.of(EditorView.updateListener.of(VUtils.noop)),
          ...changeableThemeExtension
        ]
      }),
      parent: ref.current
    });
    setState((state2) => ({ ...state2, editor, changeListener, themeListener }));
    return () => {
      editor.destroy();
    };
  }, [setState, createCodeMirrorExtensions2]);
  useTheme({ theme, editor: state.editor, listener: state.themeListener });
  return { ref };
};
const useInitCodeContent = (options) => {
  const { editor, code } = options;
  reactExports.useEffect(() => {
    if (editor == null) {
      return;
    }
    const doc = editor.state.doc;
    const text = doc.toString();
    if (text !== code) {
      editor.dispatch({ changes: { from: 0, to: doc.length, insert: code ?? "" } });
    }
  }, [editor, code]);
};
const useHandleCodeChange = (options) => {
  const { editor, changeListener, onChange, delay = 300 } = options;
  const { replace } = useThrottler();
  reactExports.useEffect(() => {
    if (editor == null) {
      return;
    }
    editor.dispatch({
      effects: changeListener.reconfigure(EditorView.updateListener.of((view) => {
        if (view.docChanged) {
          replace(async () => {
            await onChange(view.state.doc.toString());
          }, delay);
        }
      }))
    });
  }, [replace, editor, changeListener, onChange, delay]);
};
const EditorContainer = qe.div`
    display: block;
    position: relative;
    width: 100%;
    height: var(--height);
    min-height: var(--height);
    max-height: var(--height);
    border: ${PlaygroundCssVars.SNIPPET_BORDER};
    border-radius: ${PlaygroundCssVars.SNIPPET_BORDER_RADIUS};
    overflow: hidden;

    &[data-visible=false] {
        display: none;
    }

    > div.cm-editor {
        height: 100%;

        &.cm-focused {
            outline: none;
        }

        > div.cm-scroller {
            overflow-x: auto;
            overflow-y: scroll;

            &::-webkit-scrollbar {
                background-color: transparent;
                height: ${CssVars.SCROLL_HEIGHT};
                width: ${CssVars.SCROLL_WIDTH};
            }

            &::-webkit-scrollbar-track {
                background-color: ${CssVars.SCROLL_TRACK_COLOR};
                border-radius: ${CssVars.SCROLL_BORDER_RADIUS};
            }

            &::-webkit-scrollbar-thumb {
                background-color: ${CssVars.SCROLL_THUMB_COLOR};
                border-radius: ${CssVars.SCROLL_BORDER_RADIUS};
            }

            > div.cm-gutters {
                border-right: ${CssVars.BORDER};
            }

            > div.cm-content {
                > div.cm-line.cm-activeLine {
                    background-color: ${PlaygroundCssVars.CODE_MIRROR_ACTIVE_LINE_BACKGROUND_COLOR};
                }
            }
        }

        div.cm-line {
        }

        div.cm-panels.cm-panels-bottom {
            border-top: ${CssVars.BORDER};
            border-right: ${CssVars.BORDER};
        }

        div.cm-search.cm-panel {
            /** beautify search panel */
            display: grid;
            position: relative;
            grid-template-columns: auto auto 1fr auto auto auto;
            grid-column-gap: 8px;
            grid-template-rows: auto auto auto;
            grid-row-gap: 8px;
            background-color: ${PlaygroundCssVars.CODE_MIRROR_SEARCH_PANEL_BACKGROUND_COLOR};

            > * {
                margin: 0;

                &:first-child, &:nth-child(2), &:nth-child(3), &:nth-child(4) {
                    grid-row: 1;
                }

                &:nth-child(5), &:nth-child(6), &:nth-child(7) {
                    grid-row: 2;
                }

                &:nth-child(9), &:nth-child(10), &:nth-child(11), &:nth-child(12) {
                    grid-row: 3;
                }
            }

            > input {
                grid-column: span 3;
                color: ${CssVars.FONT_COLOR};
                border: ${CssVars.BORDER};
                border-radius: ${CssVars.BORDER_RADIUS};
            }

            > button {
                background-image: none;
                background-color: ${PlaygroundCssVars.CODE_MIRROR_SEARCH_PANEL_BUTTON_BACKGROUND_COLOR};
                color: ${CssVars.FONT_COLOR};
                border: ${CssVars.BORDER};
                border-radius: ${CssVars.BORDER_RADIUS};
                text-transform: capitalize;
                cursor: pointer;

                &:last-child {
                    padding: 0 8px;
                }
            }

            > label {
                display: flex;
                position: relative;
                align-items: center;
                color: ${CssVars.FONT_COLOR};
                text-transform: capitalize;
                justify-self: start;

                &:nth-child(7) {
                    grid-column: span 4;
                }

                > input {
                    margin: 0 4px 0 0;
                }
            }

            > br {
                display: none;
            }
        }

        div.cm-tooltip-autocomplete {
            > ul {
                &::-webkit-scrollbar {
                    background-color: transparent;
                    height: ${CssVars.SCROLL_HEIGHT};
                    width: ${CssVars.SCROLL_WIDTH};
                }

                &::-webkit-scrollbar-track {
                    background-color: ${CssVars.SCROLL_TRACK_COLOR};
                    border-radius: ${CssVars.SCROLL_BORDER_RADIUS};
                }

                &::-webkit-scrollbar-thumb {
                    background-color: ${CssVars.SCROLL_THUMB_COLOR};
                    border-radius: ${CssVars.SCROLL_BORDER_RADIUS};
                }
            }

            span.cm-completionLabel {
                font-weight: 600;
                margin-right: 16px;
            }
        }

        .cm-completionIcon-class:after {
            content: '𝐶'
        }

        .cm-completionIcon-interface :after {
            content: '𝑖'
        }

        .cm-completionIcon-variable:after {
            content: '𝑥'
        }

        .cm-completionIcon-constant:after {
            content: '𝑐'
        }

        .cm-completionIcon-type:after {
            content: '𝑡'
        }

        .cm-completionIcon-enum:after {
            content: '𝑒'
        }

        .cm-completionIcon-property:after {
            content: '𝑝'
        }

        .cm-completionIcon-keyword:after {
            content: '𝑘'
        }

        .cm-completionIcon-namespace:after {
            content: '𝑛'
        }
    }
`;
const JsEditorContainer = qe(EditorContainer).attrs(({ "data-height": height }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-js-editor",
    style: {
      "--height": utils$2.toCssSize(height ?? 300)
    }
  };
})``;
var JsEditorExtensionType;
(function(JsEditorExtensionType2) {
  JsEditorExtensionType2["NONE"] = "none";
  JsEditorExtensionType2["FROM_INPUT"] = "from-input";
  JsEditorExtensionType2["TO_OUTPUT"] = "to-output";
  JsEditorExtensionType2["CATCHABLE_ERROR_HANDLE"] = "catchable-error-handle";
  JsEditorExtensionType2["UNCATCHABLE_ERROR_HANDLE"] = "uncatchable-error-handle";
  JsEditorExtensionType2["EXPOSED_ERROR_HANDLE"] = "exposed-error-handle";
  JsEditorExtensionType2["ANY_ERROR_HANDLE"] = "any-error-handle";
  JsEditorExtensionType2["SNIPPET"] = "snippet";
  JsEditorExtensionType2["PARALLEL_CLONE_DATA"] = "parallel-clone-data";
  JsEditorExtensionType2["TYPEORM_SNIPPET"] = "typeorm-snippet";
  JsEditorExtensionType2["ROUTE_CHECK"] = "route-check";
  JsEditorExtensionType2["HTTP_URL_GENERATE"] = "http-url-generate";
  JsEditorExtensionType2["HTTP_REQUEST_HEADERS_GENERATE"] = "http-request-headers-generate";
  JsEditorExtensionType2["HTTP_REQUEST_BODY_GENERATE"] = "http-request-body-generate";
  JsEditorExtensionType2["HTTP_RESPONSE_GENERATE"] = "http-response-generate";
  JsEditorExtensionType2["HTTP_ERROR_HANDLE"] = "http-error-handle";
})(JsEditorExtensionType || (JsEditorExtensionType = {}));
const createCodeMirrorExtensions$1 = (options) => {
  return () => {
    return [
      javascript({ jsx: false, typescript: false }),
      ...createCodeMirrorTs562Es2022Extensions(options)
    ];
  };
};
const JsExtensionCreators = {};
const createExtensionByType = (extensionType = JsEditorExtensionType.NONE) => {
  let creator = JsExtensionCreators[extensionType];
  if (creator != null) {
    return creator;
  }
  creator = (() => {
    switch (extensionType) {
      case JsEditorExtensionType.FROM_INPUT:
      case JsEditorExtensionType.SNIPPET:
      case JsEditorExtensionType.PARALLEL_CLONE_DATA:
      case JsEditorExtensionType.ROUTE_CHECK:
      case JsEditorExtensionType.HTTP_REQUEST_HEADERS_GENERATE:
      case JsEditorExtensionType.HTTP_REQUEST_BODY_GENERATE:
        return createCodeMirrorExtensions$1({
          extend: () => [DTS.stepInterfaces, DTS.stepFactor, DTS.stepRequest, DTS.stepHelpers].join("\n"),
          diagnosticCodesToIgnore: [DiagnosticCodes.C1118, DiagnosticCodes.C1375]
        });
      case JsEditorExtensionType.TO_OUTPUT:
        return createCodeMirrorExtensions$1({
          extend: () => [DTS.stepInterfaces, DTS.stepResult, DTS.stepRequest, DTS.stepHelpers].join("\n"),
          diagnosticCodesToIgnore: [DiagnosticCodes.C1118, DiagnosticCodes.C1375]
        });
      case JsEditorExtensionType.CATCHABLE_ERROR_HANDLE:
        return createCodeMirrorExtensions$1({
          extend: () => [DTS.stepInterfaces, DTS.stepCatchableErrorHandle, DTS.stepHelpers].join("\n"),
          diagnosticCodesToIgnore: [DiagnosticCodes.C1118, DiagnosticCodes.C1375]
        });
      case JsEditorExtensionType.UNCATCHABLE_ERROR_HANDLE:
        return createCodeMirrorExtensions$1({
          extend: () => [DTS.stepInterfaces, DTS.stepUncatchableErrorHandle, DTS.stepHelpers].join("\n"),
          diagnosticCodesToIgnore: [DiagnosticCodes.C1118, DiagnosticCodes.C1375]
        });
      case JsEditorExtensionType.EXPOSED_ERROR_HANDLE:
        return createCodeMirrorExtensions$1({
          extend: () => [DTS.stepInterfaces, DTS.stepExposedErrorHandle, DTS.stepHelpers].join("\n"),
          diagnosticCodesToIgnore: [DiagnosticCodes.C1118, DiagnosticCodes.C1375]
        });
      case JsEditorExtensionType.ANY_ERROR_HANDLE:
        return createCodeMirrorExtensions$1({
          extend: () => [DTS.stepInterfaces, DTS.stepAnyErrorHandle, DTS.stepHelpers].join("\n"),
          diagnosticCodesToIgnore: [DiagnosticCodes.C1118, DiagnosticCodes.C1375]
        });
      case JsEditorExtensionType.TYPEORM_SNIPPET:
        return createCodeMirrorExtensions$1({
          extend: () => [DTS.typeormRunner, DTS.stepInterfaces, DTS.stepFactor, DTS.stepRequest, DTS.stepHelpers].join("\n"),
          diagnosticCodesToIgnore: [DiagnosticCodes.C1118, DiagnosticCodes.C1375]
        });
      case JsEditorExtensionType.HTTP_URL_GENERATE:
        return createCodeMirrorExtensions$1({
          extend: () => [DTS.fetchEndpointUrl, DTS.stepInterfaces, DTS.stepFactor, DTS.stepRequest, DTS.stepHelpers].join("\n"),
          diagnosticCodesToIgnore: [DiagnosticCodes.C1118, DiagnosticCodes.C1375]
        });
      case JsEditorExtensionType.HTTP_RESPONSE_GENERATE:
        return createCodeMirrorExtensions$1({
          extend: () => [DTS.httpResponse, DTS.fetchResponse, DTS.stepInterfaces, DTS.stepFactor, DTS.stepRequest, DTS.stepHelpers].join("\n"),
          diagnosticCodesToIgnore: [DiagnosticCodes.C1118, DiagnosticCodes.C1375]
        });
      case JsEditorExtensionType.HTTP_ERROR_HANDLE:
        return createCodeMirrorExtensions$1({
          extend: () => [DTS.httpResponse, DTS.stepInterfaces, DTS.fetchErrorHandle, DTS.stepHelpers].join("\n"),
          diagnosticCodesToIgnore: [DiagnosticCodes.C1118, DiagnosticCodes.C1375]
        });
      case JsEditorExtensionType.NONE:
      default:
        return createCodeMirrorExtensions$1();
    }
  })();
  JsExtensionCreators[extensionType] = creator;
  return creator;
};
const JsEditor = (props) => {
  const { visible = true, height, snippet, onChange, decorator, extensionType } = props;
  const [state, setState] = reactExports.useState({});
  const { ref } = useInitCodeEditor({
    state,
    setState,
    createCodeMirrorExtensions: createExtensionByType(extensionType),
    decorator
  });
  useInitCodeContent({ editor: state.editor, code: snippet });
  useHandleCodeChange({ ...state, onChange });
  return React.createElement(
    CodeEditorWrapper,
    { "data-visible": visible },
    React.createElement(JsEditorContainer, { "data-visible": visible, "data-height": height, ref })
  );
};
const SqlEditorContainer = qe(EditorContainer).attrs(({ "data-height": height }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-sql-editor",
    style: {
      "--height": utils$2.toCssSize(height ?? 300)
    }
  };
})``;
const createCodeMirrorExtensions = () => sql$1();
const SqlEditor = (props) => {
  const { visible = true, height, snippet, onChange, decorator } = props;
  const [state, setState] = reactExports.useState({});
  const { ref } = useInitCodeEditor({ state, setState, createCodeMirrorExtensions, decorator });
  useInitCodeContent({ editor: state.editor, code: snippet });
  useHandleCodeChange({ ...state, onChange });
  return React.createElement(
    CodeEditorWrapper,
    { "data-visible": visible },
    React.createElement(SqlEditorContainer, { "data-visible": visible, "data-height": height, ref })
  );
};
const createBoolEditor = (options) => {
  const { getValue, setValue, defaultAs = false } = options;
  return (props) => {
    const { model, onValueChanged } = props;
    const onValueChange = (value) => {
      if (value == null || value === false) {
        setValue(model, false);
      } else {
        setValue(model, true);
      }
      onValueChanged();
    };
    return React.createElement(UnwrappedCheckbox, { onValueChange, value: getValue(model) ?? defaultAs });
  };
};
const createStrEditor = (options) => {
  const { getValue, setValue, placeholder } = options;
  return (props) => {
    const { model, onValueChanged } = props;
    const onValueChange = (value) => {
      setValue(model, value);
      onValueChanged();
    };
    return React.createElement(UnwrappedInput, { onValueChange, value: getValue(model) ?? "", placeholder });
  };
};
const createSnippetEditor = (options) => {
  const { extensionType, getValue, setValue, height } = options;
  return (props) => {
    const { model, onValueChanged, decorator } = props;
    const onValueChange = async (snippet) => {
      setValue(model, snippet);
      onValueChanged(false);
    };
    return React.createElement(JsEditor, { snippet: getValue(model), onChange: onValueChange, height, extensionType, decorator });
  };
};
const createSelectableCodeEditor = (options) => {
  const { findFlag, saveFlag, findSnippet, saveSnippet, flagCandidates, isSnippetAvailable, height: editorHeight, editor: CodeEditor, ...rest } = options;
  return (props) => {
    const { model, onValueChanged, decorator } = props;
    const onValueChange = (value) => {
      saveFlag(model, value);
      onValueChanged();
    };
    const onSnippetChange = async (snippet2) => {
      saveSnippet(model, snippet2);
      onValueChanged(false);
    };
    const flag = findFlag(model);
    const snippet = findSnippet(model);
    return React.createElement(
      VerticalLinesEditor,
      null,
      React.createElement(UnwrappedDropdown, { value: flag, onValueChange, options: flagCandidates, clearable: false, filterable: false, style: CommonElementEditorStyles.dropdown }),
      React.createElement(CodeEditor, { snippet, onChange: onSnippetChange, visible: isSnippetAvailable(flag), height: editorHeight, ...rest, decorator })
    );
  };
};
const createSelectableSnippetEditor = (options) => {
  return createSelectableCodeEditor({ ...options, editor: JsEditor });
};
const createSelectableSqlEditor = (options) => {
  return createSelectableCodeEditor({ ...options, editor: SqlEditor });
};
const createDropdownOnAssistantEditor = (options) => {
  const { getValue, setValue, askOptions, disabled = () => false, visible = () => true } = options;
  return (props) => {
    const { model, onValueChanged, assistant } = props;
    const onValueChange = (value2) => {
      setValue(model, value2);
      onValueChanged();
    };
    const options2 = askOptions(assistant);
    const value = trim(getValue(model));
    if (value != null && options2.every(({ value: v }) => value !== v)) {
      options2.unshift({ value, label: React.createElement(NotAvailableDropdownOption, { label: value }) });
    }
    return React.createElement(UnwrappedDropdown, { onValueChange, value, optionSort: OptionItemSort.ASC, options: options2, clearable: false, disabled: disabled(model), visible: visible(model), style: CommonElementEditorStyles.dropdown });
  };
};
class OutgoingPortModel extends PortModel {
  constructor(type, name, alignment) {
    super({ type, name, alignment });
  }
  createLinkModel(extras) {
    return this.createOutgoingLinkModel(extras);
  }
  createOutgoingLinkModel(extras) {
    const link = this.createDefaultLinkModel(extras);
    link.setSourcePort(this);
    return link;
  }
  toLinkModelOptions(extras) {
    return extras == null ? void 0 : { extras };
  }
  createDefaultLinkModel(extras) {
    return new DefaultLinkModel(this.toLinkModelOptions(extras));
  }
}
const _NextStepPortModel = class _NextStepPortModel extends OutgoingPortModel {
  constructor() {
    super(_NextStepPortModel.TYPE, _NextStepPortModel.NAME, PortModelAlignment.BOTTOM);
  }
};
__publicField(_NextStepPortModel, "TYPE", "next-step-port");
__publicField(_NextStepPortModel, "NAME", "next-step");
let NextStepPortModel = _NextStepPortModel;
class NextStepPortFactory extends AbstractModelFactory {
  constructor() {
    super(NextStepPortModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use NextStepPortFactory#generateModel.");
  }
}
const NextStepPortContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-next-step-port" })`
    display: flex;
    position: absolute;
    left: calc(50% - ${PlaygroundCssVars.NODE_PORT_RADIUS});
    bottom: calc(-1 * ${PlaygroundCssVars.NODE_PORT_RADIUS});
    width: calc(${PlaygroundCssVars.NODE_PORT_RADIUS} * 2);
    height: ${PlaygroundCssVars.NODE_PORT_RADIUS};
    background-color: ${PlaygroundCssVars.NODE_NEXT_STEP_PORT_BACKGROUND_COLOR};
    border: ${PlaygroundCssVars.NODE_NEXT_STEP_PORT_BORDER};
    border-bottom-left-radius: ${PlaygroundCssVars.NODE_PORT_RADIUS};
    border-bottom-right-radius: ${PlaygroundCssVars.NODE_PORT_RADIUS};

    > div:first-child {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 0;
    }
`;
const NextStepPortWidget = (props) => {
  const { port, engine, ...rest } = props;
  return React.createElement(
    NextStepPortContainer,
    { ...rest },
    React.createElement(PortWidget, { port, engine })
  );
};
class IncomingPortModel extends PortModel {
  constructor(type, name, alignment) {
    super({ type, name, alignment });
  }
  createLinkModel() {
    return this.createIncomingLinkModel();
  }
  createIncomingLinkModel() {
    const link = this.createDefaultLinkModel();
    link.setTargetPort(this);
    return link;
  }
  createDefaultLinkModel() {
    return new DefaultLinkModel();
  }
}
const _PreviousStepPortModel = class _PreviousStepPortModel extends IncomingPortModel {
  constructor() {
    super(_PreviousStepPortModel.TYPE, _PreviousStepPortModel.NAME, PortModelAlignment.TOP);
  }
};
__publicField(_PreviousStepPortModel, "TYPE", "previous-step-port");
__publicField(_PreviousStepPortModel, "NAME", "previous-step");
let PreviousStepPortModel = _PreviousStepPortModel;
class PreviousStepPortFactory extends AbstractModelFactory {
  constructor() {
    super(PreviousStepPortModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use PreviousStepPortFactory#generateModel.");
  }
}
const PreviousStepPortContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-previous-step-port" })`
    display: flex;
    position: absolute;
    left: calc(50% - ${PlaygroundCssVars.NODE_PORT_RADIUS});
    top: calc(-1 * ${PlaygroundCssVars.NODE_PORT_RADIUS});
    width: calc(${PlaygroundCssVars.NODE_PORT_RADIUS} * 2);
    height: ${PlaygroundCssVars.NODE_PORT_RADIUS};
    background-color: ${PlaygroundCssVars.NODE_PREVIOUS_STEP_PORT_BACKGROUND_COLOR};
    border: ${PlaygroundCssVars.NODE_PREVIOUS_STEP_PORT_BORDER};
    border-top-left-radius: ${PlaygroundCssVars.NODE_PORT_RADIUS};
    border-top-right-radius: ${PlaygroundCssVars.NODE_PORT_RADIUS};

    > div:first-child {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 0;
    }
`;
const PreviousStepPortWidget = (props) => {
  const { port, engine } = props;
  return React.createElement(
    PreviousStepPortContainer,
    null,
    React.createElement(PortWidget, { port, engine })
  );
};
const computePortIconAndBadge = (props) => {
  const { required, defined, count, all, allAsBoolean = false, allAsGiven, caseTransform } = props;
  let icon;
  let badge = null;
  if (defined) {
    icon = React.createElement(PortChecked, null);
    if (count != null) {
      badge = React.createElement("span", { "data-role": "count", "data-case-transform": caseTransform }, count);
    } else if (all != null) {
      if (allAsBoolean) {
        if (all === true) {
          badge = React.createElement("span", { "data-role": "all", "data-case-transform": "up" }, Labels.YesChar);
        } else {
          badge = React.createElement("span", { "data-role": "all", "data-case-transform": "up" }, Labels.NoChar);
        }
      } else if (allAsGiven != null) {
        badge = React.createElement("span", { "data-role": "all", "data-case-transform": caseTransform }, allAsGiven);
      } else if (all === true) {
        badge = React.createElement("span", { "data-role": "all", "data-case-transform": "up" }, Labels.All);
      }
    }
  } else if (required) {
    icon = React.createElement(PortIncorrect, null);
  } else {
    icon = React.createElement(PortUndefined, null);
  }
  return { icon, badge };
};
const PrePortContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-pre-port" })`
    display: flex;
    position: relative;
    align-self: end;
    align-items: center;
    justify-self: start;
    color: ${PlaygroundCssVars.NODE_PRE_PORT_COLOR};
    background: ${PlaygroundCssVars.NODE_PRE_PORT_BACKGROUND};
    height: ${PlaygroundCssVars.NODE_PORT_HEIGHT};
    border: ${PlaygroundCssVars.NODE_PRE_PORT_BORDER};
    border-top-right-radius: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} / 2);
    border-bottom-right-radius: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} / 2);
    font-weight: ${PlaygroundCssVars.NODE_PRE_PORT_FONT_WEIGHT};
    font-size: ${PlaygroundCssVars.NODE_PRE_PORT_FONT_SIZE};
    padding: ${PlaygroundCssVars.NODE_PRE_PORT_PADDING};
    margin-left: -1px;
    grid-column: 1;
    white-space: nowrap;

    &[data-defined=false] {
        border: ${PlaygroundCssVars.NODE_PRE_PORT_UNDEFINED_BORDER};
        background: ${PlaygroundCssVars.NODE_PRE_PORT_UNDEFINED_BACKGROUND};
    }

    &[data-required=true][data-defined=false] {
        border: ${PlaygroundCssVars.NODE_PRE_PORT_LACKING_BORDER};
        background: ${PlaygroundCssVars.NODE_PRE_PORT_LACKING_BACKGROUND};
    }

    &[data-danger=true] {
        border: ${PlaygroundCssVars.NODE_PRE_PORT_DANGER_BORDER};
        background: ${PlaygroundCssVars.NODE_PRE_PORT_DANGER_BACKGROUND};

        > span[data-role~=count],
        > span[data-role~=all] {
            background: ${PlaygroundCssVars.NODE_PRE_PORT_BADGE_DANGER_BACKGROUND};
        }
    }

    &[data-role~=first-sub-step] {
        border: ${PlaygroundCssVars.NODE_PORT_FIRST_SUB_STEP_BORDER};
        background: ${PlaygroundCssVars.NODE_PORT_FIRST_SUB_STEP_BACKGROUND};
    }

    > svg:first-child {
        height: 1em;
        width: 1em;
        margin-right: 6px;
    }

    > span[data-role~=count],
    > span[data-role~=all] {
        display: flex;
        position: relative;
        align-items: center;
        height: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} * 0.6);
        font-size: 0.6em;
        padding: 0 8px;
        background: ${PlaygroundCssVars.NODE_PRE_PORT_BADGE_BACKGROUND};
        margin-left: 6px;
        border: ${PlaygroundCssVars.NODE_PRE_PORT_BADGE_BORDER};
        border-radius: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} * 0.3);
    }

    > span[data-case-transform=caps] {
        text-transform: capitalize;
    }

    > span[data-case-transform=up] {
        text-transform: uppercase;
    }
`;
const PrePort = (props) => {
  const { label, required, defined, danger = false, children, ...rest } = props;
  const { icon, badge } = computePortIconAndBadge(props);
  return React.createElement(
    PrePortContainer,
    { "data-required": required, "data-defined": defined, "data-danger": danger, ...rest },
    icon,
    React.createElement("span", null, label),
    badge,
    children
  );
};
const PostPortContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-post-port" })`
    display: flex;
    position: relative;
    align-self: end;
    align-items: center;
    justify-self: end;
    color: ${PlaygroundCssVars.NODE_POST_PORT_COLOR};
    background: ${PlaygroundCssVars.NODE_POST_PORT_BACKGROUND};
    height: ${PlaygroundCssVars.NODE_PORT_HEIGHT};
    border: ${PlaygroundCssVars.NODE_POST_PORT_BORDER};
    border-top-left-radius: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} / 2);
    border-bottom-left-radius: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} / 2);
    font-weight: ${PlaygroundCssVars.NODE_POST_PORT_FONT_WEIGHT};
    font-size: ${PlaygroundCssVars.NODE_POST_PORT_FONT_SIZE};
    padding: ${PlaygroundCssVars.NODE_POST_PORT_PADDING};
    margin-right: -1px;
    grid-column: 3;
    white-space: nowrap;

    &[data-defined=false] {
        border: ${PlaygroundCssVars.NODE_POST_PORT_UNDEFINED_BORDER};
        background: ${PlaygroundCssVars.NODE_POST_PORT_UNDEFINED_BACKGROUND};
    }

    &[data-required=true][data-defined=false] {
        border: ${PlaygroundCssVars.NODE_POST_PORT_LACKING_BORDER};
        background: ${PlaygroundCssVars.NODE_POST_PORT_LACKING_BACKGROUND};
    }

    &[data-danger=true] {
        border: ${PlaygroundCssVars.NODE_POST_PORT_DANGER_BORDER};
        background: ${PlaygroundCssVars.NODE_POST_PORT_DANGER_BACKGROUND};

        > span[data-role~=count],
        > span[data-role~=all] {
            background: ${PlaygroundCssVars.NODE_POST_PORT_BADGE_DANGER_BACKGROUND};
        }
    }

    &[data-role~=steps] {
        border: ${PlaygroundCssVars.NODE_PORT_STEPS_BORDER};
        background: ${PlaygroundCssVars.NODE_PORT_STEPS_BACKGROUND};
    }

    &[data-role~=catchable-error],
    &[data-role~=uncatchable-error],
    &[data-role~=exposed-error],
    &[data-role~=any-error] {
        border: ${PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_BORDER};
        background: ${PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_BACKGROUND};
    }

    > svg:first-child {
        height: 1em;
        width: 1em;
        margin-right: 6px;
    }

    > span[data-role~=count],
    > span[data-role~=all] {
        display: flex;
        position: relative;
        align-items: center;
        height: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} * 0.6);
        font-size: 0.6em;
        padding: 0 8px;
        background: ${PlaygroundCssVars.NODE_POST_PORT_BADGE_BACKGROUND};
        margin-left: 6px;
        border: ${PlaygroundCssVars.NODE_POST_PORT_BADGE_BORDER};
        border-radius: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} * 0.3);
    }

    > span[data-case-transform=caps] {
        text-transform: capitalize;
    }

    > span[data-case-transform=up] {
        text-transform: uppercase;
    }
`;
const PostPort = (props) => {
  const { label, required, defined, danger = false, children, ...rest } = props;
  const { icon, badge } = computePortIconAndBadge(props);
  return React.createElement(
    PostPortContainer,
    { "data-required": required, "data-defined": defined, "data-danger": danger, ...rest },
    icon,
    React.createElement("span", null, label),
    badge,
    children
  );
};
const NodeContainer = qe.div`
    display: flex;
    position: relative;
    flex-direction: column;
    border-radius: var(--border-radius);
    border: var(--border);
    background-color: var(--background-color);
    min-width: ${PlaygroundCssVars.NODE_MIN_WIDTH};
    max-width: ${PlaygroundCssVars.NODE_MAX_WIDTH}
`;
const NodeHeader = qe.div`
    display: flex;
    position: relative;
    border-top-left-radius: var(--border-radius);
    border-top-right-radius: var(--border-radius);
    background: var(--background);
    padding: var(--padding);
    margin-top: -2px;
`;
const NodeTitle = qe(UnwrappedCaption)`
    color: var(--color);
    font-size: var(--font-size);
    font-weight: var(--font-weight);
    height: unset;
    min-height: ${CssVars.INPUT_HEIGHT};
    //white-space: unset;
    //overflow: unset;
    //text-overflow: unset;
    padding: calc((${CssVars.INPUT_HEIGHT} - var(--font-size)) / 2) 0;
`;
const NodeTitleSpreader = qe.span.attrs({ [DOM_KEY_WIDGET]: "o23-playground-node-title-spreader" })`
    display: flex;
    position: relative;
    flex-grow: 1;
    min-width: var(--min-width, ${PlaygroundCssVars.NODE_TITLE_SPREADER_MIN_WIDTH});

    + span {
        flex-grow: unset;
    }
`;
const NodeSecondTitle = qe(UnwrappedCaption)`
    flex-grow: 1;
    justify-content: flex-end;
    height: unset;
    min-height: ${CssVars.INPUT_HEIGHT};
    color: var(--color);
    font-size: var(--font-size);
    font-weight: var(--font-weight);
    text-decoration: var(--text-decoration);
`;
const NodeBody = qe.div`
    display: grid;
    position: relative;
    grid-column: 1 / span 2;
    grid-row: 2;
    grid-template-columns: auto minmax(40px, 1fr) auto;
    min-height: var(--min-height);
    padding: var(--padding);
`;
const NodeWrapper = reactExports.forwardRef((props, ref) => {
  const { children, ...rest } = props;
  return React.createElement(NodeContainer, { ...rest, ref }, children);
});
class HandledNodeModel extends NodeModel {
  constructor(options, handlers) {
    super(options);
    __publicField(this, "handlers");
    __publicField(this, "_positionAppointed", false);
    this.handlers = handlers;
  }
  isPositionAppointed() {
    return this._positionAppointed;
  }
  setPositionAppointed(value) {
    this._positionAppointed = value;
  }
  previous(node) {
    const port = this.getPort(PreviousStepPortModel.NAME);
    const link = port.createIncomingLinkModel();
    link.setSourcePort(node.getPort(NextStepPortModel.NAME));
    return link;
  }
  next(node) {
    const port = this.getPort(NextStepPortModel.NAME);
    const link = port.createOutgoingLinkModel();
    link.setTargetPort(node.getPort(PreviousStepPortModel.NAME));
    return link;
  }
}
const _EndNodeModel = class _EndNodeModel extends HandledNodeModel {
  constructor(def, handlers) {
    super({ type: _EndNodeModel.TYPE }, handlers);
    __publicField(this, "def");
    this.def = def;
    this.addPort(new PreviousStepPortModel());
  }
};
__publicField(_EndNodeModel, "TYPE", "end-node");
let EndNodeModel = _EndNodeModel;
const EndNodeContainer = qe(NodeWrapper).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-end-node",
  style: {
    "--border-radius": PlaygroundCssVars.NODE_BORDER_RADIUS,
    "--border": PlaygroundCssVars.NODE_END_BORDER,
    "--background-color": PlaygroundCssVars.NODE_BACKGROUND
  }
})`
    cursor: default;
`;
const EndNodeHeader = qe(NodeHeader).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-end-node-header",
  style: {
    "--border-radius": PlaygroundCssVars.NODE_BORDER_RADIUS,
    "--background": PlaygroundCssVars.NODE_END_TITLE_BACKGROUND,
    "--padding": PlaygroundCssVars.NODE_TITLE_PADDING
  }
})``;
const EndNodeTitle = qe(NodeTitle).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-end-node-title",
  style: {
    "--color": PlaygroundCssVars.NODE_END_TITLE_COLOR,
    "--font-size": PlaygroundCssVars.NODE_END_TITLE_FONT_SIZE,
    "--font-weight": PlaygroundCssVars.NODE_END_TITLE_FONT_WEIGHT
  }
})``;
const EndNodeBody = qe(NodeBody).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-end-node-body",
  style: {
    "--min-height": PlaygroundCssVars.NODE_END_BODY_HEIGHT,
    "--padding": PlaygroundCssVars.NODE_END_BODY_PADDING
  }
})`
    display: none;
`;
const EndNodeWidget = (props) => {
  const { node, engine } = props;
  return React.createElement(
    EndNodeContainer,
    null,
    React.createElement(PreviousStepPortWidget, { port: node.getPort(PreviousStepPortModel.NAME), engine }),
    React.createElement(
      EndNodeHeader,
      null,
      React.createElement(EndNodeTitle, null, Labels.EndNodeTitle)
    ),
    React.createElement(EndNodeBody, null)
  );
};
class EndNodeFactory extends AbstractReactFactory {
  constructor() {
    super(EndNodeModel.TYPE);
  }
  generateReactWidget(event) {
    return React.createElement(EndNodeWidget, { engine: this.engine, node: event.model });
  }
  generateModel(_event) {
    throw new Error("DO NOT use EndNodeFactory#generateModel.");
  }
}
const _JoinEndNodeModel = class _JoinEndNodeModel extends HandledNodeModel {
  constructor(step, file, rest) {
    super({ type: _JoinEndNodeModel.TYPE }, rest.handlers);
    __publicField(this, "step");
    __publicField(this, "file");
    __publicField(this, "rest");
    this.step = step;
    this.file = file;
    this.rest = rest;
    this.addPort(new PreviousStepPortModel());
    this.addPort(new LastSubStepJoinPortModel());
    this.addPort(new NextStepPortModel());
  }
  getEntityType() {
    return this.rest.type;
  }
  getSubOf() {
    return this.rest.subOf;
  }
  endOfMe(node) {
    const port = this.getPort(PreviousStepPortModel.NAME);
    const link = new EndOfMeJoinLinkModel();
    link.setTargetPort(port);
    link.setSourcePort(node.getPort(NextStepPortModel.NAME));
    return link;
  }
  endOfSub(node) {
    const port = this.getPort(LastSubStepJoinPortModel.NAME);
    const link = port.createIncomingLinkModel();
    link.setSourcePort(node.getPort(NextStepPortModel.NAME));
    return link;
  }
};
__publicField(_JoinEndNodeModel, "TYPE", "join-end-node");
let JoinEndNodeModel = _JoinEndNodeModel;
var StepNodeEntityType;
(function(StepNodeEntityType2) {
  StepNodeEntityType2["VIRTUAL"] = "virtual";
  StepNodeEntityType2["NORMAL"] = "normal";
  StepNodeEntityType2["JOIN_END"] = "join-end";
})(StepNodeEntityType || (StepNodeEntityType = {}));
const _StepNodeModel = class _StepNodeModel extends HandledNodeModel {
  constructor(step, file, rest) {
    super({ type: _StepNodeModel.TYPE }, rest.handlers);
    __publicField(this, "step");
    __publicField(this, "file");
    __publicField(this, "rest");
    __publicField(this, "assistant");
    __publicField(this, "decorator");
    __publicField(this, "firstSubStep", false);
    this.step = step;
    this.file = file;
    this.rest = rest;
    this.assistant = rest.assistant;
    this.decorator = rest.decorator;
    this.addPort(new PreviousStepPortModel());
    this.addPort(new NextStepPortModel());
  }
  getEntityType() {
    return this.rest.type;
  }
  getSubOf() {
    return this.rest.subOf;
  }
  asFirstSubStep() {
    this.firstSubStep = true;
  }
  isFirstSubStep() {
    return this.firstSubStep;
  }
};
__publicField(_StepNodeModel, "TYPE", "step-node");
let StepNodeModel = _StepNodeModel;
const StepNodeContainer = qe(NodeWrapper).attrs(({ "data-use": use }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-step-node",
    style: {
      "--border-radius": PlaygroundCssVars.NODE_BORDER_RADIUS,
      "--border": PlaygroundCssVars[`NODE_STEP_${(use ?? "").trim().toUpperCase().replace(/-/g, "_")}_BORDER`] ?? PlaygroundCssVars.NODE_STEP_BORDER,
      "--background-color": PlaygroundCssVars.NODE_BACKGROUND
    }
  };
})`
    &:hover {
        > div[data-w=o23-playground-step-node-operators] {
            opacity: 1;
            pointer-events: auto;
        }
    }
`;
const StepNodeHeader = qe(NodeHeader).attrs(({ "data-use": use }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-step-node-header",
    style: {
      "--border-radius": PlaygroundCssVars.NODE_BORDER_RADIUS,
      "--background": PlaygroundCssVars[`NODE_STEP_${(use ?? "").trim().toUpperCase().replace(/-/g, "_")}_TITLE_BACKGROUND`] ?? PlaygroundCssVars.NODE_STEP_TITLE_BACKGROUND,
      "--padding": PlaygroundCssVars.NODE_TITLE_PADDING
    }
  };
})``;
const StepNodeTitle = qe(NodeTitle).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-step-node-title",
  style: {
    "--color": PlaygroundCssVars.NODE_STEP_TITLE_COLOR,
    "--font-size": PlaygroundCssVars.NODE_STEP_TITLE_FONT_SIZE,
    "--font-weight": PlaygroundCssVars.NODE_STEP_TITLE_FONT_WEIGHT
  }
})``;
const StepNodeSecondTitle = qe(NodeSecondTitle).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-step-node-second-title",
  style: {
    "--color": PlaygroundCssVars.NODE_START_TITLE_COLOR,
    "--font-size": PlaygroundCssVars.NODE_START_SECOND_TITLE_FONT_SIZE,
    "--font-weight": PlaygroundCssVars.NODE_START_SECOND_TITLE_FONT_WEIGHT
  }
})`
    &:before, &:after {
        display: inline-block;
        position: relative;
        margin-top: 3px;
    }

    &:before {
        content: '〔';
        margin-right: 2px;
    }

    &:after {
        content: '〕';
        margin-left: 2px;
    }
`;
const StepNodeBody = qe(NodeBody).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-step-node-body",
  style: {
    "--min-height": PlaygroundCssVars.NODE_STEP_BODY_HEIGHT,
    "--padding": PlaygroundCssVars.NODE_STEP_BODY_PADDING
  }
})`
`;
const StepNodeOperators = qe.div.attrs(({ position }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-step-node-operators",
    style: {
      "--top": position === "top" ? `calc(-1 * ${PlaygroundCssVars.NODE_STEP_OPERATORS_HEIGHT})` : "100%",
      "--align-items": position === "top" ? "flex-start" : "flex-end"
    }
  };
})`
    display: flex;
    position: absolute;
    top: var(--top);
    left: 0;
    width: 100%;
    height: ${PlaygroundCssVars.NODE_STEP_OPERATORS_HEIGHT};
    align-items: var(--align-items);
    cursor: default;
    opacity: 0;
    pointer-events: none;
    transition: opacity ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

    > span {
        flex-grow: 1;
    }
`;
const StepNodeOperator = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-step-node-operator" })`
    display: flex;
    position: relative;
    align-items: center;
    height: ${PlaygroundCssVars.NODE_STEP_OPERATOR_HEIGHT};
    padding-left: calc(${PlaygroundCssVars.NODE_STEP_OPERATOR_HEIGHT} * 0.3);
    padding-right: calc(${PlaygroundCssVars.NODE_STEP_OPERATOR_HEIGHT} * 0.3);
    color: ${PlaygroundCssVars.NODE_STEP_OPERATOR_COLOR};
    border: ${PlaygroundCssVars.NODE_STEP_OPERATOR_BORDER};
    cursor: pointer;
    white-space: nowrap;
    overflow: hidden;

    &[data-insert-step] {
        border-top-right-radius: ${PlaygroundCssVars.NODE_STEP_OPERATOR_BORDER_RADIUS};
        border-bottom-right-radius: ${PlaygroundCssVars.NODE_STEP_OPERATOR_BORDER_RADIUS};
    }

    &[data-remove-route],
    &[data-remove-otherwise],
    &[data-remove-step] {
        color: ${PlaygroundCssVars.NODE_STEP_OPERATOR_DANGER_COLOR};
        border-radius: ${PlaygroundCssVars.NODE_STEP_OPERATOR_BORDER_RADIUS};
        border-color: ${PlaygroundCssVars.NODE_STEP_OPERATOR_DANGER_COLOR};
    }

    &[data-remove-route]:not(:last-child),
    &[data-remove-otherwise]:not(:last-child) {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;

        + div[data-w=o23-playground-step-node-operator] {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
    }

    &:first-child {
        border-top-left-radius: ${PlaygroundCssVars.NODE_STEP_OPERATOR_BORDER_RADIUS};
        border-bottom-left-radius: ${PlaygroundCssVars.NODE_STEP_OPERATOR_BORDER_RADIUS};
    }

    &:hover {
        color: ${CssVars.INVERT_COLOR};
        background-color: ${PlaygroundCssVars.NODE_STEP_OPERATOR_COLOR};;
        z-index: 1;

        &[data-remove-route],
        &[data-remove-otherwise],
        &[data-remove-step] {
            background-color: ${PlaygroundCssVars.NODE_STEP_OPERATOR_DANGER_COLOR};
        }

        > svg {
            margin-right: calc(${PlaygroundCssVars.NODE_STEP_OPERATOR_HEIGHT} * 0.3);
        }

        > span {
            width: auto;
        }
    }

    > svg {
        height: calc(${PlaygroundCssVars.NODE_STEP_OPERATOR_HEIGHT} * 0.6);
        width: calc(${PlaygroundCssVars.NODE_STEP_OPERATOR_HEIGHT} * 0.6);
    }

    > span {
        display: flex;
        position: relative;
        align-items: center;
        width: 0;
        white-space: nowrap;
        overflow: hidden;
    }

    + div[data-w=o23-playground-step-node-operator] {
        margin-left: -1px;
    }
`;
const StepNodeWidget = (props) => {
  const { node, engine } = props;
  const ref = reactExports.useRef(null);
  const { on, off, fire } = usePlaygroundEventBus();
  reactExports.useEffect(() => {
    const onLocate = (step) => {
      var _a, _b;
      if (node.step !== step) {
        return;
      }
      if (((_a = ref.current) == null ? void 0 : _a.closest("div.o23-playground-editor-content")) != null) {
        (_b = ref.current) == null ? void 0 : _b.scrollIntoView({ behavior: "smooth", block: "center", inline: "center" });
      }
    };
    on(PlaygroundEventTypes.DO_LOCATE_STEP_NODE, onLocate);
    return () => {
      off(PlaygroundEventTypes.DO_LOCATE_STEP_NODE, onLocate);
    };
  }, [on, off, node.step]);
  const { step: def, file } = node;
  const { use } = def;
  const StepDefs = findStepDef(use);
  const onDoubleClicked = () => {
    fire(PlaygroundEventTypes.SHOW_EDIT_DIALOG, React.createElement(StepDialogContent, { model: node }));
  };
  const onOperatorsClicked = (e) => {
    e.stopPropagation();
    e.preventDefault();
  };
  const operators = reconfigureStepDefOperators(StepDefs.operators, node)(node, def);
  const onPrependStepClicked = () => {
    var _a;
    (_a = operators.prependStep) == null ? void 0 : _a.call(operators, node, def);
  };
  const onAppendStepClicked = () => {
    var _a;
    (_a = operators.appendStep) == null ? void 0 : _a.call(operators, node, def);
  };
  const onRemoveStepClicked = () => {
    var _a;
    (_a = operators.remove) == null ? void 0 : _a.call(operators, node, def);
  };
  const onPrependRouteClicked = () => {
    var _a;
    (_a = operators.prependRoute) == null ? void 0 : _a.call(operators, node, def);
  };
  const onAppendRouteClicked = () => {
    var _a;
    (_a = operators.appendRoute) == null ? void 0 : _a.call(operators, node, def);
  };
  const onRemoveRouteClicked = () => {
    var _a;
    (_a = operators.removeRoute) == null ? void 0 : _a.call(operators, node, def);
  };
  const onAddOtherwiseClicked = () => {
    var _a;
    (_a = operators.addOtherwise) == null ? void 0 : _a.call(operators, node, def);
  };
  const onRemoveOtherwiseClicked = () => {
    var _a;
    (_a = operators.removeOtherwise) == null ? void 0 : _a.call(operators, node, def);
  };
  const name = (def.name ?? "").trim() || Labels.StepNodeNoname;
  const isFirstSubStep = node.isFirstSubStep();
  const canPrependStep = operators.prependStep != null;
  const canAppendStep = operators.appendStep != null;
  const canRemoveStep = operators.remove != null;
  const canPrependRoute = operators.prependRoute != null;
  const canAppendRoute = operators.appendRoute != null;
  const canRemoveRoute = operators.removeRoute != null;
  const canAddOtherwise = operators.addOtherwise != null;
  const canRemoveOtherwise = operators.removeOtherwise != null;
  return React.createElement(
    StepNodeContainer,
    { onDoubleClick: onDoubleClicked, "data-use": use, ref },
    isFirstSubStep ? React.createElement(FirstSubStepPortWidget, { port: node.getPort(FirstSubStepPortModel.NAME), engine }) : React.createElement(PreviousStepPortWidget, { port: node.getPort(PreviousStepPortModel.NAME), engine }),
    React.createElement(
      StepNodeHeader,
      { "data-use": use },
      React.createElement(StepNodeTitle, null, name),
      React.createElement(NodeTitleSpreader, null),
      React.createElement(StepNodeSecondTitle, null, askUseBadge(use))
    ),
    React.createElement(StepNodeBody, { "data-use": use }, StepDefs.ports.map(({ key, port: StepPort }) => {
      return React.createElement(StepPort, { step: def, file, node, engine, key });
    })),
    React.createElement(NextStepPortWidget, { port: node.getPort(NextStepPortModel.NAME), engine }),
    React.createElement(
      StepNodeOperators,
      { position: "top", onClick: onOperatorsClicked, onDoubleClick: onOperatorsClicked },
      canPrependRoute ? React.createElement(
        StepNodeOperator,
        { "data-insert-route": true, onClick: onPrependRouteClicked },
        React.createElement(InsertRoute, null),
        React.createElement("span", null, Labels.PrependRoute)
      ) : null,
      canPrependStep ? React.createElement(
        StepNodeOperator,
        { "data-insert-step": true, onClick: onPrependStepClicked },
        React.createElement(InsertStep, null),
        React.createElement("span", null, Labels.PrependStep)
      ) : null,
      React.createElement("span", null),
      canRemoveRoute ? React.createElement(
        StepNodeOperator,
        { "data-remove-route": true, onClick: onRemoveRouteClicked },
        React.createElement(RemoveRoute, null),
        React.createElement("span", null, Labels.RemoveRoute)
      ) : null,
      canRemoveOtherwise ? React.createElement(
        StepNodeOperator,
        { "data-remove-otherwise": true, onClick: onRemoveOtherwiseClicked },
        React.createElement(RemoveRoute, null),
        React.createElement("span", null, Labels.RemoveOtherwise)
      ) : null,
      canRemoveStep ? React.createElement(
        StepNodeOperator,
        { "data-remove-step": true, onClick: onRemoveStepClicked },
        React.createElement(RemoveStep, null),
        React.createElement("span", null, Labels.RemoveStep)
      ) : null
    ),
    React.createElement(
      StepNodeOperators,
      { position: "bottom" },
      canAppendRoute ? React.createElement(
        StepNodeOperator,
        { "data-insert-route": true, onClick: onAppendRouteClicked },
        React.createElement(InsertRoute, null),
        React.createElement("span", null, Labels.AppendRoute)
      ) : null,
      canAddOtherwise ? React.createElement(
        StepNodeOperator,
        { "data-add-otherwise": true, onClick: onAddOtherwiseClicked },
        React.createElement(Otherwise, null),
        React.createElement("span", null, Labels.AddOtherwise)
      ) : null,
      canAppendStep ? React.createElement(
        StepNodeOperator,
        { "data-insert-step": true, onClick: onAppendStepClicked },
        React.createElement(InsertStep, null),
        React.createElement("span", null, Labels.AppendStep)
      ) : null
    )
  );
};
class StepNodeFactory extends AbstractReactFactory {
  constructor() {
    super(StepNodeModel.TYPE);
  }
  generateReactWidget(event) {
    return React.createElement(StepNodeWidget, { engine: this.engine, node: event.model });
  }
  generateModel(_event) {
    throw new Error("DO NOT use StepNodeFactory#generateModel.");
  }
}
const JoinEndNodeContainer = qe(NodeWrapper).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-join-end-node",
  style: {
    "--border-radius": PlaygroundCssVars.NODE_BORDER_RADIUS,
    "--border": PlaygroundCssVars.NODE_JOIN_END_BORDER,
    "--background-color": PlaygroundCssVars.NODE_BACKGROUND
  }
})`
    cursor: default;
`;
const JoinEndNodeHeader = qe(NodeHeader).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-join-end-node-header",
  style: {
    "--border-radius": PlaygroundCssVars.NODE_BORDER_RADIUS,
    "--background": PlaygroundCssVars.NODE_JOIN_END_TITLE_BACKGROUND,
    "--padding": PlaygroundCssVars.NODE_TITLE_PADDING
  }
})``;
const JoinEndNodeTitle = qe(NodeTitle).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-join-end-node-title",
  style: {
    "--color": PlaygroundCssVars.NODE_JOIN_END_TITLE_COLOR,
    "--font-size": PlaygroundCssVars.NODE_JOIN_END_TITLE_FONT_SIZE,
    "--font-weight": PlaygroundCssVars.NODE_JOIN_END_TITLE_FONT_WEIGHT
  }
})``;
const JoinEndNodeWidget = (props) => {
  const { node, engine } = props;
  const { step: def } = node;
  return React.createElement(
    JoinEndNodeContainer,
    null,
    React.createElement(PreviousStepPortWidget, { port: node.getPort(PreviousStepPortModel.NAME), engine }),
    React.createElement(LastSubStepJoinPortWidget, { port: node.getPort(LastSubStepJoinPortModel.NAME), engine }),
    React.createElement(
      JoinEndNodeHeader,
      null,
      React.createElement(JoinEndNodeTitle, null, Labels.JoinEndNodeTitle),
      React.createElement(StepNodeSecondTitle, null, (def.name ?? "").trim() || Labels.StepNodeNoname)
    ),
    React.createElement(NextStepPortWidget, { port: node.getPort(NextStepPortModel.NAME), engine })
  );
};
class JoinEndNodeFactory extends AbstractReactFactory {
  constructor() {
    super(JoinEndNodeModel.TYPE);
  }
  generateReactWidget(event) {
    return React.createElement(JoinEndNodeWidget, { engine: this.engine, node: event.model });
  }
  generateModel(_event) {
    throw new Error("DO NOT use JoinEndNodeFactory#generateModel.");
  }
}
const _StartNodeModel = class _StartNodeModel extends HandledNodeModel {
  constructor(def, rest) {
    super({ type: _StartNodeModel.TYPE }, rest.handlers);
    __publicField(this, "def");
    __publicField(this, "rest");
    __publicField(this, "assistant");
    __publicField(this, "decorator");
    this.def = def;
    this.rest = rest;
    this.assistant = rest.assistant;
    this.decorator = rest.decorator;
    this.addPort(new NextStepPortModel());
  }
};
__publicField(_StartNodeModel, "TYPE", "start-node");
let StartNodeModel = _StartNodeModel;
const StartNodeContainer = qe(NodeWrapper).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-start-node",
  style: {
    "--border-radius": PlaygroundCssVars.NODE_BORDER_RADIUS,
    "--border": PlaygroundCssVars.NODE_START_BORDER,
    "--background-color": PlaygroundCssVars.NODE_BACKGROUND
  }
})``;
const StartNodeHeader = qe(NodeHeader).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-start-node-header",
  style: {
    "--border-radius": PlaygroundCssVars.NODE_BORDER_RADIUS,
    "--background": PlaygroundCssVars.NODE_START_TITLE_BACKGROUND,
    "--padding": PlaygroundCssVars.NODE_TITLE_PADDING
  }
})``;
const StartNodeTitle = qe(NodeTitle).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-start-node-title",
  style: {
    "--color": PlaygroundCssVars.NODE_START_TITLE_COLOR,
    "--font-size": PlaygroundCssVars.NODE_START_TITLE_FONT_SIZE,
    "--font-weight": PlaygroundCssVars.NODE_START_TITLE_FONT_WEIGHT
  }
})``;
const StartNodeSecondTitle = qe(NodeSecondTitle).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-start-node-second-title",
  style: {
    "--color": PlaygroundCssVars.NODE_START_TITLE_COLOR,
    "--font-size": PlaygroundCssVars.NODE_START_SECOND_TITLE_FONT_SIZE,
    "--font-weight": PlaygroundCssVars.NODE_START_SECOND_TITLE_FONT_WEIGHT
  }
})`
    text-transform: capitalize;

    &[data-role=route] {
        text-transform: unset;
    }

    &:before, &:after {
        display: inline-block;
        position: relative;
        margin-top: 3px;
    }

    &:before {
        content: '〔';
        margin-right: 2px;
    }

    &:after {
        content: '〕';
        margin-left: 2px;
    }
`;
const StartNodeBody = qe(NodeBody).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-start-node-body",
  style: {
    "--min-height": PlaygroundCssVars.NODE_START_BODY_HEIGHT,
    "--padding": PlaygroundCssVars.NODE_START_BODY_PADDING
  }
})``;
const EnabledPortWidget = (props) => {
  const { def } = props;
  const { enabled } = def;
  if (enabled !== false) {
    return null;
  }
  return React.createElement(PrePort, { label: Labels.Enabled, required: true, defined: true, all: false, allAsBoolean: true, danger: true });
};
const ApiMethodPortWidget = (props) => {
  const { def } = props;
  const { method } = def;
  const exists = VUtils.isNotBlank(method);
  return React.createElement(PrePort, { label: Labels.ApiMethodLabel, required: true, defined: exists, all: exists, allAsGiven: `${method ?? ""}`.trim(), caseTransform: "up" });
};
const ApiHeadersPortWidget = (props) => {
  const { def } = props;
  const { headers } = def;
  let count = void 0;
  let all = void 0;
  if (headers === true) {
    all = true;
  } else if (Array.isArray(headers)) {
    const length = headers.filter((header) => VUtils.isNotBlank(header)).length;
    if (length !== 0) {
      count = length;
    }
  }
  return React.createElement(PrePort, { label: Labels.ApiHeadersLabel, required: false, defined: count != null || all != null, count, all });
};
const ApiPathParamsPortWidget = (props) => {
  const { def } = props;
  const { pathParams } = def;
  let count = void 0;
  let all = void 0;
  if (pathParams === true) {
    all = true;
  } else if (Array.isArray(pathParams)) {
    const length = pathParams.filter((param) => VUtils.isNotBlank(param)).length;
    if (length !== 0) {
      count = length;
    }
  }
  return React.createElement(PrePort, { label: Labels.ApiPathParametersLabel, required: false, defined: count != null || all != null, count, all });
};
const ApiQueryParamsPortWidget = (props) => {
  const { def } = props;
  const { queryParams } = def;
  let count = void 0;
  let all = void 0;
  if (queryParams === true) {
    all = true;
  } else if (Array.isArray(queryParams)) {
    const length = queryParams.filter((param) => VUtils.isNotBlank(param)).length;
    if (length !== 0) {
      count = length;
    }
  }
  return React.createElement(PrePort, { label: Labels.ApiQueryParametersLabel, required: false, defined: count != null || all != null, count, all });
};
const ApiBodyPortWidget = (props) => {
  const { def } = props;
  const { body } = def;
  return React.createElement(PrePort, { label: Labels.ApiBodyLabel, required: false, defined: body != null, all: body, allAsBoolean: true });
};
const ApiFilesPortWidget = (props) => {
  const { def } = props;
  const { files } = def;
  let all = void 0;
  if (files != null && files !== false) {
    all = true;
  }
  return React.createElement(PrePort, { label: Labels.ApiFilesLabel, required: false, defined: all != null, all, allAsBoolean: true });
};
const ApiExposeHeadersPortWidget = (props) => {
  const { def } = props;
  const { exposeHeaders } = def;
  let count = Object.keys(exposeHeaders ?? {}).length;
  if (count === 0) {
    count = void 0;
  }
  return React.createElement(PrePort, { label: Labels.ApiExposeHeadersLabel, required: false, defined: count != null, count });
};
const ApiExposeFilePortWidget = (props) => {
  const { def } = props;
  const { exposeFile } = def;
  return React.createElement(PrePort, { label: Labels.ApiExposeFileLabel, required: false, defined: exposeFile != null, all: exposeFile, allAsBoolean: true });
};
const InitOnlyPortWidget = (props) => {
  const { def } = props;
  const { initOnly } = def;
  if (initOnly !== true) {
    return null;
  }
  return React.createElement(PrePort, { label: Labels.ExecuteOnInitLabel, required: false, defined: true, all: true, allAsBoolean: true });
};
const StartNodeWidget = (props) => {
  const { node, engine } = props;
  const ref = reactExports.useRef(null);
  const { on, off, fire } = usePlaygroundEventBus();
  reactExports.useEffect(() => {
    const onLocate = () => {
      var _a, _b;
      if (((_a = ref.current) == null ? void 0 : _a.closest("div.o23-playground-editor-content")) != null) {
        (_b = ref.current) == null ? void 0 : _b.scrollIntoView({ behavior: "smooth", block: "center", inline: "center" });
      }
    };
    on(PlaygroundEventTypes.DO_LOCATE_FILE_NODE, onLocate);
    return () => {
      off(PlaygroundEventTypes.DO_LOCATE_FILE_NODE, onLocate);
    };
  }, [on, off]);
  const def = node.def;
  const { isApi, secondTitle, secondTitleRole } = (() => {
    if (isPipelineDef(def)) {
      if (VUtils.isNotBlank(def.route)) {
        return { isApi: true, secondTitle: def.route.trim(), secondTitleRole: "route" };
      } else {
        return { isApi: false, secondTitle: Labels.PipelineTypePipeline, secondTitleRole: void 0 };
      }
    } else {
      return {
        isApi: false,
        secondTitle: isStepSetsDef(def) ? Labels.PipelineTypeStepSet : Labels.PipelineTypeStep,
        secondTitleRole: void 0
      };
    }
  })();
  const onConfirm = (model) => {
    return FileDefs.confirm(model, def, { handlers: node.handlers, assistant: node.assistant });
  };
  const onDiscard = (model) => FileDefs.discard(model);
  const onDoubleClicked = () => {
    const model = FileDefs.prepare(def);
    fire(PlaygroundEventTypes.SHOW_EDIT_DIALOG, React.createElement(DialogContent, { helpDoc: HelpDocs.pipeline, model, confirm: onConfirm, discard: onDiscard, elements: FileDefs.elements, assistant: node.assistant, decorator: node.decorator }));
  };
  let body = void 0;
  if (isApi) {
    body = React.createElement(
      React.Fragment,
      null,
      React.createElement(ApiMethodPortWidget, { def }),
      React.createElement(ApiHeadersPortWidget, { def }),
      React.createElement(ApiPathParamsPortWidget, { def }),
      React.createElement(ApiQueryParamsPortWidget, { def }),
      React.createElement(ApiBodyPortWidget, { def }),
      React.createElement(ApiFilesPortWidget, { def }),
      React.createElement(ApiExposeHeadersPortWidget, { def }),
      React.createElement(ApiExposeFilePortWidget, { def })
    );
  } else if (isPipelineDef(def)) {
    body = React.createElement(InitOnlyPortWidget, { def });
  }
  return React.createElement(
    StartNodeContainer,
    { onDoubleClick: onDoubleClicked, ref },
    React.createElement(
      StartNodeHeader,
      null,
      React.createElement(StartNodeTitle, null, VUtils.isNotBlank(def.code) ? def.code.trim() : Labels.NoCodeDefinedInFileDef),
      React.createElement(NodeTitleSpreader, null),
      React.createElement(StartNodeSecondTitle, { "data-role": secondTitleRole }, secondTitle)
    ),
    React.createElement(
      StartNodeBody,
      null,
      React.createElement(EnabledPortWidget, { def }),
      body
    ),
    React.createElement(NextStepPortWidget, { port: node.getPort(NextStepPortModel.NAME), engine })
  );
};
class StartNodeFactory extends AbstractReactFactory {
  constructor() {
    super(StartNodeModel.TYPE);
  }
  generateReactWidget(event) {
    return React.createElement(StartNodeWidget, { engine: this.engine, node: event.model });
  }
  generateModel(_event) {
    throw new Error("DO NOT use StartNodeFactory#generateModel.");
  }
}
const Factories = {
  ports: [],
  nodes: [],
  links: [],
  labels: []
};
const initEngine = (engine) => {
  const portFactories = engine.getPortFactories();
  portFactories.registerFactory(new NextStepPortFactory());
  portFactories.registerFactory(new PreviousStepPortFactory());
  portFactories.registerFactory(new StepsPortFactory());
  portFactories.registerFactory(new CatchableErrorHandlePortFactory());
  portFactories.registerFactory(new UncatchableErrorHandlePortFactory());
  portFactories.registerFactory(new ExposedErrorHandlePortFactory());
  portFactories.registerFactory(new AnyErrorHandlePortFactory());
  portFactories.registerFactory(new FirstSubStepPortFactory());
  portFactories.registerFactory(new LastSubStepJoinPortFactory());
  Factories.ports.forEach((factory) => portFactories.registerFactory(factory));
  const nodeFactories = engine.getNodeFactories();
  nodeFactories.registerFactory(new StartNodeFactory());
  nodeFactories.registerFactory(new StepNodeFactory());
  nodeFactories.registerFactory(new EndNodeFactory());
  nodeFactories.registerFactory(new JoinEndNodeFactory());
  Factories.nodes.forEach((factory) => nodeFactories.registerFactory(factory));
  const linkFactories = engine.getLinkFactories();
  linkFactories.registerFactory(new StepsLinkFactory());
  linkFactories.registerFactory(new ErrorHandlesLinkFactory());
  linkFactories.registerFactory(new EndOfMeJoinLinkFactory());
  linkFactories.registerFactory(new LastSubStepJoinLinkFactory());
  Factories.links.forEach((factory) => linkFactories.registerFactory(factory));
  const labelFactories = engine.getLabelFactories();
  Factories.labels.forEach((factory) => labelFactories.registerFactory(factory));
};
const createPrePortBool = (options) => {
  const { label, getValue, defaultAs = false, required = false } = options;
  return (props) => {
    const { step: model } = props;
    const value = getValue(model);
    const defined = !required || value != null;
    return React.createElement(PrePort, { label, required, defined, all: value ?? defaultAs, allAsBoolean: true });
  };
};
const createPrePortBoolWithKey = (options) => {
  const { key, ...rest } = options;
  return { key, port: createPrePortBool(rest) };
};
const createPrePortExists = (options) => {
  const { label, getValue } = options;
  return (props) => {
    const { step: def } = props;
    const exists = VUtils.isNotBlank(getValue(def));
    return React.createElement(PrePort, { label, required: true, defined: exists, all: true, allAsBoolean: true });
  };
};
const createPrePortExistsWithKey = (options) => {
  const { key, ...rest } = options;
  return { key, port: createPrePortExists(rest) };
};
const createPrePortValueOrLabel = (options) => {
  const { label, getValue } = options;
  return (props) => {
    const { step: model } = props;
    const value = getValue(model);
    const exists = VUtils.isNotBlank(value);
    const display = trim(value);
    return React.createElement(PrePort, { label: VUtils.blankThen(display, label), required: true, defined: exists });
  };
};
const createPrePortValueOrLabelWithKey = (options) => {
  const { key, ...rest } = options;
  return { key, port: createPrePortValueOrLabel(rest) };
};
const createPrePortOnAssistant = (options) => {
  const { label, getValue, askOptions } = options;
  return (props) => {
    const { step: model, node: { assistant } } = props;
    const value = trim(getValue(model));
    const options2 = askOptions(assistant);
    const foundOption = value != null ? void 0 : options2.find(({ value: v }) => v == value);
    const found = foundOption == null ? void 0 : foundOption.label;
    const exists = found != null;
    return React.createElement(PrePort, { label: VUtils.blankThen(found, label), required: true, defined: exists });
  };
};
const createPrePortOnAssistantWithKey = (options) => {
  const { key, ...rest } = options;
  return { key, port: createPrePortOnAssistant(rest) };
};
const elementEnabled = {
  code: "enabled",
  label: Labels.Enabled,
  anchor: "enabled",
  badge: createCheckOrBanBadge({ check: (model) => model.enabled !== false }),
  editor: (props) => {
    const { model, onValueChanged } = props;
    const onValueChange = (value) => {
      model.enabled = value;
      onValueChanged();
    };
    return React.createElement(UnwrappedCheckbox, { onValueChange, value: model.enabled ?? true });
  },
  helpDoc: HelpDocs.pipelineEnabled
};
const allOrArray = (value) => {
  if (value === true) {
    return React.createElement(ConfigurableElementBadgeAll, null);
  } else if (Array.isArray(value)) {
    const length = value.filter((header) => VUtils.isNotBlank(header)).length;
    return React.createElement(ConfigurableElementBadgeCount, { count: length });
  } else {
    return React.createElement(ConfigurableElementBadgeIgnored, null);
  }
};
const ANCHOR_TYPE = "type";
const ANCHOR_ROUTE = "route";
const ANCHOR_PATH_PARAMS = "path-params";
const visibleOnPipeline = (model) => model.type === "pipeline";
const visibleOnNotApi = (model) => visibleOnPipeline(model) && model.api !== true;
const visibleOnApi = (model) => visibleOnPipeline(model) && model.api === true;
const AllIgnoredOrArrayOptions = [
  { value: "all", label: Labels.All },
  { value: "ignored", label: Labels.Ignored },
  { value: "specified", label: Labels.Specified }
];
const AllIgnoredOrArrayEditor = (props) => {
  var _a;
  const { model, onValueChanged, name, lead } = props;
  const inputRef = reactExports.useRef(null);
  const writeToModel = (value2) => {
    const array = (value2 ?? "").split(/[,;]/).map((header) => header.trim()).filter((header) => VUtils.isNotBlank(header));
    if (array.length === 0) {
      model[name] = [];
    } else {
      model[name] = array;
    }
  };
  const onValueChange = (value2) => {
    var _a2;
    if (value2 === "all") {
      model[name] = true;
    } else if (value2 === "ignored") {
      delete model[name];
    } else {
      writeToModel((_a2 = model.temporary) == null ? void 0 : _a2[name]);
      setTimeout(() => {
        var _a3, _b;
        return (_b = (_a3 = inputRef.current) == null ? void 0 : _a3.querySelector("input")) == null ? void 0 : _b.focus();
      }, 50);
    }
    onValueChanged();
  };
  const onArrayValueChange = (value2) => {
    writeToModel(value2);
    model.temporary = { ...model.temporary ?? {}, [name]: value2 };
    onValueChanged();
  };
  const value = model[name] == null ? "ignored" : model[name] === true ? "all" : "specified";
  return React.createElement(
    VerticalLinesEditor,
    null,
    React.createElement(UnwrappedDropdown, { value, onValueChange, options: AllIgnoredOrArrayOptions, clearable: false, style: CommonElementEditorStyles.dropdown }),
    React.createElement(UnwrappedDecorateInput, { leads: [lead], value: ((_a = model.temporary) == null ? void 0 : _a[name]) ?? "", onValueChange: onArrayValueChange, disabled: value !== "specified", ref: inputRef, "data-di-prefix-text": true })
  );
};
const beautifyAuthorizations = (model) => {
  return [...new Set(model.authorizations == null ? [] : typeof model.authorizations === "string" ? model.authorizations.trim().split(",").map((auth) => auth.trim()).filter((auth) => VUtils.isNotBlank(auth)) : model.authorizations.map((auth) => (auth ?? "").trim()).filter((auth) => VUtils.isNotBlank(auth)))];
};
const AuthorizationsEditor = (props) => {
  const { model, onValueChanged } = props;
  const authorizations = beautifyAuthorizations(model);
  const [roles, setRoles] = reactExports.useState(() => {
    if (authorizations.length === 0) {
      return "";
    } else if (authorizations.includes("anonymous")) {
      return "";
    } else {
      return authorizations.filter((auth) => auth !== "authenticated").join(", ");
    }
  });
  const onValueChange = (value2) => {
    if (value2 === "ignored") {
      delete model.authorizations;
    } else if (value2 === "anonymous") {
      model.authorizations = "anonymous";
    } else {
      const exists = roles.split(",").map((role) => role.trim()).filter((role) => role.length !== 0);
      if (exists.length === 0) {
        model.authorizations = "authenticated";
      } else {
        model.authorizations = exists;
      }
    }
    onValueChanged();
  };
  const onRolesChange = (value2) => {
    const roles2 = value2;
    if (roles2.trim().length === 0) {
      model.authorizations = "authenticated";
    } else {
      model.authorizations = roles2.split(",").map((role) => role.trim()).filter((role) => role.length !== 0);
    }
    onValueChanged(false);
    setRoles(roles2);
  };
  const value = authorizations.length === 0 ? "ignored" : authorizations.includes("anonymous") ? "anonymous" : "authenticated";
  const options = [
    { value: "ignored", label: Labels.NoAuth },
    { value: "anonymous", label: Labels.AuthAnonymous },
    { value: "authenticated", label: Labels.AuthAuthenticated }
  ];
  return React.createElement(
    VerticalLinesEditor,
    null,
    React.createElement(UnwrappedDropdown, { value, onValueChange, options, clearable: false, style: CommonElementEditorStyles.dropdown }),
    React.createElement(UnwrappedDecorateInput, { leads: [Labels.AuthRoles], value: roles, onValueChange: onRolesChange, disabled: value !== "authenticated", "data-di-prefix-text": true })
  );
};
const elementAuthorizations = {
  code: "authorizations",
  label: Labels.ApiAuthorizationsLabel,
  anchor: "authorizations",
  badge: (model) => {
    const authorizations = beautifyAuthorizations(model);
    if (authorizations.length === 0) {
      return Labels.NoAuth;
    } else if (authorizations.includes("anonymous")) {
      return Labels.AuthAnonymous;
    } else {
      return Labels.AuthAuthenticated;
    }
  },
  visibleOn: [ANCHOR_TYPE],
  visible: visibleOnApi,
  editor: AuthorizationsEditor,
  helpDoc: HelpDocs.pipelineAuthorizations
};
const elementInitOnly = {
  code: "initOnly",
  label: Labels.ExecuteOnInitLabel,
  anchor: "initOnly",
  badge: createCheckOrBanBadge({ check: (model) => model.initOnly === true }),
  visibleOn: [ANCHOR_TYPE],
  visible: visibleOnNotApi,
  editor: (props) => {
    const { model, onValueChanged } = props;
    const onValueChange = (value) => {
      model.initOnly = value;
      onValueChanged();
    };
    return React.createElement(UnwrappedCheckbox, { onValueChange, value: model.initOnly ?? false });
  },
  helpDoc: HelpDocs.pipelineInitOnly
};
const ParseIgnoredOrDefaultOptions = [
  { value: "default", label: Labels.BodyFollowHttpMethod },
  { value: "ignored", label: Labels.Ignored },
  { value: "parse", label: Labels.ParseBody }
];
const elementBody = {
  code: "body",
  label: Labels.ApiBodyLabel,
  anchor: "body",
  badge: createCheckOrIgnoreBadge({ check: (model) => model.body === true }),
  editor: (props) => {
    const { model, onValueChanged } = props;
    const onValueChange = (value2) => {
      if (value2 === "default") {
        delete model.body;
      } else {
        model.body = value2 !== "ignored";
      }
      onValueChanged();
    };
    const value = model.body == null ? "default" : model.body ? "parse" : "ignored";
    return React.createElement(UnwrappedDropdown, { value, onValueChange, options: ParseIgnoredOrDefaultOptions, clearable: false, style: CommonElementEditorStyles.dropdown });
  },
  helpDoc: HelpDocs.pipelineBody
};
const FilesOptions = [
  { value: "all", label: Labels.AllFiles },
  { value: "ignored", label: Labels.NoFile },
  { value: "specified", label: Labels.Specified }
];
const FilesEditor = (props) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  const { model, onValueChanged } = props;
  const inputRef = reactExports.useRef(null);
  const { replace } = useThrottler();
  const writeToModel = () => {
    replace(() => {
      var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2, _j2;
      if (((_b2 = (_a2 = model.temporary) == null ? void 0 : _a2.files) == null ? void 0 : _b2.parse) !== true) {
        delete model.files;
        return;
      }
      if (((_d2 = (_c2 = model.temporary) == null ? void 0 : _c2.files) == null ? void 0 : _d2.list) === false) {
        model.files = true;
        return;
      }
      const specified = ((_f2 = (_e2 = model.temporary) == null ? void 0 : _e2.files) == null ? void 0 : _f2.files) ?? "";
      let files = specified.split("\n").map((line) => line.trim()).filter((line) => VUtils.isNotBlank(line)).map((line) => {
        const index = line.lastIndexOf(":");
        if (index === -1) {
          return [line.trim()];
        }
        const [name, count] = [line.substring(0, index).trim(), line.substring(index + 1).trim()];
        const tested = VUtils.isNumber(count);
        if (tested.test) {
          return [name, Math.trunc(tested.value)];
        } else {
          return [name];
        }
      });
      if (files.length === 0) {
        model.files = true;
        return;
      } else if (files.length !== 1) {
        files = files.filter(([name]) => VUtils.isNotBlank(name));
      }
      let size = VUtils.isNotBlank((_h2 = (_g2 = model.temporary) == null ? void 0 : _g2.files) == null ? void 0 : _h2.maxSize) ? model.temporary.files.maxSize.trim() : void 0;
      if (size != null && !VUtils.isNumber(size).test) {
        let unit = "";
        if (["k", "K", "m", "M"].includes(size[size.length - 1])) {
          size = size.substring(0, size.length - 1);
          unit = size[size.length - 1];
        }
        const tested = VUtils.isNumber(size);
        if (!tested.test || tested.value <= 0) {
          size = void 0;
        } else if (unit !== "") {
          size = `${size}${unit}`;
        } else {
          size = tested.value < 1 ? void 0 : Math.trunc(tested.value);
        }
      }
      const mimeType = VUtils.isNotBlank((_j2 = (_i2 = model.temporary) == null ? void 0 : _i2.files) == null ? void 0 : _j2.mimeType) ? model.temporary.files.maxSize.trim() : void 0;
      if (size != null || mimeType != null) {
        if (files.length === 1) {
          if (VUtils.isBlank(files[0][0])) {
            model.files = { maxSize: size, mimeType };
          } else if (files[0][1] <= 0 || files[0][1] == null) {
            model.files = { maxSize: size, mimeType, name: files[0][0], multiple: true };
          } else if (files[0][1] === 1) {
            model.files = { maxSize: size, mimeType, name: files[0][0], multiple: false };
          } else {
            model.files = {
              maxSize: size,
              mimeType,
              names: [{ name: files[0][0], maxCount: files[0][1] }]
            };
          }
        } else {
          model.files = {
            maxSize: size,
            mimeType,
            names: files.map(([name, count]) => {
              return count == null || count <= 0 ? name : { name, maxCount: count };
            })
          };
        }
      } else if (files.length === 1) {
        if (VUtils.isBlank(files[0][0])) {
          model.files = true;
        } else if (files[0][1] <= 0 || files[0][1] == null) {
          model.files = { name: files[0][0], multiple: true };
        } else if (files[0][1] === 1) {
          model.files = files[0][0];
        } else {
          model.files = [{ name: files[0][0], maxCount: files[0][1] }];
        }
      } else {
        model.files = files.map(([name, count]) => {
          return count == null || count <= 0 ? name : { name, maxCount: count };
        });
      }
    }, 100);
  };
  const onTypeChanged = (value) => {
    var _a2, _b2, _c2;
    switch (value) {
      case "all":
        model.temporary = {
          ...model.temporary ?? {},
          files: { ...((_a2 = model.temporary) == null ? void 0 : _a2.files) ?? {}, parse: true, list: false }
        };
        break;
      case "specified":
        model.temporary = {
          ...model.temporary ?? {},
          files: { ...((_b2 = model.temporary) == null ? void 0 : _b2.files) ?? {}, parse: true, list: true }
        };
        break;
      case "ignored":
      default:
        model.temporary = {
          ...model.temporary ?? {},
          files: { ...((_c2 = model.temporary) == null ? void 0 : _c2.files) ?? {}, parse: false, list: false }
        };
        break;
    }
    writeToModel();
    if (value === "specified") {
      setTimeout(() => {
        var _a3;
        return (_a3 = inputRef.current) == null ? void 0 : _a3.focus();
      }, 50);
    }
    onValueChanged();
  };
  const onFilesChanged = (value) => {
    var _a2;
    model.temporary = {
      ...model.temporary ?? {},
      files: { ...((_a2 = model.temporary) == null ? void 0 : _a2.files) ?? {}, files: value }
    };
    writeToModel();
    onValueChanged();
  };
  const onMaxSizeChanged = (value) => {
    var _a2;
    model.temporary = {
      ...model.temporary ?? {},
      files: { ...((_a2 = model.temporary) == null ? void 0 : _a2.files) ?? {}, maxSize: value }
    };
    writeToModel();
    onValueChanged();
  };
  const onMimeTypeChanged = (value) => {
    var _a2;
    model.temporary = {
      ...model.temporary ?? {},
      files: { ...((_a2 = model.temporary) == null ? void 0 : _a2.files) ?? {}, mimeType: value }
    };
    writeToModel();
    onValueChanged();
  };
  const type = ((_b = (_a = model.temporary) == null ? void 0 : _a.files) == null ? void 0 : _b.parse) !== true ? "ignored" : ((_d = (_c = model.temporary) == null ? void 0 : _c.files) == null ? void 0 : _d.list) !== true ? "all" : "specified";
  const rows = Math.max((((_f = (_e = model.temporary) == null ? void 0 : _e.files) == null ? void 0 : _f.files) ?? "").split("\n").length, 3);
  return React.createElement(
    VerticalLinesEditor,
    null,
    React.createElement(UnwrappedDropdown, { value: type, onValueChange: onTypeChanged, options: FilesOptions, clearable: false, style: CommonElementEditorStyles.dropdown }),
    React.createElement(UnwrappedTextarea, { value: ((_h = (_g = model.temporary) == null ? void 0 : _g.files) == null ? void 0 : _h.files) ?? "", onValueChange: onFilesChanged, disabled: type !== "specified", ref: inputRef, style: {
      minHeight: CssVars.INPUT_HEIGHT,
      height: `calc(${rows} * ${CssVars.LINE_HEIGHT} + ((${CssVars.INPUT_HEIGHT} - ${CssVars.LINE_HEIGHT}) / 2 - ${CssVars.BORDER_WIDTH}) * 2)`,
      maxHeight: `calc(10 * ${CssVars.LINE_HEIGHT} + ((${CssVars.INPUT_HEIGHT} - ${CssVars.LINE_HEIGHT}) / 2 - ${CssVars.BORDER_WIDTH}) * 2)`
    } }),
    React.createElement(UnwrappedDecorateInput, { leads: [Labels.FileMaxSize], value: ((_i = model.temporary) == null ? void 0 : _i.files.maxSize) ?? "", onValueChange: onMaxSizeChanged, disabled: type !== "specified", "data-di-prefix-text": true }),
    React.createElement(UnwrappedDecorateInput, { leads: [Labels.FileMimeType], value: ((_j = model.temporary) == null ? void 0 : _j.files.mimeType) ?? "", onValueChange: onMimeTypeChanged, disabled: type !== "specified", "data-di-prefix-text": true })
  );
};
const elementFiles = {
  code: "files",
  label: Labels.ApiFilesLabel,
  anchor: "files",
  badge: createCheckOrIgnoreBadge({ check: (model) => model.files != null && model.files !== false }),
  editor: FilesEditor,
  helpDoc: HelpDocs.pipelineFiles
};
const HeadersEditor = (props) => {
  return React.createElement(AllIgnoredOrArrayEditor, { ...props, name: "headers", lead: Labels.ParameterNames });
};
const elementHeaders = {
  code: "headers",
  label: Labels.ApiHeadersLabel,
  anchor: "headers",
  badge: (model) => allOrArray(model.headers),
  editor: HeadersEditor,
  helpDoc: HelpDocs.pipelineHeaders
};
const elementMethod$1 = {
  code: "method",
  label: Labels.ApiMethodLabel,
  anchor: "method",
  badge: (model) => {
    if (VUtils.isNotBlank(model.method)) {
      return model.method.trim().toUpperCase();
    } else {
      return React.createElement(ConfigurableElementBadgeMissed, null);
    }
  },
  editor: (props) => {
    const { model, onValueChanged } = props;
    const onValueChange = (value) => {
      model.method = value;
      onValueChanged();
    };
    const options = [
      { value: "get", label: "GET" },
      { value: "post", label: "POST" },
      { value: "put", label: "PUT" },
      { value: "delete", label: "DELETE" },
      { value: "patch", label: "PATCH" }
    ];
    return React.createElement(UnwrappedDropdown, { value: model.method ?? "", onValueChange, options, clearable: false, style: CommonElementEditorStyles.dropdown });
  },
  helpDoc: HelpDocs.pipelineMethod
};
const PathParamsEditor = (props) => {
  var _a;
  const { model, onValueChanged } = props;
  const writeToModel = (value2) => {
    const array = (value2 ?? "").split(/[,;]/).map((header) => header.trim()).filter((header) => VUtils.isNotBlank(header));
    if (array.length === 0) {
      model.pathParams = [];
    } else {
      model.pathParams = array;
    }
  };
  const onValueChange = (value2) => {
    var _a2;
    if (value2 === "all") {
      model.pathParams = true;
    } else if (value2 === "ignored") {
      delete model.pathParams;
    } else {
      writeToModel((_a2 = model.temporary) == null ? void 0 : _a2.pathParams);
    }
    onValueChanged();
  };
  const value = model.pathParams == null ? "ignored" : model.pathParams === true ? "all" : "specified";
  return React.createElement(
    VerticalLinesEditor,
    null,
    React.createElement(UnwrappedDropdown, { value, onValueChange, options: AllIgnoredOrArrayOptions, clearable: false, style: CommonElementEditorStyles.dropdown }),
    React.createElement(UnwrappedDecorateInput, { leads: [Labels.ParameterNames], value: ((_a = model.temporary) == null ? void 0 : _a.pathParams) ?? "", onValueChange: VUtils.noop, disabled: true, "data-di-prefix-text": true })
  );
};
const elementPathParams = {
  code: "pathParams",
  label: Labels.ApiPathParametersLabel,
  anchor: ANCHOR_PATH_PARAMS,
  badge: (model) => allOrArray(model.pathParams),
  changeBy: [ANCHOR_ROUTE],
  editor: PathParamsEditor,
  helpDoc: HelpDocs.pipelinePathParams
};
const QueryParamsEditor = (props) => {
  return React.createElement(AllIgnoredOrArrayEditor, { ...props, name: "queryParams", lead: Labels.ParameterNames });
};
const elementQueryParams = {
  code: "queryParams",
  label: Labels.ApiQueryParametersLabel,
  anchor: "query-params",
  badge: (model) => allOrArray(model.queryParams),
  editor: QueryParamsEditor,
  helpDoc: HelpDocs.pipelineQueryParams
};
const elementRequest = {
  code: "request",
  label: Labels.ApiRequestLabel,
  anchor: "request",
  children: [
    elementMethod$1,
    elementHeaders,
    elementPathParams,
    elementQueryParams,
    elementBody,
    elementFiles
  ],
  visibleOn: [ANCHOR_TYPE],
  visible: visibleOnApi,
  group: true
};
const elementExposeFile = {
  code: "exposeFile",
  label: Labels.ApiExposeFileLabel,
  anchor: "expose-file",
  badge: createCheckOrNotAvailableBadge({ check: (model) => model.exposeFile === true }),
  editor: (props) => {
    const { model, onValueChanged } = props;
    const onValueChange = (value) => {
      model.exposeFile = value;
      onValueChanged();
    };
    return React.createElement(UnwrappedCheckbox, { onValueChange, value: model.exposeFile ?? false });
  },
  helpDoc: HelpDocs.pipelineExposeFile
};
const elementExposeHeaders = {
  code: "exposeHeaders",
  label: Labels.ApiExposeHeadersLabel,
  anchor: "expose-headers",
  badge: (model) => {
    const count = Object.keys(model.exposeHeaders ?? {}).length;
    if (count !== 0) {
      return React.createElement(ConfigurableElementBadgeCount, { count });
    } else {
      return React.createElement(ConfigurableElementBadgeNotAvailable, null);
    }
  },
  editor: (props) => {
    var _a, _b;
    const { model, onValueChanged } = props;
    const onValueChange = (value) => {
      model.temporary = { ...model.temporary ?? {}, exposeHeaders: value };
      model.exposeHeaders = value.split("\n").filter((line) => VUtils.isNotBlank(line)).map((line) => [line, line.split(":", 1)[0]]).filter(([, key]) => VUtils.isNotBlank(key)).map(([line, key]) => [key, line.substring(key.length + 1)]).map(([key, value2]) => [key.trim(), (value2 ?? "").trim()]).reduce((acc, [key, value2]) => {
        acc[key] = value2;
        return acc;
      }, {});
      onValueChanged();
    };
    const rows = Math.max((((_a = model.temporary) == null ? void 0 : _a.exposeHeaders) ?? "").split("\n").length, 3);
    return React.createElement(UnwrappedTextarea, { value: ((_b = model.temporary) == null ? void 0 : _b.exposeHeaders) ?? "", onValueChange, style: {
      minHeight: CssVars.INPUT_HEIGHT,
      height: `calc(${rows} * ${CssVars.LINE_HEIGHT} + ((${CssVars.INPUT_HEIGHT} - ${CssVars.LINE_HEIGHT}) / 2 - ${CssVars.BORDER_WIDTH}) * 2)`,
      maxHeight: `calc(10 * ${CssVars.LINE_HEIGHT} + ((${CssVars.INPUT_HEIGHT} - ${CssVars.LINE_HEIGHT}) / 2 - ${CssVars.BORDER_WIDTH}) * 2)`
    } });
  },
  helpDoc: HelpDocs.pipelineExposeHeaders
};
const elementResponse = {
  code: "response",
  label: Labels.ApiResponseLabel,
  anchor: "response",
  children: [elementExposeHeaders, elementExposeFile],
  visibleOn: [ANCHOR_TYPE],
  visible: visibleOnApi,
  group: true
};
const RouteEditor = (props) => {
  const { model, onValueChanged } = props;
  const { fire } = useEditDialogEventBus();
  const onValueChange = (value) => {
    model.route = value;
    const pathParamNames = model.route.split(/[/.-]/).map((name) => name.trim()).filter((name) => name.startsWith(":")).map((name) => name.substring(1));
    model.temporary = { ...model.temporary ?? {}, pathParams: pathParamNames.join(", ") };
    if (model.pathParams != null && model.pathParams !== true) {
      model.pathParams = pathParamNames;
      fire(EditDialogEventTypes.ELEMENT_VALUE_CHANGED, ANCHOR_PATH_PARAMS);
    }
    onValueChanged();
  };
  return React.createElement(UnwrappedInput, { onValueChange, value: model.route ?? "" });
};
const elementRoute = {
  code: "route",
  label: Labels.ApiRouteLabel,
  anchor: ANCHOR_ROUTE,
  badge: (model) => {
    if (VUtils.isNotBlank(model.route)) {
      return model.route.trim();
    } else {
      return React.createElement(ConfigurableElementBadgeMissed, null);
    }
  },
  visibleOn: [ANCHOR_TYPE],
  visible: visibleOnApi,
  editor: RouteEditor,
  helpDoc: HelpDocs.pipelineRoute
};
const elementType = {
  code: "type",
  label: Labels.Type,
  anchor: ANCHOR_TYPE,
  badge: (model) => {
    switch (true) {
      case (model.type === "pipeline" && model.api === true):
        return Labels.PipelineTypeApi;
      case model.type === "pipeline":
        return Labels.PipelineTypePipeline;
      case model.type === "step-sets":
        return Labels.PipelineTypeStepSet;
      case model.type === "step":
        return Labels.PipelineTypeStep;
      default:
        return React.createElement(ConfigurableElementBadgeMissed, null);
    }
  },
  editor: (props) => {
    const { model, onValueChanged } = props;
    const onValueChange = (value2) => {
      if (value2 === "api") {
        model.type = "pipeline";
        model.api = true;
      } else if (value2 === "pipeline") {
        model.type = "pipeline";
        model.api = false;
      } else {
        model.type = value2;
        delete model.api;
      }
      onValueChanged();
    };
    const value = (model.api === true ? "api" : model.type) ?? "pipeline";
    const options = [
      { value: "pipeline", label: Labels.PipelineTypePipeline },
      { value: "api", label: Labels.PipelineTypeApi },
      { value: "step-sets", label: Labels.PipelineTypeStepSet },
      { value: "step", label: Labels.PipelineTypeStep }
    ];
    return React.createElement(UnwrappedDropdown, { value, onValueChange, options, clearable: false, style: CommonElementEditorStyles.dropdown });
  },
  helpDoc: HelpDocs.pipelineType,
  children: [elementInitOnly, elementRoute, elementAuthorizations, elementRequest, elementResponse]
};
const prepare$2 = (def) => {
  var _a, _b, _c;
  const model = {
    code: def.code,
    type: def.type,
    enabled: def.enabled
  };
  if (isPipelineDef(def)) {
    const pipeline = def;
    const pipelineModel = model;
    if (VUtils.isNotBlank(pipeline.route)) {
      pipelineModel.api = true;
      pipelineModel.authorizations = pipeline.authorizations;
      pipelineModel.route = pipeline.route;
      pipelineModel.method = pipeline.method;
      pipelineModel.headers = pipeline.headers;
      pipelineModel.pathParams = pipeline.pathParams;
      pipelineModel.queryParams = pipeline.queryParams;
      pipelineModel.body = pipeline.body;
      pipelineModel.files = pipeline.files;
      pipelineModel.exposeHeaders = pipeline.exposeHeaders;
      pipelineModel.exposeFile = pipeline.exposeFile;
      pipelineModel.temporary = {
        headers: pipeline.headers === true ? void 0 : (_a = pipeline.headers) == null ? void 0 : _a.filter((header) => VUtils.isNotBlank(header)).join(", "),
        pathParams: pipeline.pathParams === true ? void 0 : (_b = pipeline.pathParams) == null ? void 0 : _b.filter((param) => VUtils.isNotBlank(param)).join(", "),
        queryParams: pipeline.queryParams === true ? void 0 : (_c = pipeline.queryParams) == null ? void 0 : _c.filter((param) => VUtils.isNotBlank(param)).join(", "),
        files: (() => {
          if (pipeline.files === true) {
            return { parse: true, list: false };
          } else if (pipeline.files === false || pipeline.files == null) {
            return { parse: false, list: false };
          } else if (typeof pipeline.files === "string") {
            return { parse: true, list: true, files: `${pipeline.files.trim()}
` };
          } else if (Array.isArray(pipeline.files)) {
            return {
              parse: true,
              list: true,
              files: pipeline.files.map((file) => {
                if (typeof file === "string") {
                  return file.trim();
                } else if (file.maxCount == null) {
                  return file.name.trim();
                } else {
                  return `${file.name.trim()}: ${file.maxCount ?? 1}`;
                }
              }).join("\n") + "\n"
            };
          } else if (pipeline.files.names == null) {
            const files = pipeline.files;
            return {
              parse: true,
              list: true,
              files: (files.multiple === true ? `${files.name.trim()}: -1` : files.name.trim()) + "\n",
              maxSize: files.maxSize == null ? void 0 : `${files.maxSize}`.trim(),
              mimeType: files.mimeType
            };
          } else {
            const files = pipeline.files;
            return {
              parse: true,
              list: true,
              files: (files.names ?? []).map((file) => {
                if (typeof file === "string") {
                  return file.trim();
                } else if (file.maxCount == null) {
                  return file.name.trim();
                } else {
                  return `${file.name.trim()}: ${file.maxCount ?? 1}`;
                }
              }).join("\n") + "\n",
              maxSize: files.maxSize == null ? void 0 : `${files.maxSize}`.trim(),
              mimeType: files.mimeType
            };
          }
        })(),
        exposeHeaders: pipeline.exposeHeaders == null ? void 0 : Object.keys(pipeline.exposeHeaders).map((key) => key.trim()).filter((key) => VUtils.isNotEmpty(key)).sort((a, b) => a.localeCompare(b, void 0, { sensitivity: "base" })).map((key) => `${key}: ${pipeline.exposeHeaders[key] ?? ""}`).join("\n") + "\n"
      };
    } else {
      pipelineModel.api = false;
      pipelineModel.initOnly = pipeline.initOnly;
    }
  }
  return model;
};
const FileDefs = {
  prepare: prepare$2,
  confirm: confirm$2,
  discard: discard$1,
  elements: [elementCode, elementEnabled, elementType]
};
const START_X = 64;
const START_Y = 64;
const askStartNodePosition = (def) => {
  var _a, _b;
  const diagramDef = def;
  if (((_a = diagramDef.$diagram) == null ? void 0 : _a.$startX) != null && ((_b = diagramDef.$diagram) == null ? void 0 : _b.$startY) != null) {
    return { x: diagramDef.$diagram.$startX, y: diagramDef.$diagram.$startY, appointed: true };
  } else {
    return { x: START_X, y: START_Y, appointed: false };
  }
};
const askEndNodePosition = (def) => {
  var _a, _b;
  const diagramDef = def;
  if (((_a = diagramDef.$diagram) == null ? void 0 : _a.$endX) != null && ((_b = diagramDef.$diagram) == null ? void 0 : _b.$endY) != null) {
    return { x: diagramDef.$diagram.$endX, y: diagramDef.$diagram.$endY, appointed: true };
  } else {
    return { x: START_X, y: START_Y, appointed: false };
  }
};
const askStepNodePosition = (def) => {
  var _a, _b, _c, _d;
  const diagramDef = def;
  if (((_a = diagramDef.$diagram) == null ? void 0 : _a.$x) != null && ((_b = diagramDef.$diagram) == null ? void 0 : _b.$y) != null) {
    return { x: (_c = diagramDef.$diagram) == null ? void 0 : _c.$x, y: (_d = diagramDef.$diagram) == null ? void 0 : _d.$y, appointed: true };
  } else {
    return { x: START_X, y: START_Y, appointed: false };
  }
};
class CustomDiagramModel extends DiagramModel {
  addLink(link) {
    if (this.isLocked()) {
      link.setLocked(true);
    }
    return super.addLink(link);
  }
  addNode(node) {
    if (this.isLocked()) {
      node.setLocked(true);
    }
    return super.addNode(node);
  }
}
const createLockedDiagramModel = () => {
  const model = new CustomDiagramModel();
  model.setLocked(true);
  return model;
};
const createDiagramNodes = (file, handlers) => {
  const allNodes = [];
  const allLinks = [];
  const nodeHandlers = {
    onChange: () => handlers.onContentChange(() => handlers.serialize(file))
  };
  const startNode = new StartNodeModel(file, {
    handlers: nodeHandlers,
    assistant: handlers.assistant,
    decorator: handlers.decorator
  });
  setNodePosition(startNode, () => askStartNodePosition(file));
  allNodes.push(startNode);
  let previousNode = startNode;
  if (isPipelineDef(file)) {
    const steps = file.steps ?? [];
    if (steps.length === 0) {
      const step = handlers.assistant.createDefaultStep();
      steps.push(step);
      file.steps = steps;
    }
    previousNode = steps.reduce((previousNode2, step) => {
      return createStepNode(step, file, {
        type: StepNodeEntityType.NORMAL,
        subOf: file,
        handlers: nodeHandlers,
        assistant: handlers.assistant,
        decorator: handlers.decorator,
        previousNode: previousNode2,
        linkPrevious: (node) => previousNode2.next(node),
        appendNode: (...nodes) => allNodes.push(...nodes),
        appendLink: (...links) => allLinks.push(...links)
      });
    }, previousNode);
  } else {
    const step = file;
    previousNode = createStepNode(step, file, {
      type: StepNodeEntityType.VIRTUAL,
      subOf: file,
      handlers: nodeHandlers,
      assistant: handlers.assistant,
      decorator: handlers.decorator,
      previousNode,
      linkPrevious: (node) => previousNode.next(node),
      appendNode: (...nodes) => allNodes.push(...nodes),
      appendLink: (...links) => allLinks.push(...links)
    });
  }
  const endNode = new EndNodeModel(file, nodeHandlers);
  setNodePosition(endNode, () => askEndNodePosition(file));
  allNodes.push(endNode);
  const link = previousNode.next(endNode);
  allLinks.push(link);
  const model = createLockedDiagramModel();
  model.setLocked(true);
  model.addAll(...allNodes, ...allLinks);
  return model;
};
const cloneDiagramNodes = (old) => {
  const model = createLockedDiagramModel();
  model.setLocked(true);
  model.addAll(...old.getModels());
  return model;
};
const buildGrid = (node, grid, x, y) => {
  var _a;
  let hasSubSteps = false;
  if (node instanceof StepNodeModel) {
    const { use } = node.step;
    const ports = ((_a = findStepDef(use)) == null ? void 0 : _a.findSubPorts(node)) ?? [];
    ports.map((port2) => ({ port: port2, links: Object.values(port2.getLinks()) })).filter(({ links }) => links.length !== 0).forEach(({ links }, portIndex) => {
      links.sort((l1, l2) => {
        var _a2, _b;
        return (((_a2 = l1.getOptions().extras) == null ? void 0 : _a2.index) ?? 0) - (((_b = l2.getOptions().extras) == null ? void 0 : _b.index) ?? 0);
      }).forEach((link, linkIndex) => {
        y = y + (portIndex === 0 && linkIndex === 0 ? 0 : 1);
        hasSubSteps = true;
        const subNode = link.getTargetPort().getNode();
        grid[x + 1] = grid[x + 1] ?? [];
        grid[x + 1][y] = {
          node: subNode,
          x: subNode.getPosition().x,
          y: subNode.getPosition().y,
          maxWidth: -1,
          maxHeight: -1,
          top: -1,
          left: -1
        };
        y = buildGrid(subNode, grid, x + 1, y);
      });
    });
  }
  const port = node.getPort(NextStepPortModel.NAME);
  if (port != null) {
    const links = port.getLinks();
    const link = Object.values(links)[0];
    const next = link.getTargetPort().getNode();
    grid[x] = grid[x] ?? [];
    if (hasSubSteps) {
      grid[x][y + 1] = {
        node: next,
        x: next.getPosition().x,
        y: next.getPosition().y,
        maxWidth: -1,
        maxHeight: -1,
        top: -1,
        left: -1
      };
      return buildGrid(next, grid, x, y + 1);
    } else if (next instanceof JoinEndNodeModel) {
      return y;
    } else {
      grid[x][y + 1] = {
        node: next,
        x: next.getPosition().x,
        y: next.getPosition().y,
        maxWidth: -1,
        maxHeight: -1,
        top: -1,
        left: -1
      };
      return buildGrid(next, grid, x, y + 1);
    }
  } else {
    return y;
  }
};
const computeGrid = (grid, top, left, rowGap, columnGap) => {
  let offsetX = left;
  let offsetY = top;
  const maxX = grid.length - 1;
  const maxY = grid.reduce((max, column) => Math.max(max, column.length - 1), 0);
  for (let x = 0; x <= maxX; x++) {
    const column = grid[x];
    new Array(maxY + 1).fill(1).forEach((v, y) => {
      if (column[y] == null) {
        column[y] = { x, y, maxWidth: -1, maxHeight: -1, top: -1, left: -1 };
      }
    });
    const maxWidth = column.reduce((max, cell) => {
      var _a;
      return Math.max(max, ((_a = cell.node) == null ? void 0 : _a.width) ?? 0);
    }, 0);
    offsetX = offsetX + (x === 0 ? 0 : grid[x - 1][0].maxWidth + columnGap);
    column.forEach((cell) => {
      cell.maxWidth = maxWidth;
      cell.left = cell.node == null ? offsetX + maxWidth / 2 : offsetX + (maxWidth - cell.node.width) / 2;
    });
  }
  for (let y = 0; y <= maxY; y++) {
    const row = grid.map((column) => column[y]);
    const maxHeight = row.reduce((max, cell) => {
      var _a;
      return Math.max(max, ((_a = cell.node) == null ? void 0 : _a.height) ?? 0);
    }, 0);
    offsetY = offsetY + (y === 0 ? 0 : grid[0][y - 1].maxHeight + rowGap);
    row.forEach((cell) => {
      cell.maxHeight = maxHeight;
      cell.top = cell.node == null ? offsetY + maxHeight / 2 : offsetY;
    });
  }
  grid.forEach((column) => {
    column.forEach((cell) => {
      if (cell.node != null) {
        cell.node.setPosition(cell.left, cell.top);
      }
    });
  });
};
const createDiagramHandlers = (options) => {
  const { serializer, assistant, decorator, replace, syncContentToStateRef, notifyContentChanged } = options;
  return {
    serialize: (def) => serializer.stringify(def),
    assistant: {
      createDefaultStep: (assistant == null ? void 0 : assistant.createDefaultStep) ?? DEFAULTS.createDefaultStep,
      askTypeOrmDatasources: (assistant == null ? void 0 : assistant.askTypeOrmDatasources) ?? (() => []),
      askSystemsForHttp: (assistant == null ? void 0 : assistant.askSystemsForHttp) ?? (() => []),
      askRefPipelines: (assistant == null ? void 0 : assistant.askRefPipelines) ?? (() => []),
      askRefSteps: (assistant == null ? void 0 : assistant.askRefSteps) ?? (() => [])
    },
    decorator,
    onContentChange: (serialize) => {
      const content = syncContentToStateRef(serialize());
      replace(() => {
        notifyContentChanged(content);
      }, 100);
    }
  };
};
const StepDefsFolders = [];
const registerStepDefsFolders = (...folders) => {
  (folders || []).forEach((folder2) => {
    if (!StepDefsFolders.includes(folder2)) {
      StepDefsFolders.push(folder2);
    }
  });
};
const switchAllNodesFolding = (file, fold) => {
  const switchFolding = (step) => {
    for (const folder2 of StepDefsFolders) {
      if (folder2.accept(step)) {
        folder2.switch(step, fold);
        (folder2.askSubSteps(step) ?? []).forEach((subStep) => switchFolding(subStep));
        break;
      }
    }
  };
  if (isPipelineDef(file)) {
    (file.steps ?? []).forEach((step) => switchFolding(step));
  } else {
    switchFolding(file);
  }
};
const findSubStepsWithCategory = (step) => {
  for (const folder2 of StepDefsFolders) {
    if (folder2.accept(step)) {
      return folder2.askSubStepsWithCategory(step);
    }
  }
  return void 0;
};
const tryToRevealSubStep = (step, subStep) => {
  for (const folder2 of StepDefsFolders) {
    if (folder2.accept(step)) {
      return folder2.tryToRevealSubStep(step, subStep);
    }
  }
  return false;
};
const tryToRevealStep = (file, step) => {
  if (isPipelineDef(file)) {
    const steps = file.steps ?? [];
    if (steps.includes(step)) {
      return true;
    } else {
      return steps.some((s) => tryToRevealSubStep(s, step));
    }
  } else {
    return tryToRevealSubStep(file, step);
  }
};
var EditorKernelDiagramStatus;
(function(EditorKernelDiagramStatus2) {
  EditorKernelDiagramStatus2["IGNORED"] = "ignored";
  EditorKernelDiagramStatus2["PAINT"] = "paint";
  EditorKernelDiagramStatus2["PAINT_ON_POSITION"] = "paint-on-position";
  EditorKernelDiagramStatus2["ALL_CANVAS_READY"] = "canvas-model-ready";
  EditorKernelDiagramStatus2["IN_SERVICE"] = "in-service";
})(EditorKernelDiagramStatus || (EditorKernelDiagramStatus = {}));
const parseContent = (parser, content) => {
  const def = parser.parse(content ?? "");
  if (VUtils.isBlank(def.type)) {
    def.type = "pipeline";
  }
  return def;
};
const createDiagramModel = (options) => {
  const { def, serializer, assistant, decorator, replace, writeContentToState, onContentChanged } = options;
  const handlers = createDiagramHandlers({
    serializer,
    assistant,
    decorator,
    replace,
    syncContentToStateRef: (content) => {
      writeContentToState(content);
      return content;
    },
    notifyContentChanged: onContentChanged
  });
  return createDiagramNodes(def, handlers);
};
class DiagramState extends State {
  constructor() {
    super({ name: "default-diagrams" });
    this.childStates = [new SelectingState()];
  }
}
const createDiagramEngine = () => {
  const engine = new DiagramEngine({
    registerDefaultPanAndZoomCanvasAction: false,
    registerDefaultZoomCanvasAction: false
  });
  engine.getLayerFactories().registerFactory(new NodeLayerFactory());
  engine.getLayerFactories().registerFactory(new LinkLayerFactory());
  engine.getLayerFactories().registerFactory(new SelectionBoxLayerFactory());
  engine.getLabelFactories().registerFactory(new DefaultLabelFactory());
  engine.getNodeFactories().registerFactory(new DefaultNodeFactory());
  engine.getLinkFactories().registerFactory(new DefaultLinkFactory());
  engine.getLinkFactories().registerFactory(new PathFindingLinkFactory());
  engine.getPortFactories().registerFactory(new DefaultPortFactory());
  engine.getStateMachine().pushState(new DiagramState());
  initEngine(engine);
  const model = createLockedDiagramModel();
  model.setLocked(true);
  engine.setModel(model);
  return engine;
};
const firstPaint = (options) => {
  const { content, serializer, deserializer, assistant, decorator, replace, writeContentToState, onContentChanged } = options;
  const engine = createDiagramEngine();
  const engineBackend = createDiagramEngine();
  try {
    const def = parseContent(deserializer, content ?? "");
    const model = createDiagramModel({
      def,
      serializer,
      assistant,
      decorator,
      replace,
      writeContentToState,
      onContentChanged
    });
    engineBackend.setModel(model);
    return {
      engine,
      engineBackend,
      content,
      def,
      serializer,
      deserializer,
      diagramStatus: EditorKernelDiagramStatus.PAINT
    };
  } catch (e) {
    console.error(e);
    engine.setModel(createLockedDiagramModel());
    return {
      engine,
      engineBackend,
      content,
      serializer,
      deserializer,
      message: e.message,
      diagramStatus: EditorKernelDiagramStatus.IGNORED
    };
  }
};
const paintErrorDiagram = (options) => {
  const { error, stateRef, content, serializer, deserializer } = options;
  console.error(error);
  stateRef.current.content = content;
  stateRef.current.serializer = serializer;
  stateRef.current.deserializer = deserializer;
  delete stateRef.current.def;
  stateRef.current.engine.setModel(createLockedDiagramModel());
  stateRef.current.engineBackend.setModel(createLockedDiagramModel());
  stateRef.current.message = error.message;
  stateRef.current.diagramStatus = EditorKernelDiagramStatus.IGNORED;
  stateRef.current.canvasZoom = 1;
  delete stateRef.current.canvasWidth;
  delete stateRef.current.canvasHeight;
};
const computeCanvasSize = (model) => {
  return (model.getNodes() ?? []).reduce((size, node) => {
    if (node instanceof EndNodeModel) {
      size.height = node.getY() + node.height + DEFAULTS.diagram.startTop;
    }
    const right = node.getX() + node.width + DEFAULTS.diagram.startLeft;
    if (size.width == null || right > size.width) {
      size.width = right;
    }
    return size;
  }, {});
};
const paint = (options) => {
  const { stateRef, replace, onStateContentChanged, onContentChanged } = options;
  const content = options.content();
  const serializer = options.serializer();
  const deserializer = options.deserializer();
  const assistant = options.assistant();
  const decorator = options.decorator();
  try {
    const def = parseContent(deserializer, content ?? "");
    const model = createDiagramModel({
      def,
      serializer,
      assistant,
      decorator,
      replace,
      writeContentToState: (content2) => {
        stateRef.current.content = content2;
        (async () => await onStateContentChanged())();
      },
      onContentChanged
    });
    stateRef.current.content = content;
    stateRef.current.serializer = serializer;
    stateRef.current.deserializer = deserializer;
    stateRef.current.def = def;
    stateRef.current.canvasZoom = 1;
    const { width, height } = computeCanvasSize(model);
    stateRef.current.canvasWidth = width;
    stateRef.current.canvasHeight = height;
    stateRef.current.engineBackend.setModel(model);
    delete stateRef.current.message;
    stateRef.current.diagramStatus = EditorKernelDiagramStatus.PAINT;
  } catch (e) {
    paintErrorDiagram({ error: e, stateRef, content, serializer, deserializer });
  }
};
const repaintBackend = (options) => {
  const { stateRef, replace, onStateContentChanged, onContentChanged } = options;
  const def = stateRef.current.def;
  const serializer = stateRef.current.serializer;
  const assistant = options.assistant();
  const decorator = options.decorator();
  try {
    const model = createDiagramModel({
      def,
      serializer,
      assistant,
      decorator,
      replace,
      writeContentToState: (content) => {
        stateRef.current.content = content;
        (async () => await onStateContentChanged())();
      },
      onContentChanged
    });
    stateRef.current.engineBackend.setModel(model);
    stateRef.current.diagramStatus = EditorKernelDiagramStatus.PAINT_ON_POSITION;
  } catch (e) {
    paintErrorDiagram({
      error: e,
      stateRef,
      content: stateRef.current.content,
      serializer: stateRef.current.serializer,
      deserializer: stateRef.current.deserializer
    });
  }
};
const useComputePositions = (options) => {
  const { stateRef, afterPositionComputed } = options;
  const { fire } = usePlaygroundEventBus();
  reactExports.useEffect(() => {
    const computePositions = () => {
      const backendModel = stateRef.current.engineBackend.getModel();
      const grid = [];
      const nodes = backendModel.getNodes();
      const startNode = nodes.find((node) => node instanceof StartNodeModel);
      grid[0] = grid[0] ?? [];
      grid[0][0] = {
        node: startNode,
        x: startNode.getPosition().x,
        y: startNode.getPosition().y,
        maxWidth: -1,
        maxHeight: -1,
        top: -1,
        left: -1
      };
      buildGrid(startNode, grid, 0, 0);
      const { startTop, startLeft, rowGap, columnGap } = DEFAULTS.diagram;
      computeGrid(grid, startTop, startLeft, rowGap, columnGap);
      const newModel = cloneDiagramNodes(backendModel);
      newModel.setZoomLevel((stateRef.current.canvasZoom ?? 1) * 100);
      const { width, height } = computeCanvasSize(newModel);
      stateRef.current.canvasWidth = width;
      stateRef.current.canvasHeight = height;
      stateRef.current.engine.setModel(newModel);
      stateRef.current.engineBackend.setModel(createLockedDiagramModel());
      stateRef.current.diagramStatus = EditorKernelDiagramStatus.ALL_CANVAS_READY;
      afterPositionComputed();
    };
    if (stateRef.current.diagramStatus === EditorKernelDiagramStatus.PAINT || stateRef.current.diagramStatus === EditorKernelDiagramStatus.PAINT_ON_POSITION) {
      computePositions();
    }
  }, [fire, stateRef, stateRef.current.diagramStatus, afterPositionComputed]);
};
const useRepaintBackend = (options) => {
  const { stateRef, postPaintActions, assistant, decorator } = options;
  const { on, off, fire } = usePlaygroundEventBus();
  const { replace } = useThrottler();
  const forceUpdate = useForceUpdate();
  reactExports.useEffect(() => {
    const onRepaintBackend = () => {
      repaintBackend({
        assistant: () => assistant,
        decorator: () => decorator,
        stateRef,
        replace,
        onStateContentChanged: async () => {
          fire(PlaygroundEventTypes.REPAINT);
        },
        onContentChanged: (content) => {
          fire(PlaygroundEventTypes.CONTENT_CHANGED, content);
        }
      });
      forceUpdate();
    };
    const onRepaintAndLocateStepNode = (step) => {
      postPaintActions.current.push([PlaygroundEventTypes.DO_LOCATE_STEP_NODE, step]);
      onRepaintBackend();
    };
    const switchFolding = (fold) => {
      switchAllNodesFolding(stateRef.current.def, fold);
      onRepaintBackend();
    };
    const onFoldAllNodes = () => switchFolding(true);
    const onUnfoldAllNodes = () => switchFolding(false);
    on(PlaygroundEventTypes.REPAINT, onRepaintBackend);
    on(PlaygroundEventTypes.REPAINT_AND_LOCATE_STEP_NODE, onRepaintAndLocateStepNode);
    on(PlaygroundEventTypes.FOLD_ALL_NODES, onFoldAllNodes);
    on(PlaygroundEventTypes.UNFOLD_ALL_NODES, onUnfoldAllNodes);
    return () => {
      off(PlaygroundEventTypes.REPAINT, onRepaintBackend);
      off(PlaygroundEventTypes.REPAINT_AND_LOCATE_STEP_NODE, onRepaintAndLocateStepNode);
      off(PlaygroundEventTypes.FOLD_ALL_NODES, onFoldAllNodes);
      off(PlaygroundEventTypes.UNFOLD_ALL_NODES, onUnfoldAllNodes);
    };
  }, [on, off, fire, replace, forceUpdate, stateRef, postPaintActions, assistant, decorator]);
};
const EditorWrapper = qe.div.attrs({
  [DOM_KEY_WIDGET]: "o23-playground-editor",
  "data-v-scroll": "",
  "data-h-scroll": ""
})`
    display: block;
    position: relative;
    align-self: stretch;
    background-image: ${PlaygroundCssVars.EDITOR_BACKGROUND_IMAGE};
    background-size: ${PlaygroundCssVars.EDITOR_BACKGROUND_SIZE};
    background-position: ${PlaygroundCssVars.EDITOR_BACKGROUND_POSITION};
    overflow: auto;


    &[data-diagram-locked=true] {
        > div[data-w=o23-playground-canvas] > div.o23-playground-editor-content {
            cursor: default;

            div.node {
                cursor: pointer;
            }
        }
    }

    > div.o23-playground-editor-content-backend {
        position: absolute;
        left: 100%;
        // Width is necessary; 
        // otherwise, it will cause the node width to be rendered incorrectly,
        // ultimately resulting in the connections not being straight.
        min-width: 100%;
        //opacity: 0;
        user-select: none;
        pointer-events: none;
    }
`;
const BackendCanvasWrapper = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-backend-canvas" })`
    display: block;
    position: absolute;
    width: 100%;
    pointer-events: none;
    opacity: 0;

    &[data-diagram-status=paint],
    &[data-diagram-status=paint-on-position] {
        + div[data-w=o23-playground-canvas] > div.o23-playground-editor-content {
            //opacity: 0;
            user-select: none;
            pointer-events: none;

            div.node, div.node * {
                user-select: none;
                pointer-events: none;
                cursor: default;
            }
        }
    }
`;
const FrontendCanvasWrapper = qe.div.attrs(({ canvasWidth, canvasHeight, canvasZoom }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-canvas",
    style: {
      "--canvas-width": utils$2.toCssSize(canvasWidth),
      "--canvas-height": utils$2.toCssSize(canvasHeight),
      "--canvas-zoom": canvasZoom ?? 1
    }
  };
})`
    display: block;
    position: relative;
    min-width: 100%;
    min-height: 100%;
    width: calc(var(--canvas-width) * var(--canvas-zoom));
    height: calc(var(--canvas-height) * var(--canvas-zoom));
    overflow: hidden;

    > div.o23-playground-editor-content {
        width: 100%;
        height: 100%;
    }
`;
const NodeLocatorNeedle = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-editor-node-locator" })`
    display: block;
    position: fixed;
    top: 0;
    left: 0;
    width: 0;
    height: 0;
    pointer-events: none;
`;
const EditorToolbar = qe.div.attrs(({ columns }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-editor-toolbar",
    style: {
      "--grid-columns": columns
    }
  };
})`
    display: grid;
    position: absolute;
    align-items: center;
    grid-template-columns: repeat(var(--grid-columns), 1fr);
    top: ${PlaygroundCssVars.EDITOR_TOOLBAR_GUTTER_SIZE};
    right: ${PlaygroundCssVars.EDITOR_TOOLBAR_GUTTER_SIZE};
    height: ${PlaygroundCssVars.EDITOR_TOOLBAR_HEIGHT};
    border-radius: ${PlaygroundCssVars.EDITOR_TOOLBAR_BORDER_RADIUS};
    border: ${PlaygroundCssVars.EDITOR_TOOLBAR_BORDER};
    background-color: ${CssVars.BACKGROUND_COLOR};
    overflow: visible;
    opacity: 0.7;
    transition: border-color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION}, opacity ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

    &:hover {
        opacity: 1;
        border-color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_ACTIVE_BACKGROUND_COLOR};

        > span[data-w=o23-playground-editor-toolbar-button] {
            &:not(:first-child) {
                border-left-color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_ACTIVE_BACKGROUND_COLOR};
            }

            &:not(:hover) {
                color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_ACTIVE_BACKGROUND_COLOR};
            }
        }

        > div[data-w=o23-playground-editor-toolbar-toc] {
            > span[data-w=o23-playground-editor-toolbar-toc-button]:not(:hover) {
                color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_ACTIVE_BACKGROUND_COLOR};
            }
        }
    }

    > div[data-w=o23-playground-editor-toolbar-toc] {
        grid-column: 1 / span var(--grid-columns);
    }
`;
const EditorToolbarButton = qe.span.attrs({ [DOM_KEY_WIDGET]: "o23-playground-editor-toolbar-button" })`
    display: flex;
    position: relative;
    align-items: center;
    justify-content: center;
    width: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_WIDTH};
    height: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_HEIGHT};
    color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_COLOR};
    border-bottom: ${PlaygroundCssVars.EDITOR_TOOLBAR_BORDER};
    cursor: pointer;
    transition: color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION}, background-color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION}, border-color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

    &:not(:first-child) {
        border-left: ${PlaygroundCssVars.EDITOR_TOOLBAR_BORDER};
    }

    &:hover {
        color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_ACTIVE_COLOR};
        background-color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_ACTIVE_BACKGROUND_COLOR};
    }

    > svg {
        height: calc(${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_HEIGHT} / 3 * 2);

        &[data-icon=o23-origin-size] {
            height: calc(${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_HEIGHT} / 3 * 2 - 2px);
            margin-top: 2px;
        }
    }
`;
const EditorToolbarToc = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-editor-toolbar-toc" })`
    display: grid;
    position: relative;
    grid-template-columns: 1fr;
    grid-template-rows: auto 1fr;
    height: ${PlaygroundCssVars.EDITOR_TOOLBAR_TOC_HEIGHT};
    border-radius: 0 0 ${PlaygroundCssVars.EDITOR_TOOLBAR_BORDER_RADIUS} ${PlaygroundCssVars.EDITOR_TOOLBAR_BORDER_RADIUS};
    transition: border-color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};
    overflow: hidden;
`;
const EditorToolbarTocButton = qe.span.attrs({ [DOM_KEY_WIDGET]: "o23-playground-editor-toolbar-toc-button" })`
    display: flex;
    position: relative;
    align-items: center;
    justify-content: center;
    width: 100%;
    cursor: pointer;
    transition: color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION}, background-color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

    &:hover {
        color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_ACTIVE_COLOR};
        background-color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_ACTIVE_BACKGROUND_COLOR};
    }

    > svg {
        height: ${PlaygroundCssVars.EDITOR_TOOLBAR_TOC_HEIGHT};
    }
`;
const EditorToolbarTocContainer = qe.div.attrs(({ buttons }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-editor-toolbar-toc-container",
    "data-v-scroll": "",
    "data-h-scroll": "",
    style: {
      "--buttons": buttons
    }
  };
})`
    display: flex;
    position: absolute;
    flex-direction: column;
    top: calc(${PlaygroundCssVars.EDITOR_TOOLBAR_HEIGHT} + ${PlaygroundCssVars.EDITOR_TOOLBAR_GUTTER_SIZE} * 2);
    right: ${PlaygroundCssVars.EDITOR_TOOLBAR_GUTTER_SIZE};
    min-width: calc(${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_WIDTH} * var(--buttons) + 2px);
    max-width: max(33%, calc(${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_WIDTH} * 6 + 2px));
    max-height: calc(100% - ${PlaygroundCssVars.EDITOR_TOOLBAR_HEIGHT} - ${PlaygroundCssVars.EDITOR_TOOLBAR_GUTTER_SIZE} * 3);
    border: ${PlaygroundCssVars.EDITOR_TOOLBAR_BORDER};
    border-radius: ${PlaygroundCssVars.EDITOR_TOOLBAR_BORDER_RADIUS};
    overflow: auto;
    transition: border-color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION}, max-height ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

    &[data-first-paint=true] {
        max-width: 0;
        border: 0;
    }

    &:hover {
        border-color: ${PlaygroundCssVars.EDITOR_TOOLBAR_BUTTON_ACTIVE_BACKGROUND_COLOR};

        div[data-w=o23-playground-editor-toolbar-toc-item] {
            opacity: 1;
        }
    }
`;
const EditorToolbarTocItem = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-editor-toolbar-toc-item" })`
    display: flex;
    position: relative;
    align-items: center;
    min-height: ${PlaygroundCssVars.EDITOR_TOOLBAR_TOC_HEIGHT};
    height: ${PlaygroundCssVars.EDITOR_TOOLBAR_TOC_HEIGHT};
    background-color: ${CssVars.BACKGROUND_COLOR};
    opacity: 0.5;
    cursor: pointer;
    white-space: nowrap;
    transition: opacity ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

    > span {
        display: inline-flex;
        position: relative;
        align-items: center;
        height: ${PlaygroundCssVars.EDITOR_TOOLBAR_TOC_HEIGHT};
        transition: background-color ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};
    }

    > span:first-child {
        font-size: 0.8em;
        opacity: 0.8;
        padding-right: 6px;
        padding-left: ${CssVars.INPUT_INDENT};
    }

    > span:last-child {
        flex-grow: 1;
        padding-right: ${CssVars.INPUT_INDENT};
    }

    &:hover {
        > span {
            background-color: ${CssVars.HOVER_COLOR};
        }
    }
`;
const ParseError = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-viewer-error" })`
    display: flex;
    position: relative;
    align-items: center;
    padding: 16px 32px;
    color: ${PlaygroundCssVars.EDITOR_ERROR_COLOR};
    font-size: 1.5em;
    font-style: italic;
    font-weight: 500;
`;
const BackendCanvas = (props) => {
  const { stateRef, postPaintActions, assistant, decorator, afterPositionComputed } = props;
  useComputePositions({ stateRef, afterPositionComputed });
  useRepaintBackend({ stateRef, postPaintActions, assistant, decorator });
  return React.createElement(
    BackendCanvasWrapper,
    { "data-diagram-status": stateRef.current.diagramStatus },
    React.createElement(CanvasWidget, { engine: stateRef.current.engineBackend, className: "o23-playground-editor-content-backend" })
  );
};
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { content: props.content, hasError: false };
  }
  static getDerivedStateFromError(error) {
    console.log(error);
    return { hasError: true, error };
  }
  componentDidCatch(_error, _errorInfo) {
  }
  componentDidUpdate(_prevProps, prevState) {
    if (prevState.content !== this.props.content) {
      this.setState({ content: this.props.content, hasError: false });
    }
  }
  render() {
    if (this.state.hasError) {
      return React.createElement(ParseError, null, Labels.ERROR);
    }
    return this.props.children;
  }
}
const NodeLocator = (props) => {
  const { stateRef } = props;
  const { on, off, fire } = usePlaygroundEventBus();
  const ref = reactExports.useRef(null);
  reactExports.useEffect(() => {
    const onLocateFileNode = () => {
      fire(PlaygroundEventTypes.DO_LOCATE_FILE_NODE);
    };
    const onLocateStepNode = (step) => {
      fire(PlaygroundEventTypes.REPAINT_AND_LOCATE_STEP_NODE, step);
    };
    on(PlaygroundEventTypes.LOCATE_FILE_NODE, onLocateFileNode);
    on(PlaygroundEventTypes.LOCATE_STEP_NODE, onLocateStepNode);
    return () => {
      off(PlaygroundEventTypes.LOCATE_FILE_NODE, onLocateFileNode);
      off(PlaygroundEventTypes.LOCATE_STEP_NODE, onLocateStepNode);
    };
  }, [on, off, fire, stateRef]);
  return React.createElement(NodeLocatorNeedle, { ref });
};
const FrontendCanvas = (props) => {
  const { stateRef, postPaintActions } = props;
  const ref = reactExports.useRef(null);
  const { on, off } = usePlaygroundEventBus();
  const forceUpdate = useForceUpdate();
  reactExports.useEffect(() => {
    const zoomTo = (zoom2) => {
      stateRef.current.canvasZoom = zoom2;
      stateRef.current.engine.getModel().setZoomLevel(zoom2 * 100);
      stateRef.current.engine.repaintCanvas();
    };
    const onZoomTo = (zoom2) => {
      zoomTo(zoom2);
      forceUpdate();
    };
    const onZoomToFit = () => {
      if (ref.current == null) {
        return;
      }
      const parent = ref.current.parentElement;
      const { width: parentWidth, height: parentHeight } = parent.getBoundingClientRect();
      const zoom2 = Math.min(parentWidth / (stateRef.current.canvasWidth ?? parentWidth), parentHeight / (stateRef.current.canvasHeight ?? parentHeight));
      onZoomTo(zoom2);
    };
    on(PlaygroundEventTypes.ZOOM_TO, onZoomTo);
    on(PlaygroundEventTypes.ZOOM_TO_FIT, onZoomToFit);
    return () => {
      off(PlaygroundEventTypes.ZOOM_TO, onZoomTo);
      off(PlaygroundEventTypes.ZOOM_TO_FIT, onZoomToFit);
    };
  }, [on, off, forceUpdate, stateRef]);
  const askZoom = () => stateRef.current.canvasZoom;
  let zoom = askZoom();
  if (zoom === 1) {
    zoom = void 0;
  }
  const handle = stateRef.current.engine.registerListener({
    rendered: () => {
      if (stateRef.current.diagramStatus === EditorKernelDiagramStatus.IN_SERVICE) {
        const actions = [...postPaintActions.current];
        postPaintActions.current.length = 0;
        actions.forEach((action) => {
          var _a, _b;
          if (Array.isArray(action)) {
            switch (action[0]) {
              case PlaygroundEventTypes.DO_LOCATE_STEP_NODE: {
                const step = action[1];
                const node = (_a = stateRef.current.engine.getModel().getNodes()) == null ? void 0 : _a.find((node2) => node2 instanceof StepNodeModel && node2.step === step);
                (_b = ref.current.querySelector(`div[data-nodeid="${node.getID()}"]`)) == null ? void 0 : _b.scrollIntoView({
                  behavior: "smooth",
                  block: "center",
                  inline: "center"
                });
                break;
              }
            }
          }
        });
      }
      handle.deregister();
    }
  });
  return React.createElement(
    FrontendCanvasWrapper,
    { canvasWidth: stateRef.current.canvasWidth, canvasHeight: stateRef.current.canvasHeight, canvasZoom: zoom, ref },
    React.createElement(NodeLocator, { stateRef }),
    React.createElement(CanvasWidget, { engine: stateRef.current.engine, className: "o23-playground-editor-content" })
  );
};
const useForceRepaint = (options) => {
  const { content, serializer, deserializer, stateRef, assistant, decorator } = options;
  const { fire } = usePlaygroundEventBus();
  const { replace } = useThrottler();
  const forceUpdate = useForceUpdate();
  reactExports.useEffect(() => {
    if (serializer === stateRef.current.serializer && deserializer === stateRef.current.deserializer && content === stateRef.current.content) {
      return;
    }
    paint({
      serializer: () => serializer,
      deserializer: () => deserializer,
      assistant: () => assistant,
      decorator: () => decorator,
      content: () => content,
      stateRef,
      replace,
      onStateContentChanged: async () => {
        fire(PlaygroundEventTypes.REPAINT);
      },
      onContentChanged: (content2) => {
        fire(PlaygroundEventTypes.CONTENT_CHANGED, content2);
      }
    });
    forceUpdate();
  }, [fire, replace, forceUpdate, content, serializer, deserializer, stateRef, assistant, decorator]);
};
const ToolbarToc = (props) => {
  const { stateRef, buttons } = props;
  const def = stateRef.current.def;
  const ref = reactExports.useRef(null);
  const { fire } = usePlaygroundEventBus();
  const [firstPaint2, setFirstPaint] = reactExports.useState(true);
  const forceUpdate = useForceUpdate();
  reactExports.useEffect(() => {
    if (ref.current == null) {
      return;
    }
    const editor = ref.current.parentElement.previousElementSibling;
    if (editor == null) {
      return;
    }
    const resizeObserver = new ResizeObserver(() => {
      forceUpdate();
    });
    resizeObserver.observe(editor);
    return () => {
      resizeObserver == null ? void 0 : resizeObserver.disconnect();
    };
  }, [forceUpdate]);
  reactExports.useEffect(() => {
    setFirstPaint(false);
  }, [firstPaint2]);
  const items = [{ label: def.code, index: "0.", type: "file", def }];
  const buildItemsOfStep = (step, indexPrefix) => {
    const subStepsWithCategory = findSubStepsWithCategory(step) ?? {};
    if (subStepsWithCategory.steps != null) {
      buildItems(subStepsWithCategory.steps, indexPrefix);
    }
    Object.keys(subStepsWithCategory).filter((key) => !["steps", "otherwise", "catchable", "uncatchable", "exposed", "any"].includes(key)).sort().forEach((key) => {
      if (subStepsWithCategory[key] != null) {
        buildItems(subStepsWithCategory[key], `${indexPrefix}${key}.`);
      }
    });
    ["otherwise", "catchable", "exposed", "uncatchable", "any"].forEach((key) => {
      if (subStepsWithCategory[key] != null) {
        buildItems(subStepsWithCategory[key], `${indexPrefix}${key}.`);
      }
    });
  };
  const buildItems = (steps, indexPrefix) => {
    steps.forEach((step, stepIndex) => {
      const index = `${indexPrefix}${stepIndex + 1}.`;
      items.push({
        label: (step.name ?? "").trim() || Labels.StepNodeNoname,
        index,
        type: StepNodeEntityType.NORMAL,
        def: step
      });
      buildItemsOfStep(step, index);
    });
  };
  if (!isPipelineDef(def)) {
    items.push({
      label: (def.name ?? "").trim() || Labels.StepNodeNoname,
      index: "1.",
      type: StepNodeEntityType.VIRTUAL,
      def
    });
    buildItemsOfStep(def, "1.");
  } else {
    buildItems(def.steps ?? [], "");
  }
  const onItemClick = (item) => () => {
    var _a;
    const { type, def: step } = item;
    if (type === "file") {
      fire(PlaygroundEventTypes.LOCATE_FILE_NODE);
      return;
    }
    const node = (_a = stateRef.current.engine.getModel().getNodes()) == null ? void 0 : _a.find((node2) => node2 instanceof StepNodeModel && node2.step === step);
    if (node != null) {
      fire(PlaygroundEventTypes.DO_LOCATE_STEP_NODE, step);
    } else {
      tryToRevealStep(def, step);
      fire(PlaygroundEventTypes.LOCATE_STEP_NODE, step);
    }
  };
  return React.createElement(EditorToolbarTocContainer, { "data-first-paint": firstPaint2, buttons, ref }, items.map((item) => {
    return React.createElement(
      EditorToolbarTocItem,
      { onClick: onItemClick(item), key: item.index },
      React.createElement("span", null, item.index),
      React.createElement("span", null, item.label)
    );
  }));
};
const ToolbarTocWrapper = (props) => {
  const { stateRef, expanded, buttons } = props;
  if (!expanded) {
    return null;
  }
  return React.createElement(ToolbarToc, { stateRef, buttons });
};
const Toolbar = (props) => {
  const { stateRef, serializer, allowUploadFile, allowDownloadFile, allowDownloadImage, maxMode, zenMode } = props;
  const ref = reactExports.useRef(null);
  const { fire } = usePlaygroundEventBus();
  const [state, setState] = reactExports.useState({ max: false, zen: false, tocExpanded: false });
  reactExports.useEffect(() => {
    const onFullScreenChanged = () => {
      if (document.fullscreenElement == null) {
        setState((state2) => ({ ...state2, zen: false, max: false }));
      }
    };
    window.addEventListener("fullscreenchange", onFullScreenChanged);
    return () => {
      window.removeEventListener("fullscreenchange", onFullScreenChanged);
    };
  }, []);
  reactExports.useEffect(() => {
    const wrapper = ref.current.parentElement;
    switch (true) {
      case state.zen:
        wrapper.setAttribute("data-diagram-work-mode", "zen");
        document.documentElement.requestFullscreen && document.documentElement.requestFullscreen({ navigationUI: "hide" });
        break;
      case state.max:
        wrapper.setAttribute("data-diagram-work-mode", "max");
        break;
      case !state.max:
        wrapper.removeAttribute("data-diagram-work-mode");
        if (document.fullscreenElement != null) {
          document.exitFullscreen && document.exitFullscreen();
        }
        break;
    }
  }, [state.max, state.zen]);
  const onZoomInClicked = () => {
    fire(PlaygroundEventTypes.ZOOM_TO, (stateRef.current.canvasZoom ?? 1) + 0.05);
  };
  const onZoomOutClicked = () => {
    fire(PlaygroundEventTypes.ZOOM_TO, Math.max(stateRef.current.canvasZoom ?? 1, 0.1) - 0.05);
  };
  const onOriginSizeClicked = () => {
    fire(PlaygroundEventTypes.ZOOM_TO, 1);
  };
  const onFitCanvasClicked = () => {
    fire(PlaygroundEventTypes.ZOOM_TO_FIT);
  };
  const onDownloadImageClicked = async () => {
    var _a;
    const backendModel = stateRef.current.engineBackend.getModel();
    stateRef.current.engineBackend.setModel(cloneDiagramNodes(stateRef.current.engine.getModel()));
    await stateRef.current.engineBackend.repaintCanvas(true);
    const node = ref.current.parentElement.querySelector("div.o23-playground-editor-content-backend");
    const { width, height } = Array.from(node.lastElementChild.children).reduce(({ width: width2, height: height2 }, child) => {
      const { width: childWidth, height: childHeight } = child.getBoundingClientRect();
      return {
        width: Math.max(width2, childWidth + parseInt(child.style.left)),
        height: Math.max(height2, childHeight + parseInt(child.style.top))
      };
    }, { width: 0, height: 0 });
    node.style.width = `${width + DEFAULTS.diagram.startLeft}px`;
    node.style.height = `${height + DEFAULTS.diagram.startTop}px`;
    const dataUrl = await dom2image.toPng(node, { quality: 1, bgcolor: "transparent" });
    const link = document.createElement("a");
    link.download = `${((_a = stateRef.current.def) == null ? void 0 : _a.code) || "no-code"}-diagram.png`;
    link.href = dataUrl;
    link.click();
    node.style.width = "";
    node.style.height = "";
    stateRef.current.engineBackend.setModel(backendModel);
  };
  const onDownloadFileClicked = async () => {
    var _a;
    const link = document.createElement("a");
    link.download = `${((_a = stateRef.current.def) == null ? void 0 : _a.code) || "no-code"}-config.${serializer.extname()}`;
    link.href = "data:text/plain;charset=UTF-8," + encodeURIComponent(serializer.stringify(stateRef.current.def));
    link.click();
  };
  const onUploadFileClicked = async () => {
    const file = document.createElement("input");
    file.setAttribute("type", "file");
    file.setAttribute("accept", ".yml,.yaml,.o23");
    file.setAttribute("multiple", "false");
    file.addEventListener("change", () => {
      if (file.files.length == 1) {
        const reader = new FileReader();
        reader.onload = () => {
          const content = reader.result;
          fire(PlaygroundEventTypes.RESET_CONTENT, content);
        };
        reader.readAsText(file.files[0]);
      }
    });
    file.click();
  };
  const onMaxClicked = () => setState((state2) => ({ ...state2, max: true }));
  const onMinClicked = () => setState((state2) => ({ ...state2, max: false }));
  const onZenClicked = () => setState((state2) => ({ ...state2, zen: true, max: true }));
  const onWindowClicked = () => {
    document.exitFullscreen && document.exitFullscreen();
    setState((state2) => ({ ...state2, zen: false, max: false }));
  };
  const onFoldAllNodesClicked = () => fire(PlaygroundEventTypes.FOLD_ALL_NODES);
  const onUnfoldAllNodesClicked = () => fire(PlaygroundEventTypes.UNFOLD_ALL_NODES);
  const onSwitchToc = (expanded) => () => setState((state2) => ({ ...state2, tocExpanded: expanded }));
  const columns = 11 - (!zenMode || state.zen ? 1 : 0) - (!maxMode ? 1 : 0) - (!allowDownloadFile ? 1 : 0) - (!allowDownloadImage ? 1 : 0) - (!allowUploadFile ? 1 : 0);
  return React.createElement(
    React.Fragment,
    null,
    React.createElement(
      EditorToolbar,
      { columns, "data-toc-expanded": state.tocExpanded, ref },
      React.createElement(
        EditorToolbarButton,
        { onClick: onZoomInClicked },
        React.createElement(ZoomIn, null)
      ),
      React.createElement(
        EditorToolbarButton,
        { onClick: onZoomOutClicked },
        React.createElement(ZoomOut, null)
      ),
      React.createElement(
        EditorToolbarButton,
        { onClick: onOriginSizeClicked },
        React.createElement(OriginSize, null)
      ),
      React.createElement(
        EditorToolbarButton,
        { onClick: onFitCanvasClicked },
        React.createElement(FitCanvas, null)
      ),
      React.createElement(
        EditorToolbarButton,
        { onClick: onFoldAllNodesClicked },
        React.createElement(FoldAllNodes, null)
      ),
      React.createElement(
        EditorToolbarButton,
        { onClick: onUnfoldAllNodesClicked },
        React.createElement(UnfoldAllNodes, null)
      ),
      allowDownloadImage ? React.createElement(
        EditorToolbarButton,
        { onClick: onDownloadImageClicked },
        React.createElement(DownloadImage, null)
      ) : null,
      allowDownloadFile ? React.createElement(
        EditorToolbarButton,
        { onClick: onDownloadFileClicked },
        React.createElement(DownloadFile, null)
      ) : null,
      allowUploadFile ? React.createElement(
        EditorToolbarButton,
        { onClick: onUploadFileClicked },
        React.createElement(UploadFile, null)
      ) : null,
      maxMode ? state.max ? null : React.createElement(
        EditorToolbarButton,
        { onClick: onMaxClicked },
        React.createElement(Max, null)
      ) : null,
      maxMode ? state.max && !state.zen ? React.createElement(
        EditorToolbarButton,
        { onClick: onMinClicked },
        React.createElement(Min, null)
      ) : null : null,
      zenMode ? state.zen ? null : React.createElement(
        EditorToolbarButton,
        { onClick: onZenClicked },
        React.createElement(Zen, null)
      ) : null,
      zenMode ? state.zen ? React.createElement(
        EditorToolbarButton,
        { onClick: onWindowClicked },
        React.createElement(Window, null)
      ) : null : null,
      React.createElement(EditorToolbarToc, null, state.tocExpanded ? React.createElement(
        EditorToolbarTocButton,
        { onClick: onSwitchToc(false) },
        React.createElement(CollapseToc, null)
      ) : React.createElement(
        EditorToolbarTocButton,
        { onClick: onSwitchToc(true) },
        React.createElement(ExpandToc, null)
      ))
    ),
    React.createElement(ToolbarTocWrapper, { expanded: state.tocExpanded, buttons: columns, stateRef })
  );
};
const EditorKernel = (props) => {
  const { content, assistant, decorator, serializer, deserializer, allowUploadFile, allowDownloadFile, allowDownloadImage, maxMode, zenMode } = props;
  const wrapperRef = reactExports.useRef(null);
  const { fire } = usePlaygroundEventBus();
  const { replace } = useThrottler();
  const postPaintActions = reactExports.useRef([]);
  const stateRef = reactExports.useRef(firstPaint({
    content,
    serializer,
    deserializer,
    assistant,
    decorator,
    replace,
    writeContentToState: (content2) => {
      stateRef.current.content = content2;
      (async () => {
        fire(PlaygroundEventTypes.REPAINT);
      })();
    },
    onContentChanged: (content2) => {
      fire(PlaygroundEventTypes.CONTENT_CHANGED, content2);
    }
  }));
  useForceRepaint({ content, serializer, deserializer, stateRef, assistant, decorator });
  const forceUpdate = useForceUpdate();
  const [afterPositionComputed] = reactExports.useState(() => () => {
    stateRef.current.diagramStatus = EditorKernelDiagramStatus.IN_SERVICE;
    forceUpdate();
  });
  if (VUtils.isNotBlank(stateRef.current.message)) {
    return React.createElement(
      EditorWrapper,
      { "data-diagram-status": EditorKernelDiagramStatus.IGNORED },
      React.createElement(ParseError, null, stateRef.current.message)
    );
  } else if (VUtils.isBlank(stateRef.current.content)) {
    return React.createElement(
      EditorWrapper,
      { "data-diagram-status": EditorKernelDiagramStatus.IGNORED },
      React.createElement(ParseError, null, Labels.NoContent)
    );
  } else if (stateRef.current.def == null) {
    return React.createElement(
      EditorWrapper,
      { "data-diagram-status": EditorKernelDiagramStatus.IGNORED },
      React.createElement(ParseError, null, Labels.NoDefParsed)
    );
  }
  try {
    return React.createElement(
      React.Fragment,
      null,
      React.createElement(
        EditorWrapper,
        { "data-diagram-locked": stateRef.current.engine.getModel().isLocked(), ref: wrapperRef },
        React.createElement(
          ErrorBoundary,
          { content },
          React.createElement(BackendCanvas, { stateRef, postPaintActions, assistant, decorator, afterPositionComputed }),
          React.createElement(FrontendCanvas, { stateRef, postPaintActions })
        )
      ),
      React.createElement(Toolbar, { stateRef, serializer, allowUploadFile, allowDownloadFile, allowDownloadImage, maxMode, zenMode })
    );
  } catch (error) {
    return React.createElement(
      EditorWrapper,
      { "data-diagram-status": EditorKernelDiagramStatus.IGNORED, ref: wrapperRef },
      React.createElement(ParseError, null, error.message || Labels.ParseError)
    );
  }
};
const Editor = (props) => {
  return React.createElement(EditorKernel, { ...props });
};
const StepDefsReconfigurers = [];
const registerStepDefsReconfigurers = (...configurers) => {
  (configurers || []).forEach((configurer) => {
    if (!StepDefsReconfigurers.includes(configurer)) {
      StepDefsReconfigurers.push(configurer);
    }
  });
};
const reconfigureStepDefProperties = (properties, model) => {
  for (const reconfigurer of StepDefsReconfigurers) {
    const reconfigured = reconfigurer.properties(properties, model);
    if (reconfigured != null) {
      return reconfigured;
    }
  }
  return properties;
};
const reconfigureStepDefPrepare = (prepare2, model) => {
  for (const reconfigurer of StepDefsReconfigurers) {
    const reconfigured = reconfigurer.prepare(prepare2, model);
    if (reconfigured != null) {
      return reconfigured;
    }
  }
  return prepare2;
};
const reconfigureStepDefConfirm = (confirm2, model) => {
  for (const reconfigurer of StepDefsReconfigurers) {
    const reconfigured = reconfigurer.confirm(confirm2, model);
    if (reconfigured != null) {
      return reconfigured;
    }
  }
  return confirm2;
};
const reconfigureStepDefDiscard = (discard2, model) => {
  for (const reconfigurer of StepDefsReconfigurers) {
    if (reconfigurer.discard != null) {
      const reconfigured = reconfigurer.discard(discard2, model);
      if (reconfigured != null) {
        return reconfigured;
      }
    }
  }
  return discard2;
};
const reconfigureStepDefOperators = (operators, model) => {
  return StepDefsReconfigurers.reduce((operators2, reconfigurer) => {
    var _a;
    return ((_a = reconfigurer.operators) == null ? void 0 : _a.call(reconfigurer, operators2, model)) ?? operators2;
  }, operators);
};
const Defs = {};
const AllStepDefsAsArray = () => Object.values(Defs);
const registerStepDef = (def) => {
  Defs[def.use] = def;
  registerStepDefsFolders(def.folder);
  if (def.reconfigurer != null) {
    registerStepDefsReconfigurers(def.reconfigurer);
  }
  if (def.firstSubStepPortContainerFind != null) {
    registerFirstSubStepPortContainerFinds(def.firstSubStepPortContainerFind);
  }
};
const findStepDef = (use) => {
  return Defs[use];
};
var MergeType;
(function(MergeType2) {
  MergeType2[MergeType2["REPLACE"] = 0] = "REPLACE";
  MergeType2[MergeType2["UNBOX"] = 1] = "UNBOX";
  MergeType2[MergeType2["MERGE_AS_PROPERTY"] = 2] = "MERGE_AS_PROPERTY";
})(MergeType || (MergeType = {}));
var ErrorHandleType;
(function(ErrorHandleType2) {
  ErrorHandleType2[ErrorHandleType2["NONE"] = 0] = "NONE";
  ErrorHandleType2[ErrorHandleType2["SNIPPET"] = 1] = "SNIPPET";
  ErrorHandleType2[ErrorHandleType2["STEPS"] = 2] = "STEPS";
})(ErrorHandleType || (ErrorHandleType = {}));
const survivalAfterConfirm$1 = (def) => {
  const defs = findStepDef(def.use);
  const survival = (holder, fullQualifiedProperty, property) => {
    const data = holder[property];
    if (data == null) {
      delete holder[property];
    } else if (typeof data === "string" && VUtils.isBlank(data)) {
      delete holder[property];
    } else if (!defs.survivalAfterConfirm(def, fullQualifiedProperty)) {
      delete holder[property];
    } else if (VUtils.isPrimitive(data))
      ;
    else if (defs.survivalAfterConfirm(def, `${fullQualifiedProperty}.*`))
      ;
    else if (Array.isArray(data)) {
      const each = (data2) => {
        data2.forEach((item) => {
          if (item == null || VUtils.isPrimitive(item))
            ;
          else if (Array.isArray(item)) {
            each(item);
          } else {
            Object.keys(item).forEach((key) => survival(item, `${fullQualifiedProperty}.${key}`, key));
          }
        });
      };
      each(data);
    } else {
      Object.keys(data).forEach((key) => survival(data, `${fullQualifiedProperty}.${key}`, key));
    }
  };
  return survival;
};
const createConfirmErrorHandling = (model, def, assistant) => {
  return (name, use) => {
    var _a;
    def.errorHandles = def.errorHandles ?? {};
    if (use === ErrorHandleType.STEPS) {
      if (def.errorHandles[name] == null) {
        def.errorHandles[name] = [assistant.createDefaultStep()];
      } else if (Array.isArray(def.errorHandles[name])) {
        if (def.errorHandles[name].length === 0) {
          def.errorHandles[name] = [assistant.createDefaultStep()];
        }
      } else {
        def.errorHandles[name] = [assistant.createDefaultStep()];
      }
    } else if (use === ErrorHandleType.SNIPPET) {
      def.errorHandles[name] = (_a = model.errorHandles) == null ? void 0 : _a[name];
    } else {
      delete def.errorHandles[name];
    }
  };
};
const confirm$1 = (model, def, file, options, and) => {
  var _a, _b, _c, _d, _e, _f, _g;
  let resultOfAnd;
  if (and == null) {
    resultOfAnd = true;
  } else {
    resultOfAnd = and(model, def, file, options);
  }
  let commitOfAnd;
  if (Array.isArray(resultOfAnd)) {
    return resultOfAnd;
  } else if (resultOfAnd === true) {
    commitOfAnd = VUtils.noop;
  } else {
    commitOfAnd = resultOfAnd;
  }
  def.name = model.name;
  def.use = model.use;
  if ((_a = model.temporary) == null ? void 0 : _a.fromInputAsIs) {
    delete def.fromInput;
  } else {
    def.fromInput = model.fromInput;
  }
  if ((_b = model.temporary) == null ? void 0 : _b.toOutputAsIs) {
    delete def.toOutput;
  } else {
    def.toOutput = model.toOutput;
  }
  switch ((_c = model.temporary) == null ? void 0 : _c.mergeType) {
    case MergeType.MERGE_AS_PROPERTY:
      def.merge = model.merge;
      break;
    case MergeType.UNBOX:
      def.merge = true;
      break;
    case MergeType.REPLACE:
    default:
      delete def.merge;
      break;
  }
  const confirmErrorHandling = createConfirmErrorHandling(model, def, options.assistant);
  confirmErrorHandling("catchable", (_d = model.temporary) == null ? void 0 : _d.useErrorHandlesForCatchable);
  confirmErrorHandling("uncatchable", (_e = model.temporary) == null ? void 0 : _e.useErrorHandlesForUncatchable);
  confirmErrorHandling("exposed", (_f = model.temporary) == null ? void 0 : _f.useErrorHandlesForExposed);
  confirmErrorHandling("any", (_g = model.temporary) == null ? void 0 : _g.useErrorHandlesForAny);
  if (Object.keys(def.errorHandles ?? {}).length === 0) {
    delete def.errorHandles;
  }
  commitOfAnd();
  const survival = survivalAfterConfirm$1(def);
  Object.keys(def).forEach((key) => survival(def, key, key));
  const diagramDef = def;
  if (Object.keys(diagramDef.$diagram ?? {}).length === 0) {
    delete diagramDef.$diagram;
  }
  options.handlers.onChange();
  return true;
};
const confirmSetsLikePipelineStep = (def, options) => {
  var _a;
  if (def.steps != null) {
    return;
  }
  const mightBeRoutes = def;
  if (mightBeRoutes.routes != null) {
    def.steps = ((_a = mightBeRoutes.routes[0]) == null ? void 0 : _a.steps) ?? [options.assistant.createDefaultStep()];
  } else {
    def.steps = [options.assistant.createDefaultStep()];
  }
};
const confirmConditionalPipelineStep = (def, options) => {
  var _a;
  confirmSetsLikePipelineStep(def, options);
  const mightBeRoutes = def;
  if (mightBeRoutes.routes != null) {
    def.check = (_a = mightBeRoutes.routes[0]) == null ? void 0 : _a.check;
  }
};
const confirmRoutesPipelineStep = (def, options) => {
  if (def.routes != null) {
    return;
  }
  const mightBeSetsLike = def;
  if (mightBeSetsLike.steps != null) {
    def.routes = [{ steps: mightBeSetsLike.steps ?? [options.assistant.createDefaultStep()] }];
  } else {
    def.routes = [{ steps: [options.assistant.createDefaultStep()] }];
  }
  const mightBeConditional = def;
  def.routes[0].check = mightBeConditional.check;
};
const StandardLinkSelectionKeyFrames = We`
    from {
        stroke-dashoffset: ${PlaygroundCssVars.LINK_SELECTED_STROKE_DASHOFFSET};
    }
    to {
        stroke-dashoffset: 0;
    }
`;
const StandardLinkSegmentPath = qe.path.attrs(({ selected, dasharray, selectedDasharray }) => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground-link-segment-path",
    style: {
      "--selected-stroke-dasharray": selected ? selectedDasharray || PlaygroundCssVars.LINK_DEFAULT_SELECTED_STROKE_DASHARRAY : dasharray || void 0,
      "--selected-animation": selected ? "running" : "paused",
      "--selected-z-index": selected ? 1 : void 0
    }
  };
})`
    fill: none;
    pointer-events: auto;
    stroke-dasharray: var(--selected-stroke-dasharray);
    stroke-linecap: ${PlaygroundCssVars.LINK_STROKE_LINECAP};
    animation: ${StandardLinkSelectionKeyFrames} 1s linear infinite;
    animation-play-state: var(--selected-animation);
    z-index: var(--selected-z-index);
`;
const StandardLinkWidget = (props) => {
  const { link, engine, renderPoints: shouldRenderPoints, selected: onSelected } = props;
  const [selected, setSelected] = reactExports.useState(false);
  const refPaths = reactExports.useRef([]);
  reactExports.useEffect(() => {
    link.setRenderedPaths(refPaths.current.map((ref) => ref.current).filter(Boolean));
    return () => {
      link.setRenderedPaths([]);
    };
  }, [link]);
  const renderPoints = () => shouldRenderPoints ?? true;
  const generateRef = () => {
    const ref = reactExports.createRef();
    refPaths.current.push(ref);
    return ref;
  };
  const addPointToLink = (event, index) => {
    if (!event.shiftKey && !link.isLocked() && link.getPoints().length - 1 <= engine.getMaxNumberPointsPerLink()) {
      const position = engine.getRelativeMousePoint(event);
      const point = link.point(position.x, position.y, index);
      event.persist();
      event.stopPropagation();
      engine.getActionEventBus().fireAction({ event, model: point });
    }
  };
  const generatePoint = (point) => {
    return React.createElement(DefaultLinkPointWidget, { key: point.getID(), point, colorSelected: link.getOptions().selectedColor ?? "", color: link.getOptions().color });
  };
  const generateLink = (path, extraProps, id) => {
    return React.createElement(DefaultLinkSegmentWidget, { key: `link-${id}`, path, selected, diagramEngine: engine, factory: engine.getFactoryForLink(link), link, forwardRef: generateRef(), onSelection: setSelected, extras: extraProps });
  };
  const points = link.getPoints();
  const paths = [];
  refPaths.current = [];
  if (points.length === 2) {
    paths.push(generateLink(link.getSVGPath(), {
      onMouseDown: (event) => {
        onSelected == null ? void 0 : onSelected(event);
        addPointToLink(event, 1);
      }
    }, "0"));
    if (link.getTargetPort() == null) {
      paths.push(generatePoint(points[1]));
    }
  } else {
    for (let j = 0; j < points.length - 1; j++) {
      paths.push(generateLink(LinkWidget.generateLinePath(points[j], points[j + 1]), {
        "data-linkid": link.getID(),
        "data-point": j,
        onMouseDown: (event) => {
          onSelected == null ? void 0 : onSelected(event);
          addPointToLink(event, j + 1);
        }
      }, j));
    }
    if (renderPoints()) {
      for (let i = 1; i < points.length - 1; i++) {
        paths.push(generatePoint(points[i]));
      }
      if (link.getTargetPort() == null) {
        paths.push(generatePoint(points[points.length - 1]));
      }
    }
  }
  return React.createElement("g", { "data-default-link-test": link.getOptions().testName || "no-test-name" }, paths);
};
class StandardLinkFactory extends DefaultLinkFactory {
  constructor(type) {
    super(type);
  }
  generateReactWidget(event) {
    return React.createElement(StandardLinkWidget, { link: event.model, engine: this.engine });
  }
  generateLinkSegment(model, selected, path) {
    return React.createElement(StandardLinkSegmentPath, { "data-link-type": this.getLinkDataW(), selected, dasharray: this.getLinkSegmentDasharray(), selectedDasharray: this.getLinkSegmentSelectedDasharray(), stroke: selected ? model.getOptions().selectedColor : model.getOptions().color, strokeWidth: model.getOptions().width, d: path });
  }
  getLinkSegmentDasharray() {
    return PlaygroundCssVars.LINK_DEFAULT_STROKE_DASHARRAY;
  }
  getLinkSegmentSelectedDasharray() {
    return PlaygroundCssVars.LINK_DEFAULT_SELECTED_STROKE_DASHARRAY;
  }
}
class ToSubStepsLinkModel extends DefaultLinkModel {
  constructor(type, options) {
    super({ type, ...options ?? {} });
  }
  getSVGPath() {
    if (this.points.length == 2) {
      const sourceX = this.getFirstPoint().getX();
      const sourceY = this.getFirstPoint().getY();
      const targetX = this.getLastPoint().getX();
      const targetY = this.getLastPoint().getY();
      const centerX = this.computeCenterX(sourceX, targetX);
      const centerY = Math.min(sourceY, targetY) + Math.abs((sourceY - targetY) / 2);
      const radius = Math.min(DEFAULTS.diagram.linkArcRadius, Math.abs(sourceY - centerY));
      if (sourceY === targetY) {
        return `M ${sourceX} ${sourceY} L ${targetX} ${targetY}`;
      } else if (sourceY > targetY) {
        return [
          `M ${sourceX} ${sourceY}`,
          `L ${centerX - radius} ${sourceY}`,
          `A ${radius} ${radius} 0 0 0 ${centerX} ${sourceY - radius}`,
          `L ${centerX} ${targetY + radius}`,
          `A ${radius} ${radius} 0 0 1 ${centerX + radius} ${targetY}`,
          `L ${targetX} ${targetY}`
        ].join(" ");
      } else {
        return [
          `M ${sourceX} ${sourceY}`,
          `L ${centerX - radius} ${sourceY}`,
          `A ${radius} ${radius} 0 0 1 ${centerX} ${sourceY + radius}`,
          `L ${centerX} ${targetY - radius}`,
          `A ${radius} ${radius} 0 0 0 ${centerX + radius} ${targetY}`,
          `L ${targetX} ${targetY}`
        ].join(" ");
      }
    }
  }
  askPorts(node) {
    const { use } = node.step;
    const def = findStepDef(use);
    const ports = def.findSubPorts(node);
    const firstPort = ports[0];
    const linksOfFirstPort = Object.values(firstPort.getLinks());
    if (linksOfFirstPort.length === 0) {
      return { ports, hasStepsLink: false, stepsLinkCount: 0 };
    }
    const sourcePort = linksOfFirstPort[0].getSourcePort();
    if (!(sourcePort instanceof StepsPortModel)) {
      return { ports, hasStepsLink: false, stepsLinkCount: 0 };
    }
    return { ports, hasStepsLink: true, stepsLinkCount: linksOfFirstPort.length };
  }
  computeCenterX(sourceX, targetX) {
    const sourceNode = this.getSourcePort().getNode();
    const { ports, hasStepsLink, stepsLinkCount } = this.askPorts(sourceNode);
    const links = ports.map((port) => Object.values(port.getLinks())).flat();
    const minTargetX = links.map((link) => Math.max(link.getFirstPoint().getX(), link.getLastPoint().getX())).reduce((x1, x2) => Math.min(x1, x2));
    const absoluteCenterX = (minTargetX - Math.min(sourceX, targetX)) / 2;
    const nonStepsLinkCount = links.length - stepsLinkCount;
    const linkGutter = this.getGutterSize();
    const centerXStart = absoluteCenterX - linkGutter * (nonStepsLinkCount - 1) / 2;
    let myIndex = hasStepsLink ? links.indexOf(this) - stepsLinkCount : links.indexOf(this);
    if (myIndex < 0) {
      if (stepsLinkCount > 1 && nonStepsLinkCount > 0) {
        myIndex = -1;
      } else {
        myIndex = 0;
      }
    }
    return Math.min(sourceX, targetX) + centerXStart + (nonStepsLinkCount - myIndex - 1) * linkGutter;
  }
  getGutterSize() {
    return DEFAULTS.diagram.linkGutterSize;
  }
}
const _StepsLinkModel = class _StepsLinkModel extends ToSubStepsLinkModel {
  constructor(options) {
    super(_StepsLinkModel.TYPE, options);
  }
};
__publicField(_StepsLinkModel, "TYPE", "steps-link");
let StepsLinkModel = _StepsLinkModel;
class StepsLinkFactory extends StandardLinkFactory {
  constructor() {
    super(StepsLinkModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use StepsLinkFactory#generateModel.");
  }
  getLinkDataW() {
    return "o23-playground-steps-link";
  }
  getLinkSegmentDasharray() {
    return PlaygroundCssVars.LINK_STEPS_DASHARRAY;
  }
  getLinkSegmentSelectedDasharray() {
    return PlaygroundCssVars.LINK_STEPS_SELECTED_DASHARRAY;
  }
}
const _ErrorHandlesLinkModel = class _ErrorHandlesLinkModel extends ToSubStepsLinkModel {
  constructor(options) {
    super(_ErrorHandlesLinkModel.TYPE, { selectedColor: PlaygroundCssVars.LINK_ERROR_HANDLES_SELECTED_COLOR, ...options ?? {} });
    this.setColor(PlaygroundCssVars.LINK_ERROR_HANDLES_COLOR);
  }
};
__publicField(_ErrorHandlesLinkModel, "TYPE", "error-handles-link");
let ErrorHandlesLinkModel = _ErrorHandlesLinkModel;
class ErrorHandlesLinkFactory extends StandardLinkFactory {
  constructor() {
    super(ErrorHandlesLinkModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use ErrorHandlesLinkFactory#generateModel.");
  }
  getLinkDataW() {
    return "o23-playground-error-handles-link";
  }
  getLinkSegmentDasharray() {
    return PlaygroundCssVars.LINK_ERROR_HANDLES_DASHARRAY;
  }
  getLinkSegmentSelectedDasharray() {
    return PlaygroundCssVars.LINK_ERROR_HANDLES_SELECTED_DASHARRAY;
  }
}
const _LastSubStepJoinLinkModel = class _LastSubStepJoinLinkModel extends DefaultLinkModel {
  constructor() {
    super({ type: _LastSubStepJoinLinkModel.TYPE });
  }
  getSVGPath() {
    if (this.points.length == 2) {
      const sourceX = this.getFirstPoint().getX();
      const sourceY = this.getFirstPoint().getY();
      const targetX = this.getLastPoint().getX();
      const targetY = this.getLastPoint().getY();
      const radius = DEFAULTS.diagram.linkArcRadius;
      const { index, count } = this.getJoinIndex();
      if (index === count - 1) {
        return [
          `M ${sourceX} ${sourceY}`,
          `L ${sourceX} ${targetY - radius}`,
          `A ${radius} ${radius} 0 0 1 ${sourceX - radius} ${targetY}`,
          `L ${targetX} ${targetY}`
        ].join(" ");
      } else {
        const sinkingOffset = this.getSinkingOffset();
        const gutterSize = this.getGutterSize();
        const { firstX, firstY, secondX } = this.getTargetNodePositionBase();
        return [
          `M ${sourceX} ${sourceY}`,
          `L ${sourceX} ${sourceY + sinkingOffset - radius}`,
          `A ${radius} ${radius} 0 0 1 ${sourceX - radius} ${sourceY + sinkingOffset}`,
          `L ${firstX + gutterSize * (index + 1) + radius} ${sourceY + sinkingOffset}`,
          `A ${radius} ${radius} 0 0 0 ${firstX + gutterSize * (index + 1)} ${sourceY + sinkingOffset + radius}`,
          `L ${firstX + gutterSize * (index + 1)} ${firstY - gutterSize * (index + 1) - radius}`,
          `A ${radius} ${radius} 0 0 0 ${firstX + gutterSize * (index + 1) + radius} ${firstY - gutterSize * (index + 1)}`,
          `L ${secondX + gutterSize * (index + 1) - radius} ${firstY - gutterSize * (index + 1)}`,
          `A ${radius} ${radius} 0 0 1 ${secondX + gutterSize * (index + 1)} ${firstY - gutterSize * (index + 1) + radius}`,
          `L ${secondX + gutterSize * (index + 1)} ${targetY - radius}`,
          `A ${radius} ${radius} 0 0 1 ${secondX + gutterSize * (index + 1) - radius} ${targetY}`,
          `L ${targetX} ${targetY}`
        ].join(" ");
      }
    }
  }
  getJoinIndex() {
    const sourceY = this.getFirstPoint().getY();
    let index = 0;
    const links = Object.values(this.getTargetPort().getLinks());
    links.forEach((link) => {
      if (link.getFirstPoint().getY() < sourceY) {
        index++;
      }
    });
    return { index, count: links.length };
  }
  getSinkingOffset() {
    var _a, _b;
    const node = this.getSourcePort().getNode();
    const nodeBottom = node.getY() + node.height;
    const previousNode = [
      ...Object.values(((_a = node.getPort(PreviousStepPortModel.NAME)) == null ? void 0 : _a.getLinks()) ?? {}),
      ...Object.values(((_b = node.getPort(FirstSubStepPortModel.NAME)) == null ? void 0 : _b.getLinks()) ?? {})
    ][0].getSourcePort().getNode();
    const previousNodeBottom = previousNode.getY() + previousNode.height;
    if (nodeBottom <= previousNodeBottom) {
      return previousNodeBottom - nodeBottom + DEFAULTS.diagram.linkJoinEndSinkingOffset;
    } else {
      return DEFAULTS.diagram.linkJoinEndSinkingOffset;
    }
  }
  getGutterSize() {
    return DEFAULTS.diagram.linkJoinEndGutterSize;
  }
  getTargetNodePositionBase() {
    const node = this.getTargetPort().getNode();
    const previousPort = node.getPort(PreviousStepPortModel.NAME);
    const firstX = Object.values(previousPort.getLinks())[0].getLastPoint().getX();
    const firstY = node.getY();
    const secondX = node.getX() + node.width;
    return { firstX, firstY, secondX };
  }
};
__publicField(_LastSubStepJoinLinkModel, "TYPE", "last-sub-step-join-link");
let LastSubStepJoinLinkModel = _LastSubStepJoinLinkModel;
class LastSubStepJoinLinkFactory extends StandardLinkFactory {
  constructor() {
    super(LastSubStepJoinLinkModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use LastSubStepJoinLinkFactory#generateModel.");
  }
  getLinkDataW() {
    return "o23-playground-last-sub-step-join-link";
  }
  getLinkSegmentDasharray() {
    return PlaygroundCssVars.LINK_LAST_SUB_STEP_JOIN_DASHARRAY;
  }
  getLinkSegmentSelectedDasharray() {
    return PlaygroundCssVars.LINK_LAST_SUB_STEP_JOIN_SELECTED_DASHARRAY;
  }
}
const _EndOfMeJoinLinkModel = class _EndOfMeJoinLinkModel extends DefaultLinkModel {
  constructor() {
    super({ type: _EndOfMeJoinLinkModel.TYPE });
  }
  getSVGPath() {
    if (this.points.length == 2) {
      const sourceX = this.getFirstPoint().getX();
      const sourceY = this.getFirstPoint().getY();
      const targetX = this.getLastPoint().getX();
      const targetY = this.getLastPoint().getY();
      return `M ${sourceX} ${sourceY} L ${targetX} ${targetY}`;
    }
  }
};
__publicField(_EndOfMeJoinLinkModel, "TYPE", "end-of-me-join-link");
let EndOfMeJoinLinkModel = _EndOfMeJoinLinkModel;
class EndOfMeJoinLinkFactory extends StandardLinkFactory {
  constructor() {
    super(EndOfMeJoinLinkModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use EndOfMeJoinLinkFactory#generateModel.");
  }
  getLinkDataW() {
    return "o23-playground-end-of-me-join-link";
  }
  getLinkSegmentDasharray() {
    return PlaygroundCssVars.LINK_END_OF_ME_JOIN_DASHARRAY;
  }
  getLinkSegmentSelectedDasharray() {
    return PlaygroundCssVars.LINK_END_OF_ME_JOIN_SELECTED_DASHARRAY;
  }
}
const useSubNodesFold = (options) => {
  var _a;
  const { model, property } = options;
  const forceUpdate = useForceUpdate();
  const def = model.step;
  const onClicked = () => {
    var _a2;
    if (def.$diagram == null) {
      def.$diagram = { [property]: ((_a2 = def.$diagram) == null ? void 0 : _a2[property]) ?? false };
    }
    def.$diagram[property] = !def.$diagram[property];
    forceUpdate();
    model.handlers.onChange();
  };
  return {
    fold: ((_a = def.$diagram) == null ? void 0 : _a[property]) ?? false,
    switchFold: onClicked
  };
};
const SubNodesPortContainer = qe.div`
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    top: calc(-1 * ${PlaygroundCssVars.NODE_PORT_BORDER_WIDTH});
    right: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} / -2 - ${PlaygroundCssVars.NODE_BORDER_WIDTH});
    width: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} / 2);
    height: ${PlaygroundCssVars.NODE_PORT_HEIGHT};
    background-color: var(--background-color);
    border: var(--border);
    border-top-right-radius: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} / 2);
    border-bottom-right-radius: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} / 2);
    transition: width ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION}, right ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

    &[data-fold=true], &:hover {
        right: calc(0px - ${PlaygroundCssVars.NODE_PORT_HEIGHT} - ${PlaygroundCssVars.NODE_BORDER_WIDTH});
        width: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT});

        > svg:first-child {
            width: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} / 2);
            opacity: 1;
        }
    }

    > svg:first-child {
        height: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} / 2);
        width: 0;
        opacity: 0;
        color: var(--icon-color);
        overflow: hidden;
        transition: width ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION}, opacity ${CssVars.TRANSITION_DURATION} ${CssVars.TRANSITION_TIMING_FUNCTION};

        &[data-icon=o23-fold-sub-nodes] {
            margin-left: -4px;
        }

        &[data-icon=o23-unfold-sub-nodes] {
            margin-left: -3px;
        }
    }

    > div:last-child {
        position: absolute;
        top: 0;
        left: calc(${PlaygroundCssVars.NODE_PORT_HEIGHT} / 2);
        width: 0;
        height: 100%;
    }
`;
const _StepsPortModel = class _StepsPortModel extends OutgoingPortModel {
  constructor(name) {
    super(_StepsPortModel.TYPE, name, PortModelAlignment.RIGHT);
  }
  createDefaultLinkModel(extras) {
    return new StepsLinkModel(this.toLinkModelOptions(extras));
  }
};
__publicField(_StepsPortModel, "TYPE", "steps-port");
let StepsPortModel = _StepsPortModel;
class StepsPortFactory extends AbstractModelFactory {
  constructor() {
    super(StepsPortModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use StepsPortFactory#generateModel.");
  }
}
const StepsPortContainer = qe(SubNodesPortContainer).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-steps-port",
  style: {
    "--background-color": PlaygroundCssVars.NODE_PORT_STEPS_BACKGROUND,
    "--border": PlaygroundCssVars.NODE_PORT_STEPS_BORDER,
    "--icon-color": PlaygroundCssVars.NODE_PORT_STEPS_ICON_COLOR
  }
})``;
const StepsPortWidget = (props) => {
  const { port, engine } = props;
  const model = port.getNode();
  const { fold, switchFold } = useSubNodesFold({ model, property: "$foldSubSteps" });
  return React.createElement(
    StepsPortContainer,
    { "data-fold": fold, onClick: switchFold },
    fold ? React.createElement(UnfoldSubNodes, null) : React.createElement(FoldSubNodes, null),
    React.createElement(PortWidget, { port, engine })
  );
};
const _FirstSubStepPortModel = class _FirstSubStepPortModel extends IncomingPortModel {
  constructor() {
    super(_FirstSubStepPortModel.TYPE, _FirstSubStepPortModel.NAME, PortModelAlignment.LEFT);
  }
};
__publicField(_FirstSubStepPortModel, "TYPE", "first-sub-step-port");
__publicField(_FirstSubStepPortModel, "NAME", "first-sub-step");
let FirstSubStepPortModel = _FirstSubStepPortModel;
class FirstSubStepPortFactory extends AbstractModelFactory {
  constructor() {
    super(FirstSubStepPortModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use FirstSubStepPortFactory#generateModel.");
  }
}
const FirstSubStepPortContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-first-sub-step-port" })`
    display: flex;
    position: absolute;
    top: calc(${CssVars.INPUT_HEIGHT} / 2 - ${PlaygroundCssVars.NODE_PORT_RADIUS});
    left: calc(-1 * (${PlaygroundCssVars.NODE_PORT_RADIUS} + ${PlaygroundCssVars.NODE_BORDER_WIDTH}));
    width: ${PlaygroundCssVars.NODE_PORT_RADIUS};
    height: calc(${PlaygroundCssVars.NODE_PORT_RADIUS} * 2);
    background-color: ${PlaygroundCssVars.NODE_PORT_FIRST_SUB_STEP_BACKGROUND};
    border: ${PlaygroundCssVars.NODE_PORT_FIRST_SUB_STEP_BORDER};
    border-top-left-radius: ${PlaygroundCssVars.NODE_PORT_RADIUS};
    border-bottom-left-radius: ${PlaygroundCssVars.NODE_PORT_RADIUS};

    > div:first-child {
        position: absolute;
        top: 0;
        left: 0;
        width: 0;
        height: 100%;
    }
`;
const FirstSubStepPortForRuleCheckContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-route-test-port" })`
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    top: calc(${CssVars.INPUT_HEIGHT} / 2 - ${PlaygroundCssVars.NODE_PORT_ROUTE_TEST_RADIUS});
    left: calc(-1 * (${PlaygroundCssVars.NODE_PORT_ROUTE_TEST_RADIUS} * 2 + ${PlaygroundCssVars.NODE_BORDER_WIDTH}));
    width: calc(${PlaygroundCssVars.NODE_PORT_ROUTE_TEST_RADIUS} * 2);
    height: calc(${PlaygroundCssVars.NODE_PORT_ROUTE_TEST_RADIUS} * 2);
    background-color: ${PlaygroundCssVars.NODE_PORT_ROUTE_TEST_BACKGROUND};
    border: ${PlaygroundCssVars.NODE_PORT_ROUTE_TEST_BORDER};
    border-top-left-radius: ${PlaygroundCssVars.NODE_PORT_ROUTE_TEST_RADIUS};
    border-bottom-left-radius: ${PlaygroundCssVars.NODE_PORT_ROUTE_TEST_RADIUS};
    padding-left: calc(${PlaygroundCssVars.NODE_PORT_ROUTE_TEST_RADIUS} * 0.3);

    > svg {
        width: calc(${PlaygroundCssVars.NODE_PORT_ROUTE_TEST_RADIUS} * 1.4);
        height: calc(${PlaygroundCssVars.NODE_PORT_ROUTE_TEST_RADIUS} * 1.4);
        color: ${PlaygroundCssVars.NODE_PORT_ROUTE_TEST_COLOR};
    }

    > div:last-child {
        position: absolute;
        top: 0;
        left: 0;
        width: 0;
        height: 100%;
    }
`;
const FirstSubStepPortForRouteTest = (props) => {
  const { children } = props;
  return React.createElement(
    FirstSubStepPortForRuleCheckContainer,
    null,
    React.createElement(RouteTest, null),
    children
  );
};
const FirstSubStepPortForOtherwiseContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-otherwise-port" })`
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    top: calc(${CssVars.INPUT_HEIGHT} / 2 - ${PlaygroundCssVars.NODE_PORT_OTHERWISE_RADIUS});
    left: calc(-1 * (${PlaygroundCssVars.NODE_PORT_OTHERWISE_RADIUS} * 2 + ${PlaygroundCssVars.NODE_BORDER_WIDTH}));
    width: calc(${PlaygroundCssVars.NODE_PORT_OTHERWISE_RADIUS} * 2);
    height: calc(${PlaygroundCssVars.NODE_PORT_OTHERWISE_RADIUS} * 2);
    background-color: ${PlaygroundCssVars.NODE_PORT_OTHERWISE_BACKGROUND};
    border: ${PlaygroundCssVars.NODE_PORT_OTHERWISE_BORDER};
    border-top-left-radius: ${PlaygroundCssVars.NODE_PORT_OTHERWISE_RADIUS};
    border-bottom-left-radius: ${PlaygroundCssVars.NODE_PORT_OTHERWISE_RADIUS};
    padding-left: calc(${PlaygroundCssVars.NODE_PORT_OTHERWISE_RADIUS} * 0.3);

    > svg {
        width: calc(${PlaygroundCssVars.NODE_PORT_OTHERWISE_RADIUS} * 1.3);
        height: calc(${PlaygroundCssVars.NODE_PORT_OTHERWISE_RADIUS} * 1.3);
        color: ${PlaygroundCssVars.NODE_PORT_OTHERWISE_COLOR};
    }

    > div:last-child {
        position: absolute;
        top: 0;
        left: 0;
        width: 0;
        height: 100%;
    }
`;
const FirstSubStepPortForOtherwise = (props) => {
  const { children } = props;
  return React.createElement(
    FirstSubStepPortForOtherwiseContainer,
    null,
    React.createElement(Otherwise, null),
    children
  );
};
const FirstSubStepPortContainerFinds = [];
const registerFirstSubStepPortContainerFinds = (...finds) => {
  (finds || []).forEach((find) => {
    if (!FirstSubStepPortContainerFinds.includes(find)) {
      FirstSubStepPortContainerFinds.push(find);
    }
  });
};
const findFirstSubStepPortContainer = (step, parent) => {
  for (const find of FirstSubStepPortContainerFinds) {
    const C = find(step, parent);
    if (C != null) {
      return C;
    }
  }
  return FirstSubStepPortContainer;
};
const FirstSubStepPortWidget = (props) => {
  const { port, engine } = props;
  const C = findFirstSubStepPortContainer(port.getParent().step, Object.values(port.getLinks())[0].getSourcePort().getNode().step);
  return React.createElement(
    C,
    null,
    React.createElement(PortWidget, { port, engine })
  );
};
const _LastSubStepJoinPortModel = class _LastSubStepJoinPortModel extends IncomingPortModel {
  constructor() {
    super(_LastSubStepJoinPortModel.TYPE, _LastSubStepJoinPortModel.NAME, PortModelAlignment.RIGHT);
  }
  createDefaultLinkModel() {
    return new LastSubStepJoinLinkModel();
  }
};
__publicField(_LastSubStepJoinPortModel, "TYPE", "last-sub-step-join-port");
__publicField(_LastSubStepJoinPortModel, "NAME", "last-sub-step-join");
let LastSubStepJoinPortModel = _LastSubStepJoinPortModel;
class LastSubStepJoinPortFactory extends AbstractModelFactory {
  constructor() {
    super(LastSubStepJoinPortModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use LastSubStepJoinPortFactory#generateModel.");
  }
}
const LastSubStepJoinPortContainer = qe.div.attrs({ [DOM_KEY_WIDGET]: "o23-playground-last-sub-step-join-port" })`
    display: flex;
    position: absolute;
    top: calc(50% - ${PlaygroundCssVars.NODE_PORT_RADIUS});
    right: calc(-1 * ${PlaygroundCssVars.NODE_PORT_RADIUS} - ${PlaygroundCssVars.NODE_BORDER_WIDTH});
    width: ${PlaygroundCssVars.NODE_PORT_RADIUS};
    height: calc(${PlaygroundCssVars.NODE_PORT_RADIUS} * 2);
    background-color: ${PlaygroundCssVars.NODE_PORT_LAST_SUB_STEP_JOIN_BACKGROUND};
    border: ${PlaygroundCssVars.NODE_PORT_LAST_SUB_STEP_JOIN_BORDER};
    border-top-right-radius: ${PlaygroundCssVars.NODE_PORT_RADIUS};
    border-bottom-right-radius: ${PlaygroundCssVars.NODE_PORT_RADIUS};

    > div:first-child {
        position: absolute;
        top: 0;
        right: 0;
        width: 0;
        height: 100%;
    }
`;
const LastSubStepJoinPortWidget = (props) => {
  const { port, engine } = props;
  return React.createElement(
    LastSubStepJoinPortContainer,
    null,
    React.createElement(PortWidget, { port, engine })
  );
};
class ErrorHandlesPortModel extends OutgoingPortModel {
  constructor(type, name, alignment) {
    super(type, name, alignment);
  }
}
const _CatchableErrorHandlePortModel = class _CatchableErrorHandlePortModel extends ErrorHandlesPortModel {
  constructor() {
    super(_CatchableErrorHandlePortModel.TYPE, _CatchableErrorHandlePortModel.NAME, PortModelAlignment.RIGHT);
  }
  createDefaultLinkModel(extras) {
    return new ErrorHandlesLinkModel(this.toLinkModelOptions(extras));
  }
};
__publicField(_CatchableErrorHandlePortModel, "TYPE", "catchable-error-handle-port");
__publicField(_CatchableErrorHandlePortModel, "NAME", "catchable-error-handle");
let CatchableErrorHandlePortModel = _CatchableErrorHandlePortModel;
class CatchableErrorHandlePortFactory extends AbstractModelFactory {
  constructor() {
    super(CatchableErrorHandlePortModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use CatchableErrorHandlePortFactory#generateModel.");
  }
}
const CatchableErrorHandlePortContainer = qe(SubNodesPortContainer).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-catchable-error-port",
  style: {
    "--background-color": PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_BACKGROUND,
    "--border": PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_BORDER,
    "--icon-color": PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_ICON_COLOR
  }
})``;
const CatchableErrorHandlePortWidget = (props) => {
  const { port, engine } = props;
  const model = port.getNode();
  const { fold, switchFold } = useSubNodesFold({ model, property: "$foldCatchable" });
  return React.createElement(
    CatchableErrorHandlePortContainer,
    { "data-fold": fold, onClick: switchFold },
    fold ? React.createElement(UnfoldSubNodes, null) : React.createElement(FoldSubNodes, null),
    React.createElement(PortWidget, { port, engine })
  );
};
const _UncatchableErrorHandlePortModel = class _UncatchableErrorHandlePortModel extends ErrorHandlesPortModel {
  constructor() {
    super(_UncatchableErrorHandlePortModel.TYPE, _UncatchableErrorHandlePortModel.NAME, PortModelAlignment.RIGHT);
  }
  createDefaultLinkModel(extras) {
    return new ErrorHandlesLinkModel(this.toLinkModelOptions(extras));
  }
};
__publicField(_UncatchableErrorHandlePortModel, "TYPE", "uncatchable-error-handle-port");
__publicField(_UncatchableErrorHandlePortModel, "NAME", "uncatchable-error-handle");
let UncatchableErrorHandlePortModel = _UncatchableErrorHandlePortModel;
class UncatchableErrorHandlePortFactory extends AbstractModelFactory {
  constructor() {
    super(UncatchableErrorHandlePortModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use UncatchableErrorHandlePortFactory#generateModel.");
  }
}
const UncatchableErrorHandlePortContainer = qe(SubNodesPortContainer).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-uncatchable-error-port",
  style: {
    "--background-color": PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_BACKGROUND,
    "--border": PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_BORDER,
    "--icon-color": PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_ICON_COLOR
  }
})``;
const UncatchableErrorHandlePortWidget = (props) => {
  const { port, engine } = props;
  const model = port.getNode();
  const { fold, switchFold } = useSubNodesFold({ model, property: "$foldUncatchable" });
  return React.createElement(
    UncatchableErrorHandlePortContainer,
    { "data-fold": fold, onClick: switchFold },
    fold ? React.createElement(UnfoldSubNodes, null) : React.createElement(FoldSubNodes, null),
    React.createElement(PortWidget, { port, engine })
  );
};
const _ExposedErrorHandlePortModel = class _ExposedErrorHandlePortModel extends ErrorHandlesPortModel {
  constructor() {
    super(_ExposedErrorHandlePortModel.TYPE, _ExposedErrorHandlePortModel.NAME, PortModelAlignment.RIGHT);
  }
  createDefaultLinkModel(extras) {
    return new ErrorHandlesLinkModel(this.toLinkModelOptions(extras));
  }
};
__publicField(_ExposedErrorHandlePortModel, "TYPE", "exposed-error-handle-port");
__publicField(_ExposedErrorHandlePortModel, "NAME", "exposed-error-handle");
let ExposedErrorHandlePortModel = _ExposedErrorHandlePortModel;
class ExposedErrorHandlePortFactory extends AbstractModelFactory {
  constructor() {
    super(ExposedErrorHandlePortModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use ExposedErrorHandlePortFactory#generateModel.");
  }
}
const ExposedErrorHandlePortContainer = qe(SubNodesPortContainer).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-exposed-error-port",
  style: {
    "--background-color": PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_BACKGROUND,
    "--border": PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_BORDER,
    "--icon-color": PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_ICON_COLOR
  }
})``;
const ExposedErrorHandlePortWidget = (props) => {
  const { port, engine } = props;
  const model = port.getNode();
  const { fold, switchFold } = useSubNodesFold({ model, property: "$foldExposed" });
  return React.createElement(
    ExposedErrorHandlePortContainer,
    { "data-fold": fold, onClick: switchFold },
    fold ? React.createElement(UnfoldSubNodes, null) : React.createElement(FoldSubNodes, null),
    React.createElement(PortWidget, { port, engine })
  );
};
const _AnyErrorHandlePortModel = class _AnyErrorHandlePortModel extends ErrorHandlesPortModel {
  constructor() {
    super(_AnyErrorHandlePortModel.TYPE, _AnyErrorHandlePortModel.NAME, PortModelAlignment.RIGHT);
  }
  createDefaultLinkModel(extras) {
    return new ErrorHandlesLinkModel(this.toLinkModelOptions(extras));
  }
};
__publicField(_AnyErrorHandlePortModel, "TYPE", "any-error-handle-port");
__publicField(_AnyErrorHandlePortModel, "NAME", "any-error-handle");
let AnyErrorHandlePortModel = _AnyErrorHandlePortModel;
class AnyErrorHandlePortFactory extends AbstractModelFactory {
  constructor() {
    super(AnyErrorHandlePortModel.TYPE);
  }
  generateModel(_event) {
    throw new Error("DO NOT use AnyErrorHandlePortFactory#generateModel.");
  }
}
const AnyErrorHandlePortContainer = qe(SubNodesPortContainer).attrs({
  [DOM_KEY_WIDGET]: "o23-playground-any-error-port",
  style: {
    "--background-color": PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_BACKGROUND,
    "--border": PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_BORDER,
    "--icon-color": PlaygroundCssVars.NODE_PORT_ERROR_HANDLES_ICON_COLOR
  }
})``;
const AnyErrorHandlePortWidget = (props) => {
  const { port, engine } = props;
  const model = port.getNode();
  const { fold, switchFold } = useSubNodesFold({ model, property: "$foldAny" });
  return React.createElement(
    AnyErrorHandlePortContainer,
    { "data-fold": fold, onClick: switchFold },
    fold ? React.createElement(UnfoldSubNodes, null) : React.createElement(FoldSubNodes, null),
    React.createElement(PortWidget, { port, engine })
  );
};
const PortFromInput = (props) => {
  const { step: def } = props;
  const { fromInput } = def;
  const exists = VUtils.isNotBlank(fromInput);
  if (!exists) {
    return null;
  }
  return React.createElement(PrePort, { label: Labels.StepFromInput, required: false, defined: true, all: true, allAsBoolean: true });
};
const StepsPortName = "steps";
const PortSteps = (props) => {
  const { node, engine } = props;
  const port = node.getPort(StepsPortName);
  if (port == null) {
    return null;
  }
  return React.createElement(
    PostPort,
    { label: Labels.StepSteps, required: false, defined: true, "data-role": "steps" },
    React.createElement(StepsPortWidget, { port, engine })
  );
};
const PortCatchableError = (props) => {
  const { node, engine, step: def } = props;
  const { errorHandles: { catchable } = {} } = def;
  const exists = catchable != null && Array.isArray(catchable);
  if (!exists) {
    return null;
  }
  const port = node.getPort(CatchableErrorHandlePortModel.NAME);
  if (port == null) {
    return null;
  }
  return React.createElement(
    PostPort,
    { label: Labels.StepHandleCatchableError, required: false, defined: true, "data-role": "catchable-error" },
    React.createElement(CatchableErrorHandlePortWidget, { port, engine })
  );
};
const PortUncatchableError = (props) => {
  const { node, engine, step: def } = props;
  const { errorHandles: { uncatchable } = {} } = def;
  const exists = uncatchable != null && Array.isArray(uncatchable);
  if (!exists) {
    return null;
  }
  const port = node.getPort(UncatchableErrorHandlePortModel.NAME);
  if (port == null) {
    return null;
  }
  return React.createElement(
    PostPort,
    { label: Labels.StepHandleUncatchableError, required: false, defined: true, "data-role": "uncatchable-error" },
    React.createElement(UncatchableErrorHandlePortWidget, { port, engine })
  );
};
const PortExposedError = (props) => {
  const { node, engine, step: def } = props;
  const { errorHandles: { exposed } = {} } = def;
  const exists = exposed != null && Array.isArray(exposed);
  if (!exists) {
    return null;
  }
  const port = node.getPort(ExposedErrorHandlePortModel.NAME);
  if (port == null) {
    return null;
  }
  return React.createElement(
    PostPort,
    { label: Labels.StepHandleExposedError, required: false, defined: true, "data-role": "exposed-error" },
    React.createElement(ExposedErrorHandlePortWidget, { port, engine })
  );
};
const PortAnyError = (props) => {
  const { node, engine, step: def } = props;
  const { errorHandles: { any } = {} } = def;
  const exists = any != null && Array.isArray(any);
  if (!exists) {
    return null;
  }
  const port = node.getPort(AnyErrorHandlePortModel.NAME);
  if (port == null) {
    return null;
  }
  return React.createElement(
    PostPort,
    { label: Labels.StepHandleAnyError, required: false, defined: true, "data-role": "any-error" },
    React.createElement(AnyErrorHandlePortWidget, { port, engine })
  );
};
const PortToOutput = (props) => {
  const { step: def } = props;
  const { toOutput } = def;
  const exists = VUtils.isNotBlank(toOutput);
  if (!exists) {
    return null;
  }
  return React.createElement(PostPort, { label: Labels.StepToOutput, required: false, defined: true, all: true, allAsBoolean: true });
};
const PortMerge = (props) => {
  const { step: def } = props;
  const { merge } = def;
  if (merge == null) {
    return React.createElement(PostPort, { label: Labels.StepMergeReplace, required: false, defined: true });
  } else if (merge === false) {
    return React.createElement(PostPort, { label: Labels.StepMergeReplace, required: false, defined: true });
  } else if (merge === true) {
    return React.createElement(PostPort, { label: Labels.StepMergeUnbox, required: false, defined: true });
  } else if (VUtils.isBlank(merge)) {
    return React.createElement(PostPort, { label: Labels.StepMergeReplace, required: false, defined: true });
  } else {
    return React.createElement(PostPort, { label: Labels.StepMergeAsProperty, required: false, defined: true, all: true, allAsGiven: merge.trim() });
  }
};
const setNodePosition = (node, position) => {
  const { x, y, appointed } = position();
  node.setPosition(x, y);
  node.setPositionAppointed(appointed);
};
const createStepNode = (step, file, options) => {
  const { type, subOf, handlers, assistant, decorator, linkPrevious, appendNode, appendLink } = options;
  const node = new StepNodeModel(step, file, { type, subOf, handlers, assistant, decorator });
  setNodePosition(node, () => askStepNodePosition(step));
  appendNode(node);
  const link = linkPrevious(node);
  appendLink(link);
  const endOfSub = DEFAULTS.createSubStepNodes(node, { appendNode, appendLink, handlers, assistant, decorator });
  return endOfSub == null ? node : endOfSub;
};
const askFirstLinkCreate = (model, createLink) => {
  return (options) => {
    const { node, findPortFromModel, createPortFromModel, askLinkExtras } = options;
    let sourcePort = findPortFromModel(model);
    if (sourcePort == null) {
      sourcePort = createPortFromModel(model);
      model.addPort(sourcePort);
    }
    const link = createLink(sourcePort, askLinkExtras);
    let targetPort = node.getPort(FirstSubStepPortModel.NAME);
    if (targetPort == null) {
      targetPort = new FirstSubStepPortModel();
      node.addPort(targetPort);
    }
    link.setTargetPort(targetPort);
    node.asFirstSubStep();
    return link;
  };
};
const askFirstLinkFromParentCreate = (model) => {
  return askFirstLinkCreate(model, (sourcePort, askLinkExtras) => {
    return sourcePort.createOutgoingLinkModel(askLinkExtras == null ? void 0 : askLinkExtras());
  });
};
const createSubNodesOfSingleRoute = (options) => {
  const { model, askSteps, options: { appendNode, appendLink, handlers, assistant, decorator }, findPortFromModel, createPortFromModel, askFirstLinkExtras } = options;
  const steps = askSteps();
  if (steps == null || steps.length === 0) {
    return void 0;
  }
  const createLinkFromModel = askFirstLinkFromParentCreate(model);
  const previousNode = model;
  return steps.reduce((previousNode2, step) => {
    const linkPrevious = previousNode2 === model ? (node) => createLinkFromModel({
      node,
      findPortFromModel,
      createPortFromModel,
      askLinkExtras: askFirstLinkExtras
    }) : (node) => previousNode2.next(node);
    return createStepNode(step, model.file, {
      type: StepNodeEntityType.NORMAL,
      handlers,
      assistant,
      decorator,
      subOf: model.step,
      previousNode: previousNode2,
      linkPrevious,
      appendNode,
      appendLink
    });
  }, previousNode);
};
const createNodeOperatorsForStep = (steps, removeAnyway, operators) => {
  operators = operators ?? {};
  operators.prependStep = (node, def) => {
    const index = steps.indexOf(def);
    if (index === 0) {
      steps.unshift(node.assistant.createDefaultStep());
    } else {
      steps.splice(index, 0, node.assistant.createDefaultStep());
    }
    node.handlers.onChange();
  };
  operators.appendStep = (node, def) => {
    const index = steps.indexOf(def);
    if (index === steps.length - 1) {
      steps.push(node.assistant.createDefaultStep());
    } else {
      steps.splice(index + 1, 0, node.assistant.createDefaultStep());
    }
    node.handlers.onChange();
  };
  if (removeAnyway || steps.length > 1) {
    operators.remove = (node, def) => {
      steps.splice(steps.indexOf(def), 1);
      node.handlers.onChange();
    };
  }
  return operators;
};
const createErrorHandlesSubNodes = (step, model, options) => {
  const errorHandles = step.errorHandles;
  if (errorHandles == null) {
    return void 0;
  }
  const createDefaultStep = options.assistant.createDefaultStep;
  const createAskSteps = (name, findPortFromModel, createPortFromModel) => {
    return () => {
      if (errorHandles[name] == null || !Array.isArray(errorHandles[name])) {
        return void 0;
      }
      const diagram = step.$diagram;
      const hideSteps = (diagram == null ? void 0 : diagram[`$fold${name.charAt(0).toUpperCase() + name.slice(1)}`]) ?? false;
      if (hideSteps) {
        let sourcePort = findPortFromModel(model);
        if (sourcePort == null) {
          sourcePort = createPortFromModel(model);
          model.addPort(sourcePort);
        }
        return void 0;
      }
      if (errorHandles[name].length === 0) {
        const defaultFirstStep = createDefaultStep();
        errorHandles[name].push(defaultFirstStep);
      }
      return errorHandles[name];
    };
  };
  return [
    {
      name: "catchable",
      findPortFromModel: (model2) => model2.getPort(CatchableErrorHandlePortModel.NAME),
      createPortFromModel: () => new CatchableErrorHandlePortModel()
    },
    {
      name: "exposed",
      findPortFromModel: (model2) => model2.getPort(ExposedErrorHandlePortModel.NAME),
      createPortFromModel: () => new ExposedErrorHandlePortModel()
    },
    {
      name: "uncatchable",
      findPortFromModel: (model2) => model2.getPort(UncatchableErrorHandlePortModel.NAME),
      createPortFromModel: () => new UncatchableErrorHandlePortModel()
    },
    {
      name: "any",
      findPortFromModel: (model2) => model2.getPort(AnyErrorHandlePortModel.NAME),
      createPortFromModel: () => new AnyErrorHandlePortModel()
    }
  ].map(({ name, findPortFromModel, createPortFromModel }) => {
    return {
      steps: createAskSteps(name, findPortFromModel, createPortFromModel),
      findPortFromModel,
      createPortFromModel
    };
  }).map(({ steps, ...rest }) => {
    return { steps: steps(), ...rest };
  }).filter(({ steps }) => {
    return steps != null && steps.length !== 0;
  }).map(({ steps, findPortFromModel, createPortFromModel }) => {
    return createSubNodesOfSingleRoute({
      model,
      options,
      askSteps: () => steps,
      findPortFromModel,
      createPortFromModel
    });
  });
};
const createSubNodes = (model, options) => {
  const step = model.step;
  return createErrorHandlesSubNodes(step, model, options);
};
const createSubNodesAndEndNode = (model, options) => {
  const { appendNode, appendLink, handlers, assistant, createSpecificSubNodes } = options;
  const step = model.step;
  const commonSubNodes = createSubNodes(model, options);
  const specificSubNodes = createSpecificSubNodes == null ? void 0 : createSpecificSubNodes(model, options);
  const subNodes = [...commonSubNodes ?? [], ...specificSubNodes ?? []];
  if (subNodes.length === 0) {
    return void 0;
  }
  const endNode = new JoinEndNodeModel(step, model.file, {
    type: StepNodeEntityType.JOIN_END,
    subOf: step,
    handlers,
    assistant
  });
  appendNode(endNode);
  subNodes.forEach((node) => {
    const link = endNode.endOfSub(node);
    appendLink(link);
  });
  const directLink = endNode.endOfMe(model);
  appendLink(directLink);
  return endNode;
};
const findStepsPortFromModel = (model) => model.getPort(StepsPortName);
const createStepsPortFromModel = (model) => {
  const portModel = new StepsPortModel(StepsPortName);
  model.addPort(portModel);
  return portModel;
};
const findOrCreateStepsPortFromModel = (model) => {
  const portModel = findStepsPortFromModel(model);
  if (portModel == null) {
    return createStepsPortFromModel(model);
  } else {
    return portModel;
  }
};
const shouldCreateSubNodes = (model) => {
  const step = model.step;
  const diagram = step.$diagram;
  const hideSteps = (diagram == null ? void 0 : diagram.$foldSubSteps) ?? false;
  if (hideSteps) {
    findOrCreateStepsPortFromModel(model);
    return false;
  }
  return true;
};
const guardSubSteps = (property) => {
  return (model, options) => {
    const step = model.step;
    const createDefaultStep = options.assistant.createDefaultStep;
    const steps = step[property] ?? [];
    if (steps.length === 0) {
      const defaultFirstStep = createDefaultStep();
      steps.push(defaultFirstStep);
      step[property] = steps;
    }
    return steps;
  };
};
const guardSetsLikeSteps = guardSubSteps("steps");
const createSetsLikeSubNodesAndEndNode = (model, options) => {
  return createSubNodesAndEndNode(model, {
    ...options,
    createSpecificSubNodes: (model2, options2) => {
      const should = shouldCreateSubNodes(model2);
      if (!should) {
        return void 0;
      }
      const steps = guardSetsLikeSteps(model2, options2);
      return [
        createSubNodesOfSingleRoute({
          model: model2,
          options: options2,
          askSteps: () => steps,
          findPortFromModel: findStepsPortFromModel,
          createPortFromModel: createStepsPortFromModel
        })
      ];
    }
  });
};
const createParallelSubNodesAndEndNode = (model, options) => {
  return createSubNodesAndEndNode(model, {
    ...options,
    createSpecificSubNodes: (model2, options2) => {
      const should = shouldCreateSubNodes(model2);
      if (!should) {
        return void 0;
      }
      return guardSetsLikeSteps(model2, options2).map((step, stepIndex) => {
        return createSubNodesOfSingleRoute({
          model: model2,
          options: options2,
          askSteps: () => [step],
          findPortFromModel: findStepsPortFromModel,
          createPortFromModel: createStepsPortFromModel,
          askFirstLinkExtras: () => ({ index: stepIndex })
        });
      });
    }
  });
};
const createConditionalSubNodesAndEndNode = (model, options) => {
  return createSubNodesAndEndNode(model, {
    ...options,
    createSpecificSubNodes: (model2, options2) => {
      const should = shouldCreateSubNodes(model2);
      if (!should) {
        return void 0;
      }
      const steps = guardSetsLikeSteps(model2, options2);
      const stepsNode = createSubNodesOfSingleRoute({
        model: model2,
        options: options2,
        askSteps: () => steps,
        findPortFromModel: findStepsPortFromModel,
        createPortFromModel: createStepsPortFromModel,
        askFirstLinkExtras: () => ({ index: 0 })
      });
      const step = model2.step;
      const otherwise = step.otherwise;
      if (otherwise == null || otherwise.length === 0) {
        return [stepsNode];
      } else {
        return [
          stepsNode,
          createSubNodesOfSingleRoute({
            model: model2,
            options: options2,
            askSteps: () => step.otherwise,
            findPortFromModel: findStepsPortFromModel,
            createPortFromModel: createStepsPortFromModel,
            askFirstLinkExtras: () => ({ index: 1 })
          })
        ];
      }
    }
  });
};
const createRoutesSubNodesAndEndNode = (model, options) => {
  return createSubNodesAndEndNode(model, {
    ...options,
    createSpecificSubNodes: (model2, options2) => {
      const should = shouldCreateSubNodes(model2);
      if (!should) {
        return void 0;
      }
      const step = model2.step;
      step.routes = step.routes ?? [{}];
      const routeNodes = step.routes.map((route, routeIndex) => {
        const steps = guardSetsLikeSteps({ step: route }, options2);
        return createSubNodesOfSingleRoute({
          model: model2,
          options: options2,
          askSteps: () => steps,
          findPortFromModel: findStepsPortFromModel,
          createPortFromModel: createStepsPortFromModel,
          askFirstLinkExtras: () => ({ index: routeIndex })
        });
      });
      const otherwise = step.otherwise;
      if (otherwise == null || otherwise.length === 0) {
        return routeNodes;
      } else {
        return [
          ...routeNodes,
          createSubNodesOfSingleRoute({
            model: model2,
            options: options2,
            askSteps: () => step.otherwise,
            findPortFromModel: findStepsPortFromModel,
            createPortFromModel: createStepsPortFromModel,
            askFirstLinkExtras: () => ({ index: step.routes.length })
          })
        ];
      }
    }
  });
};
const discard = (_model) => VUtils.noop();
const elementName = {
  code: "name",
  label: Labels.Name,
  anchor: "name",
  badge: (model) => {
    if (VUtils.isNotBlank(model.name)) {
      return model.name.trim();
    } else {
      return React.createElement(ConfigurableElementBadgeMissed, null);
    }
  },
  editor: (props) => {
    const { model, onValueChanged } = props;
    const onValueChange = (value) => {
      model.name = value;
      onValueChanged();
    };
    return React.createElement(UnwrappedInput, { onValueChange, value: model.name ?? "" });
  },
  helpDoc: HelpDocs.stepName
};
const ELEMENT_ANCHOR_USE = "use";
const elementUse = {
  code: ELEMENT_ANCHOR_USE,
  label: Labels.Use,
  anchor: ELEMENT_ANCHOR_USE,
  badge: (model) => askUseBadge(model.use),
  editor: (props) => {
    const { model, onValueChanged } = props;
    const onValueChange = (value2) => {
      const originalUse = model.use;
      if (originalUse === value2) {
        return;
      }
      model.use = value2;
      const def = findStepDef(model.use);
      def.switchUse(model, originalUse);
      onValueChanged();
    };
    const value = model.use;
    const options = AllStepDefsAsArray().map((def) => {
      return { value: def.use, label: askUseLabel(def.use) };
    });
    return React.createElement(UnwrappedDropdown, { value, onValueChange, options, optionSort: OptionItemSort.ASC, clearable: false, style: CommonElementEditorStyles.dropdown });
  },
  helpDoc: HelpDocs.stepUse
};
const createBadge$1 = (name) => {
  return (model) => {
    var _a;
    if (((_a = model.temporary) == null ? void 0 : _a[name]) === false) {
      return React.createElement(ConfigurableElementBadgeSnippet, null);
    } else {
      return React.createElement(ConfigurableElementBadgeAsIs, null);
    }
  };
};
const createEditor$1 = (names) => {
  const { flag, snippet, extensionType } = names;
  return createSelectableSnippetEditor({
    findFlag: (model) => {
      var _a;
      return ((_a = model.temporary) == null ? void 0 : _a[flag]) ?? true;
    },
    saveFlag: (model, value) => {
      model.temporary = { ...model.temporary ?? {}, [flag]: value };
    },
    findSnippet: (model) => model[snippet],
    saveSnippet: (model, text) => {
      model[snippet] = text;
    },
    flagCandidates: [
      { value: true, label: Labels.StepIOTransformerAsIs },
      { value: false, label: Labels.StepIOTransformerSnippet }
    ],
    isSnippetAvailable: (value) => value === false,
    extensionType,
    height: PlaygroundCssVars.SNIPPET_IO_TRANSFORMER_HEIGHT
  });
};
const elementFromInput = {
  code: "from-input",
  label: Labels.StepIOTransformer,
  anchor: "from-input",
  badge: createBadge$1("fromInputAsIs"),
  editor: createEditor$1({
    flag: "fromInputAsIs",
    snippet: "fromInput",
    extensionType: JsEditorExtensionType.FROM_INPUT
  }),
  helpDoc: HelpDocs.stepFromInput
};
const elementFromInputGroup = {
  code: "from-input-group",
  label: Labels.StepFromInput,
  anchor: "from-input-group",
  children: [elementFromInput],
  group: true
};
const elementToOutput = {
  code: "to-output",
  label: Labels.StepIOTransformer,
  anchor: "to-output",
  badge: createBadge$1("toOutputAsIs"),
  editor: createEditor$1({
    flag: "toOutputAsIs",
    snippet: "toOutput",
    extensionType: JsEditorExtensionType.TO_OUTPUT
  }),
  helpDoc: HelpDocs.stepToOutput
};
const MergeToRequestEditor = (props) => {
  var _a, _b;
  const { model, onValueChanged } = props;
  const inputRef = reactExports.useRef(null);
  const onValueChange = (value) => {
    model.temporary = { ...model.temporary ?? {}, mergeType: value };
    setTimeout(() => {
      var _a2, _b2;
      return (_b2 = (_a2 = inputRef.current) == null ? void 0 : _a2.querySelector("input")) == null ? void 0 : _b2.focus();
    }, 50);
    onValueChanged();
  };
  const onNameChange = (value) => {
    model.merge = value;
    onValueChanged();
  };
  const options = [
    { value: MergeType.REPLACE, label: Labels.StepIOMergeBackReplace },
    { value: MergeType.MERGE_AS_PROPERTY, label: Labels.StepIOMergeBackAsProperty },
    { value: MergeType.UNBOX, label: Labels.StepIOMergeBackUnbox }
  ];
  return React.createElement(
    VerticalLinesEditor,
    null,
    React.createElement(UnwrappedDropdown, { value: ((_a = model.temporary) == null ? void 0 : _a.mergeType) ?? MergeType.REPLACE, onValueChange, options, clearable: false, style: CommonElementEditorStyles.dropdown }),
    React.createElement(UnwrappedDecorateInput, { leads: [Labels.StepIOMergeBackAsPropertyName], value: model.merge ?? "", onValueChange: onNameChange, disabled: ((_b = model.temporary) == null ? void 0 : _b.mergeType) !== MergeType.MERGE_AS_PROPERTY, ref: inputRef, "data-di-prefix-text": true })
  );
};
const elementMergeToRequest = {
  code: "merge-to-output",
  label: Labels.StepMerge,
  anchor: "merge-to-output",
  badge: (model) => {
    const { mergeType: type } = model.temporary ?? {};
    switch (type) {
      case MergeType.UNBOX:
        return Labels.StepIOMergeBackUnbox;
      case MergeType.MERGE_AS_PROPERTY:
        return Labels.StepIOMergeBackAsProperty;
      case MergeType.REPLACE:
        return Labels.StepIOMergeBackReplace;
    }
  },
  editor: MergeToRequestEditor,
  helpDoc: HelpDocs.stepMergeToRequest
};
const elementToOutputGroup = {
  code: "to-output-group",
  label: Labels.StepToOutput,
  anchor: "to-output-group",
  children: [elementToOutput, elementMergeToRequest],
  group: true
};
const createBadge = (name) => {
  return (model) => {
    var _a;
    switch ((_a = model.temporary) == null ? void 0 : _a[name]) {
      case ErrorHandleType.SNIPPET:
        return React.createElement(ConfigurableElementBadgeSnippet, null);
      case ErrorHandleType.STEPS:
        return React.createElement(ConfigurableElementBadgeSteps, null);
      case ErrorHandleType.NONE:
      default:
        return React.createElement(ConfigurableElementBadgeIgnored, null);
    }
  };
};
const createEditor = (names) => {
  const { flag, snippet, extensionType } = names;
  return createSelectableSnippetEditor({
    findFlag: (model) => {
      var _a;
      return ((_a = model.temporary) == null ? void 0 : _a[flag]) ?? ErrorHandleType.NONE;
    },
    saveFlag: (model, value) => {
      model.temporary = { ...model.temporary ?? {}, [flag]: value };
    },
    findSnippet: (model) => {
      var _a;
      return (_a = model.errorHandles) == null ? void 0 : _a[snippet];
    },
    saveSnippet: (model, text) => {
      if (model.errorHandles == null) {
        model.errorHandles = {};
      }
      model.errorHandles[snippet] = text;
    },
    flagCandidates: [
      { value: ErrorHandleType.NONE, label: Labels.StepErrorHandleTypeNone },
      { value: ErrorHandleType.SNIPPET, label: Labels.StepErrorHandleTypeSnippet },
      { value: ErrorHandleType.STEPS, label: Labels.StepErrorHandleTypeSteps }
    ],
    isSnippetAvailable: (value) => value === ErrorHandleType.SNIPPET,
    extensionType,
    height: PlaygroundCssVars.SNIPPET_ERROR_HANDLES_HEIGHT
  });
};
const elementCatchableErrorHandle = {
  code: "catchable-error-handle",
  label: Labels.CatchableErrorHandle,
  anchor: "catchable-error-handle",
  badge: createBadge("useErrorHandlesForCatchable"),
  editor: createEditor({
    flag: "useErrorHandlesForCatchable",
    snippet: "catchable",
    extensionType: JsEditorExtensionType.CATCHABLE_ERROR_HANDLE
  }),
  helpDoc: HelpDocs.stepCatchableErrorHandle
};
const elementUncatchableErrorHandle = {
  code: "uncatchable-error-handle",
  label: Labels.UncatchableErrorHandle,
  anchor: "uncatchable-error-handle",
  badge: createBadge("useErrorHandlesForUncatchable"),
  editor: createEditor({
    flag: "useErrorHandlesForUncatchable",
    snippet: "uncatchable",
    extensionType: JsEditorExtensionType.UNCATCHABLE_ERROR_HANDLE
  }),
  helpDoc: HelpDocs.stepUncatchableErrorHandle
};
const elementExposedErrorHandle = {
  code: "exposed-error-handle",
  label: Labels.ExposedErrorHandle,
  anchor: "exposed-error-handle",
  badge: createBadge("useErrorHandlesForExposed"),
  editor: createEditor({
    flag: "useErrorHandlesForExposed",
    snippet: "exposed",
    extensionType: JsEditorExtensionType.EXPOSED_ERROR_HANDLE
  }),
  helpDoc: HelpDocs.stepExposedErrorHandle
};
const elementAnyErrorHandle = {
  code: "any-error-handle",
  label: Labels.AnyErrorHandle,
  anchor: "any-error-handle",
  badge: createBadge("useErrorHandlesForAny"),
  editor: createEditor({
    flag: "useErrorHandlesForAny",
    snippet: "any",
    extensionType: JsEditorExtensionType.ANY_ERROR_HANDLE
  }),
  helpDoc: HelpDocs.stepAnyErrorHandle
};
const elementErrorHandles = {
  code: "error-handles",
  label: Labels.ErrorHandles,
  anchor: "error-handles",
  children: [
    elementCatchableErrorHandle,
    elementExposedErrorHandle,
    elementUncatchableErrorHandle,
    elementAnyErrorHandle
  ],
  group: true,
  collapsible: true,
  collapsed: true
};
const createMainContentElement = (...children) => {
  return {
    code: "main-content",
    label: Labels.StepMainContent,
    anchor: "main-content",
    children,
    group: true
  };
};
const createSwitchableSnippetElement = (options) => {
  const { code, label, anchor, property, temporaryProperty, notAvailableBadge, ignoreCandidateLabel, extensionType, snippetHeight, helpDoc } = options;
  return {
    code,
    label,
    anchor,
    badge: (model) => {
      var _a;
      if (((_a = model.temporary) == null ? void 0 : _a[temporaryProperty]) === false) {
        return React.createElement(ConfigurableElementBadgeSnippet, null);
      } else {
        return notAvailableBadge ?? React.createElement(ConfigurableElementBadgeNotAvailable, null);
      }
    },
    editor: createSelectableSnippetEditor({
      findFlag: (model) => {
        var _a;
        return ((_a = model.temporary) == null ? void 0 : _a[temporaryProperty]) ?? true;
      },
      saveFlag: (model, value) => {
        model.temporary = { ...model.temporary ?? {}, [temporaryProperty]: value };
      },
      findSnippet: (model) => model[property],
      saveSnippet: (model, text) => {
        model[property] = text;
      },
      flagCandidates: [
        { value: true, label: ignoreCandidateLabel },
        { value: false, label: Labels.StepVariableUseSnippet }
      ],
      isSnippetAvailable: (value) => value === false,
      extensionType,
      height: snippetHeight
    }),
    helpDoc
  };
};
const findSubPorts = (model) => {
  return [
    model.getPort(StepsPortName),
    model.getPort(CatchableErrorHandlePortModel.NAME),
    model.getPort(ExposedErrorHandlePortModel.NAME),
    model.getPort(UncatchableErrorHandlePortModel.NAME),
    model.getPort(AnyErrorHandlePortModel.NAME)
  ].filter((port) => port != null);
};
const folder = {
  accept: () => true,
  switch: (step, fold) => {
    step.$diagram = step.$diagram ?? {};
    step.$diagram.$foldCatchable = fold;
    step.$diagram.$foldUncatchable = fold;
    step.$diagram.$foldExposed = fold;
    step.$diagram.$foldAny = fold;
  },
  askSubSteps: (step) => {
    const { errorHandles: { catchable, uncatchable, exposed, any } = {} } = step;
    const subSteps = [catchable, uncatchable, exposed, any].filter((x) => x != null && typeof x !== "string").map((x) => x).flat();
    return subSteps.length === 0 ? void 0 : subSteps;
  },
  askSubStepsWithCategory: (step) => {
    const { errorHandles: { catchable, uncatchable, exposed, any } = {} } = step;
    const found = {
      catchable: catchable != null && typeof catchable !== "string" ? catchable : [],
      uncatchable: uncatchable != null && typeof uncatchable !== "string" ? uncatchable : [],
      exposed: exposed != null && typeof exposed !== "string" ? exposed : [],
      any: any != null && typeof any !== "string" ? any : []
    };
    Object.keys(found).forEach((key) => {
      if (found[key].length === 0) {
        delete found[key];
      }
    });
    return Object.keys(found).length === 0 ? void 0 : found;
  },
  tryToRevealSubStep: (step, subStep) => {
    const { errorHandles: { catchable, uncatchable, exposed, any } = {} } = step;
    return [
      {
        handle: catchable,
        reveal: (step2) => {
          step2.$diagram = { ...step2.$diagram ?? {}, $foldCatchable: false };
        }
      },
      {
        handle: exposed,
        reveal: (step2) => {
          step2.$diagram = { ...step2.$diagram ?? {}, $foldExposed: false };
        }
      },
      {
        handle: uncatchable,
        reveal: (step2) => {
          step2.$diagram = { ...step2.$diagram ?? {}, $foldUncatchable: false };
        }
      },
      {
        handle: any,
        reveal: (step2) => {
          step2.$diagram = { ...step2.$diagram ?? {}, $foldAny: false };
        }
      }
    ].filter(({ handle }) => handle != null && typeof handle !== "string").some(({ handle, reveal }) => {
      const steps = handle;
      if (steps.includes(subStep)) {
        reveal(step);
        return true;
      } else {
        const revealed = steps.some((step2) => tryToRevealSubStep(step2, subStep));
        if (revealed) {
          reveal(step);
        }
        return revealed;
      }
    });
  }
};
const prepare$1 = (def, and) => {
  const model = {
    name: def.name,
    use: def.use,
    fromInput: def.fromInput,
    toOutput: def.toOutput,
    temporary: {}
  };
  model.temporary.fromInputAsIs = VUtils.isBlank(def.fromInput);
  model.temporary.toOutputAsIs = VUtils.isBlank(def.toOutput);
  model.temporary.mergeType = VUtils.isBlank(def.merge) || def.merge === false ? MergeType.REPLACE : def.merge === true ? MergeType.UNBOX : MergeType.MERGE_AS_PROPERTY;
  if (model.temporary.mergeType === MergeType.MERGE_AS_PROPERTY) {
    model.merge = def.merge;
  }
  model.errorHandles = model.errorHandles ?? {};
  const copyErrorHandle = (name, flagName) => {
    var _a;
    const handle = (_a = def.errorHandles) == null ? void 0 : _a[name];
    if (handle == null) {
      model.temporary[flagName] = ErrorHandleType.NONE;
    } else if (Array.isArray(handle)) {
      model.temporary[flagName] = ErrorHandleType.STEPS;
    } else {
      model.errorHandles = { ...model.errorHandles ?? {}, [name]: handle };
      model.temporary[flagName] = ErrorHandleType.SNIPPET;
    }
  };
  copyErrorHandle("catchable", "useErrorHandlesForCatchable");
  copyErrorHandle("uncatchable", "useErrorHandlesForUncatchable");
  copyErrorHandle("exposed", "useErrorHandlesForExposed");
  copyErrorHandle("any", "useErrorHandlesForAny");
  if (and != null) {
    and(def, model);
  }
  return model;
};
const survivalOfPipeline = {
  code: true,
  type: true,
  enabled: true,
  $diagram: true,
  "$diagram.$startX": true,
  "$diagram.$startY": true,
  "$diagram.$endX": true,
  "$diagram.$endY": true
};
const survivalOfStep = {
  name: true,
  use: true,
  fromInput: (def) => VUtils.isNotBlank(def.fromInput),
  toOutput: (def) => VUtils.isNotBlank(def.toOutput),
  merge: (def) => VUtils.isNotBlank(def.merge),
  errorHandles: true,
  "errorHandles.catchable": (def) => {
    var _a;
    return VUtils.isNotBlank((_a = def.errorHandles) == null ? void 0 : _a.catchable);
  },
  "errorHandles.uncatchable": (def) => {
    var _a;
    return VUtils.isNotBlank((_a = def.errorHandles) == null ? void 0 : _a.uncatchable);
  },
  "errorHandles.exposed": (def) => {
    var _a;
    return VUtils.isNotBlank((_a = def.errorHandles) == null ? void 0 : _a.exposed);
  },
  "errorHandles.any": (def) => {
    var _a;
    return VUtils.isNotBlank((_a = def.errorHandles) == null ? void 0 : _a.any);
  },
  $diagram: true,
  "$diagram.$x": true,
  "$diagram.$y": true,
  "$diagram.$foldCatchable": (def) => {
    var _a, _b;
    return Array.isArray((_a = def.errorHandles) == null ? void 0 : _a.catchable) && ((_b = def.$diagram) == null ? void 0 : _b.$foldCatchable) === true;
  },
  "$diagram.$foldUncatchable": (def) => {
    var _a, _b;
    return Array.isArray((_a = def.errorHandles) == null ? void 0 : _a.uncatchable) && ((_b = def.$diagram) == null ? void 0 : _b.$foldUncatchable) === true;
  },
  "$diagram.$foldExposed": (def) => {
    var _a, _b;
    return Array.isArray((_a = def.errorHandles) == null ? void 0 : _a.exposed) && ((_b = def.$diagram) == null ? void 0 : _b.$foldExposed) === true;
  },
  "$diagram.$foldAny": (def) => {
    var _a, _b;
    return Array.isArray((_a = def.errorHandles) == null ? void 0 : _a.any) && ((_b = def.$diagram) == null ? void 0 : _b.$foldAny) === true;
  }
};
const survivalAfterConfirm = (def, property) => {
  var _a, _b, _c;
  if (isFileDef(def)) {
    return survivalOfPipeline[property] === true || ((_a = survivalOfPipeline[property]) == null ? void 0 : _a.call(survivalOfPipeline, def)) === true || survivalOfStep[property] === true || ((_b = survivalOfStep[property]) == null ? void 0 : _b.call(survivalOfStep, def)) === true;
  } else {
    return survivalOfStep[property] === true || ((_c = survivalOfStep[property]) == null ? void 0 : _c.call(survivalOfStep, def)) === true;
  }
};
const switchUse$1 = (def, keptPropNames, originalUse) => {
  const commonKeys = ["name", "use", "fromInput", "toOutput", "merge", "errorHandles", "temporary"];
  def.temporary[`$${originalUse}`] = Object.keys(def).reduce((acc, key) => {
    if (commonKeys.includes(key)) {
      return acc;
    } else {
      acc[key] = def[key];
      if (!keptPropNames.includes(key)) {
        delete def[key];
      }
    }
    return acc;
  }, {});
  const existsKeys = Object.keys(def);
  const backup = def.temporary[`$${def.use}`] ?? {};
  Object.keys(backup).forEach((key) => {
    if (!existsKeys.includes(key)) {
      def[key] = backup[key];
    }
  });
};
const CommonStepDefs = {
  prepare: prepare$1,
  switchUse: switchUse$1,
  confirm: confirm$1,
  survivalAfterConfirm,
  discard,
  folder,
  properties: {
    name: elementName,
    use: elementUse,
    fromInput: elementFromInputGroup,
    toOutput: elementToOutputGroup,
    errorHandles: elementErrorHandles,
    leadingGroup: [elementName, elementUse, elementFromInputGroup],
    tailingGroup: [elementErrorHandles, elementToOutputGroup]
  },
  ports: {
    fromInput: PortFromInput,
    toOutput: PortToOutput,
    merge: PortMerge,
    handleCatchableError: PortCatchableError,
    handleUncatchableError: PortUncatchableError,
    handleExposedError: PortExposedError,
    handleAnyError: PortAnyError
  },
  prebuiltPorts: {
    steps: PortSteps,
    input: [{ key: "from-input", port: PortFromInput }],
    errorHandles: [
      { key: "catchable-error-handle", port: PortCatchableError },
      { key: "exposed-error-handle", port: PortExposedError },
      { key: "uncatchable-error-handle", port: PortUncatchableError },
      { key: "any-error-handle", port: PortAnyError }
    ],
    output: [
      { key: "to-output", port: PortToOutput },
      { key: "merge", port: PortMerge }
    ]
  },
  createSubNodes,
  createSubNodesAndEndNode,
  createSetsLikeSubNodesAndEndNode,
  createParallelSubNodesAndEndNode,
  createConditionalSubNodesAndEndNode,
  createRoutesSubNodesAndEndNode,
  confirmSetsLikePipelineStep,
  confirmConditionalPipelineStep,
  confirmRoutesPipelineStep,
  findSubPorts,
  switchFoldWhenSubNodesExist: (step, fold) => {
    step.$diagram = step.$diagram ?? {};
    step.$diagram.$foldSubSteps = fold;
  },
  askSubSteps: (step) => {
    const subSteps = step.steps ?? [];
    return subSteps.length === 0 ? void 0 : subSteps;
  },
  askSubStepsWithCategory: (step) => {
    const steps = step.steps ?? [];
    return steps.length === 0 ? void 0 : { steps };
  },
  tryToRevealSubSteps: (step, subStep, findSubSteps) => {
    const steps = (findSubSteps == null ? step.steps : findSubSteps(step)) ?? [];
    if (steps.includes(subStep)) {
      const def = step;
      def.$diagram = { ...def.$diagram ?? {}, $foldSubSteps: false };
      return true;
    } else {
      const revealed = steps.some((step2) => tryToRevealSubStep(step2, subStep));
      if (revealed) {
        const def = step;
        def.$diagram = { ...def.$diagram ?? {}, $foldSubSteps: false };
      }
      return revealed;
    }
  },
  createMainContentElement,
  createSwitchableSnippetElement,
  createStepNodeConfigurer: (options) => {
    const { use, prepare: prepare2, switchUse: switchUse2, confirm: confirm2, survivalAfterConfirm: survivalAfterConfirm2, discard: discard2, folder: folder2, properties, ports, createSubNodes: createSubNodes2, findSubPorts: findSubPorts2, helpDocs, reconfigurer, firstSubStepPortContainerFind } = options;
    return {
      use,
      prepare: (() => {
        const [key, func] = prepare2 ?? [];
        switch (key) {
          case "replace":
            return func;
          case "and":
            return (def) => CommonStepDefs.prepare(def, func);
          default:
            console.debug(`No prepare defined for step[${use}], use default CommonStepDefs.prepare.`);
            return (def) => CommonStepDefs.prepare(def);
        }
      })(),
      switchUse: (() => {
        const [key, content] = switchUse2 ?? [];
        switch (key) {
          case "replace":
            return content;
          case "keep":
            return (model, originalUse) => {
              CommonStepDefs.switchUse(model, content, originalUse);
              return model;
            };
          default:
            console.debug(`No switchUse defined for step[${use}], use default CommonStepDefs.switchUse.`);
            return (model, originalUse) => {
              CommonStepDefs.switchUse(model, [], originalUse);
              return model;
            };
        }
      })(),
      confirm: (() => {
        const [key, func] = confirm2 ?? [];
        switch (key) {
          case "replace":
            return func;
          case "and":
            return (model, def, file, options2) => {
              return CommonStepDefs.confirm(model, def, file, options2, func);
            };
          default:
            console.debug(`No confirm defined for step[${use}], use default CommonStepDefs.confirm.`);
            return (model, def, file, options2) => {
              return CommonStepDefs.confirm(model, def, file, options2);
            };
        }
      })(),
      survivalAfterConfirm: (() => {
        const [key, func] = survivalAfterConfirm2 ?? [];
        switch (key) {
          case "replace":
            return func;
          case "and":
            return (def, property) => {
              const survival = CommonStepDefs.survivalAfterConfirm(def, property);
              if (!survival) {
                return func(def, property);
              } else {
                return survival;
              }
            };
          default:
            console.debug(`No survivalAfterConfirm defined for step[${use}], use default CommonStepDefs.survivalAfterConfirm.`);
            return (def, property) => {
              return CommonStepDefs.survivalAfterConfirm(def, property);
            };
        }
      })(),
      discard: discard2 ?? CommonStepDefs.discard,
      folder: (() => {
        const { switch: switchFold, askSubSteps, askSubStepsWithCategory, tryToRevealSubStep: tryToRevealSubStep2 } = folder2 ?? {};
        return {
          accept: (step) => step.use === use,
          switch: (step, fold) => {
            CommonStepDefs.folder.switch(step, fold);
            switchFold == null ? void 0 : switchFold(step, fold);
          },
          askSubSteps: (step) => {
            const subSteps = [...(askSubSteps == null ? void 0 : askSubSteps(step)) ?? [], ...CommonStepDefs.folder.askSubSteps(step) ?? []];
            return subSteps.length === 0 ? void 0 : subSteps;
          },
          askSubStepsWithCategory: (step) => {
            const found = CommonStepDefs.folder.askSubStepsWithCategory(step);
            return { ...found ?? {}, ...(askSubStepsWithCategory == null ? void 0 : askSubStepsWithCategory(step)) ?? {} };
          },
          tryToRevealSubStep: (step, subStep) => {
            const revealed = CommonStepDefs.folder.tryToRevealSubStep(step, subStep);
            if (revealed) {
              return true;
            }
            return (tryToRevealSubStep2 == null ? void 0 : tryToRevealSubStep2(step, subStep)) ?? false;
          }
        };
      })(),
      operators: /* @__PURE__ */ (() => {
        return (node, def) => {
          if (isFileDef(node.step)) {
            return {};
          }
          const parentDef = node.getSubOf();
          const steps = parentDef.steps ?? [];
          if (!steps.includes(def)) {
            return {};
          }
          return createNodeOperatorsForStep(steps, false);
        };
      })(),
      properties: [
        ...CommonStepDefs.properties.leadingGroup,
        ...properties ?? [],
        ...CommonStepDefs.properties.tailingGroup
      ],
      ports: [
        ...CommonStepDefs.prebuiltPorts.input,
        ...ports ?? [],
        ...CommonStepDefs.prebuiltPorts.errorHandles,
        ...CommonStepDefs.prebuiltPorts.output
      ],
      createSubNodes: createSubNodes2 ?? CommonStepDefs.createSubNodesAndEndNode,
      findSubPorts: findSubPorts2 ?? CommonStepDefs.findSubPorts,
      helpDocs,
      reconfigurer,
      firstSubStepPortContainerFind
    };
  },
  reconfigurePropertiesWithRouteCheck: (properties, _model) => {
    const index = properties.findIndex((prop) => prop.anchor === ELEMENT_ANCHOR_USE);
    const beforeAndUse = properties.slice(0, index + 1);
    const after = properties.slice(index + 1);
    return [
      ...beforeAndUse,
      {
        code: "route-test",
        label: Labels.StepRouteTest,
        anchor: "route-test",
        children: [{
          code: "route-check",
          label: Labels.StepRouteCheck,
          anchor: "route-check",
          badge: createCheckOrMissBadge({ check: (model) => {
            var _a;
            return VUtils.isNotBlank((_a = model.temporary) == null ? void 0 : _a.check);
          } }),
          editor: createSnippetEditor({
            extensionType: JsEditorExtensionType.ROUTE_CHECK,
            getValue: (model) => {
              var _a;
              return (_a = model.temporary) == null ? void 0 : _a.check;
            },
            setValue: (model, value) => {
              model.temporary = model.temporary ?? {};
              model.temporary.check = value;
            },
            height: PlaygroundCssVars.SNIPPET_ROUTE_CHECK_HEIGHT
          }),
          helpDoc: HelpDocs.stepRouteCheck
        }],
        group: true,
        collapsible: true
      },
      ...after
    ];
  }
};
const SnippetStepDefs = CommonStepDefs.createStepNodeConfigurer({
  use: StandardPipelineStepRegisterKey.SNIPPET,
  prepare: ["and", (def, model) => model.snippet = def.snippet],
  switchUse: ["keep", ["snippet"]],
  confirm: ["and", (model, def, _file, _options) => {
    return () => def.snippet = model.snippet;
  }],
  survivalAfterConfirm: ["and", (_def, property) => {
    return ["snippet"].includes(property);
  }],
  properties: [
    CommonStepDefs.createMainContentElement({
      code: "snippet",
      label: Labels.StepSnippetSnippet,
      anchor: "snippet",
      badge: createCheckOrMissBadge({ check: (model) => VUtils.isNotBlank(model.snippet) }),
      editor: createSnippetEditor({
        extensionType: JsEditorExtensionType.SNIPPET,
        getValue: (model) => model.snippet,
        setValue: (model, value) => model.snippet = value,
        height: PlaygroundCssVars.SNIPPET_HEIGHT
      }),
      helpDoc: HelpDocs.stepSnippetSnippet
    })
  ],
  ports: [createPrePortExistsWithKey({
    key: "snippet",
    label: Labels.StepSnippetSnippet,
    getValue: (model) => model.snippet
  })],
  helpDocs: HelpDocs.snippetStep
});
registerStepDef(SnippetStepDefs);
const GetPropertyStepDefs = CommonStepDefs.createStepNodeConfigurer({
  use: StandardPipelineStepRegisterKey.GET_PROPERTY,
  prepare: ["and", (def, model) => model.property = def.property],
  switchUse: ["keep", ["property"]],
  confirm: ["and", (model, def, _file, _options) => {
    return () => def.property = (model.property ?? "").trim();
  }],
  survivalAfterConfirm: ["and", (_def, property) => {
    return ["property"].includes(property);
  }],
  properties: [
    CommonStepDefs.createMainContentElement({
      code: "property",
      label: Labels.StepGetPropertyProperty,
      anchor: "property",
      badge: createCheckOrMissBadge({ check: (model) => VUtils.isNotBlank(model.property) }),
      editor: createStrEditor({
        getValue: (model) => model.property,
        setValue: (model, value) => model.property = value
      }),
      helpDoc: HelpDocs.stepGetPropertyProperty
    })
  ],
  ports: [
    createPrePortExistsWithKey({
      key: "property",
      label: Labels.StepGetPropertyProperty,
      getValue: (model) => model.property
    })
  ],
  helpDocs: HelpDocs.delPropertyStep
});
registerStepDef(GetPropertyStepDefs);
const DelPropertyStepDefs = CommonStepDefs.createStepNodeConfigurer({
  use: StandardPipelineStepRegisterKey.DEL_PROPERTY,
  prepare: ["and", (def, model) => model.property = def.property],
  switchUse: ["keep", ["property"]],
  confirm: ["and", (model, def, _file, _options) => {
    return () => def.property = (model.property ?? "").trim();
  }],
  survivalAfterConfirm: ["and", (_def, property) => {
    return ["property"].includes(property);
  }],
  properties: [
    CommonStepDefs.createMainContentElement({
      code: "property",
      label: Labels.StepDelPropertyProperty,
      anchor: "property",
      badge: createCheckOrMissBadge({ check: (model) => VUtils.isNotBlank(model.property) }),
      editor: createStrEditor({
        getValue: (model) => model.property,
        setValue: (model, value) => model.property = value
      }),
      helpDoc: HelpDocs.stepDelPropertyProperty
    })
  ],
  ports: [
    createPrePortExistsWithKey({
      key: "property",
      label: Labels.StepDelPropertyProperty,
      getValue: (model) => model.property
    })
  ],
  helpDocs: HelpDocs.delPropertyStep
});
registerStepDef(DelPropertyStepDefs);
const DelPropertiesStepDefs = {
  ...DelPropertyStepDefs,
  use: StandardPipelineStepRegisterKey.DELETE_PROPERTIES
};
registerStepDef(DelPropertiesStepDefs);
const SnowflakePropertyStepDefs = CommonStepDefs.createStepNodeConfigurer({
  use: StandardPipelineStepRegisterKey.SNOWFLAKE,
  helpDocs: HelpDocs.snowflakeStep
});
registerStepDef(SnowflakePropertyStepDefs);
const elementDecorateUrl = createSwitchableSnippetElement({
  code: "decorate-url",
  label: Labels.StepHttpDecorateUrl,
  anchor: "decorate-url",
  property: "decorateUrl",
  temporaryProperty: "decorateUrlAsIs",
  ignoreCandidateLabel: Labels.NoDecoration,
  extensionType: JsEditorExtensionType.HTTP_URL_GENERATE,
  snippetHeight: PlaygroundCssVars.SNIPPET_HTTP_DECORATE_URL_HEIGHT,
  helpDoc: HelpDocs.stepHttpDecorateUrl
});
const elementEndpoint = {
  code: "endpoint",
  label: Labels.StepHttpEndpoint,
  anchor: "endpoint",
  badge: createValueOrMissBadge({
    check: (model) => VUtils.isNotBlank(model.endpoint),
    one: (model) => model.endpoint.trim()
  }),
  changeBy: ["system"],
  editor: (props) => {
    const { model, onValueChanged, assistant } = props;
    const systems = assistant.askSystemsForHttp();
    const system = VUtils.isBlank(model.system) ? void 0 : model.system.trim();
    const selectedSystem = systems.find(({ code }) => code === system);
    const endpoints = (selectedSystem == null ? void 0 : selectedSystem.endpoints) ?? [];
    const endpoint = VUtils.isBlank(model.endpoint) ? void 0 : model.endpoint.trim();
    const options = endpoints.map((endpoint2) => {
      return { value: endpoint2.code, label: VUtils.blankThen(endpoint2.name, endpoint2.code) };
    });
    const onValueChange = (value) => {
      model.endpoint = value;
      onValueChanged();
    };
    if (endpoint != null && options.every(({ value }) => value !== endpoint)) {
      options.unshift({ value: endpoint, label: React.createElement(NotAvailableDropdownOption, { label: endpoint }) });
    }
    return React.createElement(UnwrappedDropdown, { value: endpoint, onValueChange, options, optionSort: OptionItemSort.ASC, clearable: false, style: CommonElementEditorStyles.dropdown });
  },
  helpDoc: HelpDocs.stepHttpEndpoint
};
const MethodEditor = (props) => {
  const { model, onValueChanged } = props;
  const options = [
    { value: "get", label: "GET" },
    { value: "head", label: "HEAD" },
    { value: "post", label: "POST" },
    { value: "put", label: "PUT" },
    { value: "delete", label: "DELETE" },
    { value: "connect", label: "CONNECT" },
    { value: "options", label: "OPTIONS" },
    { value: "trace", label: "TRACE" },
    { value: "patch", label: "PATCH" }
  ];
  const onValueChange = (value) => {
    model.method = value;
    onValueChanged();
  };
  const method = VUtils.isBlank(model.method) ? "post" : model.method.trim();
  if (options.every(({ value }) => value !== method)) {
    options.unshift({ value: method, label: React.createElement(NotAvailableDropdownOption, { label: method }) });
  }
  const disabled = [
    StandardPipelineStepRegisterKey.HTTP_GET,
    StandardPipelineStepRegisterKey.HTTP_POST
  ].includes(model.use);
  return React.createElement(UnwrappedDropdown, { value: method, onValueChange, options, optionSort: OptionItemSort.ASC, disabled, clearable: false, style: CommonElementEditorStyles.dropdown });
};
const elementMethod = {
  code: "method",
  label: Labels.StepHttpMethod,
  anchor: "method",
  badge: createValueOrAnotherBadge({
    check: (model) => VUtils.isNotBlank(model.method),
    one: (model) => model.method.trim().toUpperCase(),
    another: "POST"
  }),
  changeBy: ["use"],
  editor: MethodEditor,
  helpDoc: HelpDocs.stepHttpMethod
};
const SystemEditor = (props) => {
  const { model, onValueChanged, assistant } = props;
  const { fire } = useEditDialogEventBus();
  const systems = assistant.askSystemsForHttp();
  const options = systems.map((system2) => {
    return { value: system2.code, label: VUtils.blankThen(system2.name, system2.code) };
  });
  const onValueChange = (value) => {
    model.system = value;
    const endpoint = VUtils.isBlank(model.endpoint) ? void 0 : model.endpoint.trim();
    const selectedSystem = systems.find(({ code }) => code === value);
    const availableEndpoints = selectedSystem.endpoints || [];
    if (availableEndpoints.every(({ code }) => code !== endpoint)) {
      delete model.endpoint;
    }
    onValueChanged();
    fire(EditDialogEventTypes.ELEMENT_VALUE_CHANGED, "endpoint");
  };
  const system = VUtils.isBlank(model.system) ? void 0 : model.system.trim();
  if (system != null && options.every(({ value }) => value !== system)) {
    options.unshift({ value: system, label: React.createElement(NotAvailableDropdownOption, { label: system }) });
  }
  return React.createElement(UnwrappedDropdown, { value: system, onValueChange, options, optionSort: OptionItemSort.ASC, clearable: false, style: CommonElementEditorStyles.dropdown });
};
const elementSystem = {
  code: "system",
  label: Labels.StepHttpSystem,
  anchor: "system",
  badge: createValueOrMissBadge({
    check: (model) => VUtils.isNotBlank(model.system),
    one: (model) => model.system.trim()
  }),
  editor: SystemEditor,
  helpDoc: HelpDocs.stepHttpSystem
};
const TimeoutEditor = (props) => {
  const { model, onValueChanged } = props;
  const inputRef = reactExports.useRef(null);
  const valueRef = reactExports.useRef(`${model.timeout ?? ""}`);
  const noTimeoutRef = reactExports.useRef(model.timeout == null || model.timeout <= 0);
  const onNoTimeoutChange = (value) => {
    if (value === true) {
      delete model.timeout;
      noTimeoutRef.current = true;
    } else {
      const test = VUtils.isPositive(value);
      if (test.test) {
        model.timeout = test.value;
      } else {
        delete model.timeout;
      }
      noTimeoutRef.current = false;
      setTimeout(() => {
        var _a, _b;
        return (_b = (_a = inputRef.current) == null ? void 0 : _a.querySelector("input")) == null ? void 0 : _b.focus();
      }, 50);
    }
    onValueChanged();
  };
  const onValueChange = (value) => {
    const test = VUtils.isPositive(value);
    if (test.test) {
      model.timeout = test.value;
    } else {
      delete model.timeout;
    }
    valueRef.current = value;
    onValueChanged();
  };
  const noTimeout = [
    React.createElement(UnwrappedCheckboxes, { onValueChange: onNoTimeoutChange, value: noTimeoutRef.current, options: [{ value: true, label: Labels.NoTimeout }], single: true, boolOnSingle: true })
  ];
  return React.createElement(
    CheckAndValueEditor,
    { inputWidth: 150 },
    React.createElement(UnwrappedDecorateInput, { leads: noTimeout, value: valueRef.current, onValueChange, disabled: noTimeoutRef.current, ref: inputRef })
  );
};
const elementTimeout = {
  code: "timeout",
  label: Labels.StepHttpTimeout,
  anchor: "timeout",
  badge: createValueOrAnotherBadge({
    check: (model) => VUtils.isNotBlank(model.timeout),
    one: (model) => model.timeout,
    another: React.createElement(NavigatorElementBadgeWrapper, { "data-role": "use-default" }, Labels.NoTimeout)
  }),
  editor: TimeoutEditor,
  helpDoc: HelpDocs.stepHttpTimeout
};
const elementRemoteApi = {
  code: "remote-api",
  label: Labels.StepHttpRemoteApi,
  anchor: "remote-api",
  children: [elementSystem, elementEndpoint, elementDecorateUrl, elementMethod, elementTimeout],
  group: true
};
const elementBodyUsed = {
  code: "body-used",
  label: Labels.StepHttpBodyUsed,
  anchor: "body-used",
  badge: (model) => {
    if (model.bodyUsed === true) {
      return React.createElement(ConfigurableElementBadgeYes, null);
    } else if (model.bodyUsed === false) {
      return React.createElement(ConfigurableElementBadgeNo, null);
    } else {
      return React.createElement(ConfigurableElementBadgeUseDefault, null);
    }
  },
  editor: (props) => {
    const { model, onValueChanged } = props;
    const options = [
      { value: "default", label: Labels.UseDefault },
      { value: true, label: Labels.Yes },
      { value: false, label: Labels.No }
    ];
    const onValueChange = (value) => {
      if (value === "default") {
        delete model.bodyUsed;
      } else {
        model.bodyUsed = value;
      }
      onValueChanged();
    };
    const used = VUtils.isBlank(model.bodyUsed) ? "default" : model.bodyUsed;
    return React.createElement(UnwrappedDropdown, { value: used, onValueChange, options, clearable: false, style: CommonElementEditorStyles.dropdown });
  },
  helpDoc: HelpDocs.stepHttpBodyUsed
};
const elementGenerateBody = createSwitchableSnippetElement({
  code: "generate-body",
  label: Labels.StepHttpGenerateBody,
  anchor: "generate-body",
  property: "generateBody",
  temporaryProperty: "generateBodyAsIs",
  notAvailableBadge: React.createElement(NavigatorElementBadgeWrapper, { "data-role": "use-default" }, Labels.UseInputAsHttpBody),
  ignoreCandidateLabel: Labels.UseInputAsHttpBody,
  extensionType: JsEditorExtensionType.HTTP_REQUEST_BODY_GENERATE,
  snippetHeight: PlaygroundCssVars.SNIPPET_HTTP_GENERATE_BODY_HEIGHT,
  helpDoc: HelpDocs.stepHttpGenerateBody
});
const elementGenerateHeaders = createSwitchableSnippetElement({
  code: "generate-headers",
  label: Labels.StepHttpGenerateHeaders,
  anchor: "generate-headers",
  property: "generateHeaders",
  temporaryProperty: "generateHeadersAsIs",
  ignoreCandidateLabel: Labels.NoCustomHttpHeader,
  extensionType: JsEditorExtensionType.HTTP_REQUEST_HEADERS_GENERATE,
  snippetHeight: PlaygroundCssVars.SNIPPET_HTTP_GENERATE_HEADERS_HEIGHT,
  helpDoc: HelpDocs.stepHttpGenerateHeaders
});
const elementRemoteRequest = {
  code: "remote-request",
  label: Labels.StepHttpRemoteRequest,
  anchor: "remote-request",
  children: [elementGenerateHeaders, elementBodyUsed, elementGenerateBody],
  group: true
};
const elementReadResponse = createSwitchableSnippetElement({
  code: "read-response",
  label: Labels.StepHttpReadResponse,
  anchor: "read-response",
  property: "readResponse",
  temporaryProperty: "readResponseAsIs",
  ignoreCandidateLabel: Labels.UseJsonFormatForHttpBody,
  extensionType: JsEditorExtensionType.HTTP_RESPONSE_GENERATE,
  snippetHeight: PlaygroundCssVars.SNIPPET_HTTP_READ_RESPONSE_HEIGHT,
  helpDoc: HelpDocs.stepHttpReadResponse
});
const elementResponseErrorHandles = createSwitchableSnippetElement({
  code: "response-error-handles",
  label: Labels.StepHttpResponseErrorHandles,
  anchor: "response-error-handles",
  property: "responseErrorHandles",
  temporaryProperty: "responseErrorHandlesAsIs",
  ignoreCandidateLabel: Labels.Ignored,
  extensionType: JsEditorExtensionType.HTTP_ERROR_HANDLE,
  snippetHeight: PlaygroundCssVars.SNIPPET_HTTP_RESPONSE_ERROR_HANDLES_HEIGHT,
  helpDoc: HelpDocs.stepHttpResponseErrorHandles
});
const elementRemoteResponse = {
  code: "remote-response",
  label: Labels.StepHttpRemoteResponse,
  anchor: "remote-response",
  children: [elementReadResponse, elementResponseErrorHandles],
  group: true
};
const createHttpStepDefs = (options) => {
  const { use, docs: docs2 } = options;
  const defs = CommonStepDefs.createStepNodeConfigurer({
    use,
    prepare: ["and", (def, model) => {
      model.system = def.system;
      model.endpoint = def.endpoint;
      model.decorateUrl = def.decorateUrl;
      model.temporary.decorateUrlAsIs = VUtils.isBlank(def.fromInput);
      model.method = def.method;
      model.timeout = def.timeout;
      model.generateHeaders = def.generateHeaders;
      model.temporary.generateHeadersAsIs = VUtils.isBlank(def.generateHeaders);
      model.bodyUsed = def.bodyUsed;
      model.generateBody = def.generateBody;
      model.temporary.generateBodyAsIs = VUtils.isBlank(def.generateBody);
      model.readResponse = def.readResponse;
      model.temporary.readResponseAsIs = VUtils.isBlank(def.readResponse);
      if (def.responseErrorHandles != null) {
        if (typeof def.responseErrorHandles === "string") {
          model.responseErrorHandles = def.responseErrorHandles;
        } else {
          const handlers = Object.keys(def.responseErrorHandles).map((code) => {
            let snippet = def.responseErrorHandles[code] ?? "";
            if (VUtils.isBlank(snippet)) {
              return "";
            }
            snippet = snippet.split("\n").map((line) => `${indentN(2)}${line}`).join("\n");
            return `${indent}'${code}': async () => {
${snippet}
${indent}}`;
          });
          model.responseErrorHandles = `const handlers = {
${handlers}
};
const {$errorCode} = $options;
const handle = handlers[$errorCode];
if (handle == null) {
${indent}$.$errors.uncatchable({
${indentN(2)}code: 'O03-00010',
${indentN(2)}reason: \`Error[\${$options.$errorCode}] caught when fetch data from remote[\${$options.$url}].\`
${indent}});
} else {
${indent}return await handle();
}
`;
        }
      }
      model.temporary.responseErrorHandlesAsIs = VUtils.isBlank(model.responseErrorHandles);
    }],
    switchUse: ["replace", (model, originalUse) => {
      CommonStepDefs.switchUse(model, [
        "system",
        "endpoint",
        "decorateUrl",
        "method",
        "timeout",
        "generateHeaders",
        "bodyUsed",
        "generateBody",
        "readResponse",
        "responseErrorHandles"
      ], originalUse);
      switch (model.use) {
        case StandardPipelineStepRegisterKey.HTTP_GET:
          model.method = "get";
          break;
        case StandardPipelineStepRegisterKey.HTTP_POST:
          model.method = "post";
          break;
      }
      return model;
    }],
    confirm: ["and", (model, def, _file, _options) => {
      return () => {
        var _a, _b, _c, _d;
        def.system = VUtils.asUndefinedWhenBlank(model.system);
        def.endpoint = VUtils.asUndefinedWhenBlank(model.endpoint);
        if ((_a = model.temporary) == null ? void 0 : _a.decorateUrlAsIs) {
          delete def.decorateUrl;
        } else {
          def.decorateUrl = VUtils.asUndefinedWhenBlank(model.decorateUrl);
        }
        def.method = model.method;
        def.timeout = VUtils.asUndefinedWhenBlank(model.timeout);
        if ((_b = model.temporary) == null ? void 0 : _b.generateHeadersAsIs) {
          delete def.generateHeaders;
        } else {
          def.generateHeaders = VUtils.asUndefinedWhenBlank(model.generateHeaders);
        }
        def.bodyUsed = model.bodyUsed;
        if ((_c = model.temporary) == null ? void 0 : _c.generateBodyAsIs) {
          delete def.generateBody;
        } else {
          def.generateBody = VUtils.asUndefinedWhenBlank(model.generateBody);
        }
        if ((_d = model.temporary) == null ? void 0 : _d.readResponseAsIs) {
          delete def.readResponse;
        } else {
          def.readResponse = VUtils.asUndefinedWhenBlank(model.readResponse);
        }
        def.responseErrorHandles = model.responseErrorHandles;
        if (Object.keys(def.responseErrorHandles).length === 0) {
          delete def.responseErrorHandles;
        }
      };
    }],
    survivalAfterConfirm: ["and", (_def, property) => {
      return [
        "system",
        "endpoint",
        "decorateUrl",
        "method",
        "timeout",
        "generateHeaders",
        "bodyUsed",
        "generateBody",
        "readResponse",
        "responseErrorHandles"
      ].includes(property);
    }],
    properties: [
      elementRemoteApi,
      elementRemoteRequest,
      elementRemoteResponse
    ],
    ports: [
      createPrePortValueOrLabelWithKey({
        key: "system",
        label: Labels.StepHttpSystem,
        getValue: (model) => model.system
      }),
      createPrePortValueOrLabelWithKey({
        key: "endpoint",
        label: Labels.StepHttpEndpoint,
        getValue: (model) => model.endpoint
      })
    ],
    helpDocs: docs2
  });
  registerStepDef(defs);
  return defs;
};
createHttpStepDefs({
  use: StandardPipelineStepRegisterKey.HTTP_FETCH,
  docs: HelpDocs.httpFetchStep
});
createHttpStepDefs({
  use: StandardPipelineStepRegisterKey.HTTP_GET,
  docs: HelpDocs.httpGetStep
});
createHttpStepDefs({
  use: StandardPipelineStepRegisterKey.HTTP_POST,
  docs: HelpDocs.httpPostStep
});
const SetsStepDefs = CommonStepDefs.createStepNodeConfigurer({
  use: StandardPipelineStepRegisterKey.SETS,
  confirm: ["and", (_model, def, _file, options) => {
    return () => {
      CommonStepDefs.confirmSetsLikePipelineStep(def, options);
    };
  }],
  survivalAfterConfirm: ["and", (_def, property) => {
    return ["steps", "steps.*", "$diagram.$foldSubSteps"].includes(property);
  }],
  folder: {
    switch: CommonStepDefs.switchFoldWhenSubNodesExist,
    askSubSteps: CommonStepDefs.askSubSteps,
    askSubStepsWithCategory: CommonStepDefs.askSubStepsWithCategory,
    tryToRevealSubStep: CommonStepDefs.tryToRevealSubSteps
  },
  ports: [{ key: "steps", port: CommonStepDefs.prebuiltPorts.steps }],
  createSubNodes: CommonStepDefs.createSetsLikeSubNodesAndEndNode,
  helpDocs: HelpDocs.setsStep
});
registerStepDef(SetsStepDefs);
const AsyncSetsStepDefs = CommonStepDefs.createStepNodeConfigurer({
  use: StandardPipelineStepRegisterKey.ASYNC_SETS,
  confirm: ["and", (_model, def, _file, options) => {
    return () => {
      CommonStepDefs.confirmSetsLikePipelineStep(def, options);
    };
  }],
  survivalAfterConfirm: ["and", (_def, property) => {
    return ["steps", "steps.*", "$diagram.$foldSubSteps"].includes(property);
  }],
  folder: {
    switch: CommonStepDefs.switchFoldWhenSubNodesExist,
    askSubSteps: CommonStepDefs.askSubSteps,
    askSubStepsWithCategory: CommonStepDefs.askSubStepsWithCategory,
    tryToRevealSubStep: CommonStepDefs.tryToRevealSubSteps
  },
  ports: [{ key: "steps", port: CommonStepDefs.prebuiltPorts.steps }],
  createSubNodes: CommonStepDefs.createSetsLikeSubNodesAndEndNode,
  helpDocs: HelpDocs.asyncSetsStep
});
registerStepDef(AsyncSetsStepDefs);
const EachStepDefs = CommonStepDefs.createStepNodeConfigurer({
  use: StandardPipelineStepRegisterKey.EACH_SETS,
  prepare: ["and", (def, model) => {
    model.originalContentName = def.originalContentName;
    model.itemName = def.itemName;
  }],
  switchUse: ["keep", ["originalContentName", "itemName"]],
  confirm: ["and", (model, def, _file, options) => {
    return () => {
      CommonStepDefs.confirmSetsLikePipelineStep(def, options);
      if (VUtils.isBlank(model.originalContentName)) {
        delete def.originalContentName;
      } else {
        def.originalContentName = model.originalContentName.trim();
      }
      if (VUtils.isBlank(model.itemName)) {
        delete def.itemName;
      } else {
        def.itemName = model.itemName.trim();
      }
    };
  }],
  survivalAfterConfirm: ["and", (_def, property) => {
    return ["originalContentName", "itemName", "steps", "steps.*", "$diagram.$foldSubSteps"].includes(property);
  }],
  folder: {
    switch: CommonStepDefs.switchFoldWhenSubNodesExist,
    askSubSteps: CommonStepDefs.askSubSteps,
    askSubStepsWithCategory: CommonStepDefs.askSubStepsWithCategory,
    tryToRevealSubStep: CommonStepDefs.tryToRevealSubSteps
  },
  properties: [
    CommonStepDefs.createMainContentElement({
      code: "original-content-name",
      label: Labels.StepEachOriginalContentName,
      anchor: "original-content-name",
      badge: createCheckOrUseDefaultBadge({ check: (model) => VUtils.isNotBlank(model.originalContentName) }),
      editor: createStrEditor({
        getValue: (model) => model.originalContentName,
        setValue: (model, value) => model.originalContentName = value,
        placeholder: "$content"
      }),
      helpDoc: HelpDocs.stepEachOriginalContentName
    }, {
      code: "item-name",
      label: Labels.StepEachItemName,
      anchor: "item-name",
      badge: createCheckOrUseDefaultBadge({ check: (model) => VUtils.isNotBlank(model.itemName) }),
      editor: createStrEditor({
        getValue: (model) => model.itemName,
        setValue: (model, value) => model.itemName = value,
        placeholder: "$item"
      }),
      helpDoc: HelpDocs.stepEachItemName
    })
  ],
  ports: [{ key: "steps", port: CommonStepDefs.prebuiltPorts.steps }],
  createSubNodes: CommonStepDefs.createSetsLikeSubNodesAndEndNode,
  helpDocs: HelpDocs.eachStep
});
registerStepDef(EachStepDefs);
const ParallelStepDefs = CommonStepDefs.createStepNodeConfigurer({
  use: StandardPipelineStepRegisterKey.PARALLEL_SETS,
  prepare: ["and", (def, model) => {
    model.cloneData = def.cloneData;
    model.race = def.race;
  }],
  switchUse: ["keep", ["cloneData", "race"]],
  confirm: ["and", (model, def, _file, _options) => {
    return () => {
      CommonStepDefs.confirmSetsLikePipelineStep(def, _options);
      if (VUtils.isBlank(model.cloneData)) {
        delete def.cloneData;
      } else {
        def.cloneData = model.cloneData.trim();
      }
      if (VUtils.isBlank(model.race)) {
        delete def.race;
      } else {
        def.race = model.race;
      }
    };
  }],
  survivalAfterConfirm: ["and", (_def, property) => {
    return ["cloneData", "race", "steps", "steps.*", "$diagram.$foldSubSteps"].includes(property);
  }],
  folder: {
    switch: CommonStepDefs.switchFoldWhenSubNodesExist,
    askSubSteps: CommonStepDefs.askSubSteps,
    askSubStepsWithCategory: CommonStepDefs.askSubStepsWithCategory,
    tryToRevealSubStep: CommonStepDefs.tryToRevealSubSteps
  },
  properties: [
    CommonStepDefs.createMainContentElement({
      code: "race",
      label: Labels.StepParallelRace,
      anchor: "race",
      badge: createYesOrNoBadge({ check: (model) => model.race === true }),
      editor: createBoolEditor({
        getValue: (model) => model.race,
        setValue: (model, value) => {
          if (value === true) {
            model.race = true;
          } else {
            delete model.race;
          }
        }
      }),
      helpDoc: HelpDocs.stepParallelRace
    }, {
      code: "clone-data",
      label: Labels.StepParallelCloneData,
      anchor: "clone-data",
      badge: createCheckOrIgnoreBadge({ check: (model) => VUtils.isNotBlank(model.snippet) }),
      editor: createSnippetEditor({
        extensionType: JsEditorExtensionType.PARALLEL_CLONE_DATA,
        getValue: (model) => model.cloneData,
        setValue: (model, value) => model.cloneData = value,
        height: PlaygroundCssVars.SNIPPET_PARALLEL_CLONE_DATA_HEIGHT
      }),
      helpDoc: HelpDocs.stepParallelCloneData
    })
  ],
  ports: [
    createPrePortBoolWithKey({
      key: "race",
      label: Labels.StepParallelRace,
      getValue: (model) => model.race
    }),
    { key: "steps", port: CommonStepDefs.prebuiltPorts.steps }
  ],
  createSubNodes: CommonStepDefs.createParallelSubNodesAndEndNode,
  helpDocs: HelpDocs.parallelStep
});
registerStepDef(ParallelStepDefs);
const getParentDef$1 = (model) => {
  return model.getSubOf();
};
const shouldReConfigure$1 = (model) => {
  if (!model.isFirstSubStep()) {
    return false;
  }
  const parentDef = getParentDef$1(model);
  return parentDef.use === StandardPipelineStepRegisterKey.CONDITIONAL_SETS && (parentDef.steps ?? [])[0] === model.step;
};
const ConditionalStepCheckReconfigurer = {
  prepare: (prepare2, model) => {
    if (!shouldReConfigure$1(model)) {
      return void 0;
    }
    const parentDef = getParentDef$1(model);
    return (def) => {
      const model2 = prepare2(def);
      model2.temporary = model2.temporary ?? {};
      model2.temporary.check = parentDef.check;
      return model2;
    };
  },
  confirm: (confirm2, model) => {
    if (!shouldReConfigure$1(model)) {
      return void 0;
    }
    const parentDef = getParentDef$1(model);
    return (model2, def, file, options) => {
      var _a;
      const ret = confirm2(model2, def, file, options);
      parentDef.check = (_a = model2.temporary) == null ? void 0 : _a.check;
      return ret;
    };
  },
  properties: (properties, model) => {
    if (!shouldReConfigure$1(model)) {
      return void 0;
    }
    return CommonStepDefs.reconfigurePropertiesWithRouteCheck(properties, model);
  },
  operators: (operators, node) => {
    if (isFileDef(node.step) || isFileDef(node.getSubOf())) {
      return void 0;
    }
    const parentDef = node.getSubOf();
    if (parentDef.use !== StandardPipelineStepRegisterKey.CONDITIONAL_SETS) {
      return void 0;
    }
    return (node2, def) => {
      const computed = operators(node2, def);
      const parentDef2 = node2.getSubOf();
      const steps = parentDef2.steps ?? [];
      const otherwise = parentDef2.otherwise ?? [];
      if (steps.includes(def) && node2.isFirstSubStep() && otherwise.length === 0) {
        computed.addOtherwise = (node3, _def) => {
          parentDef2.otherwise = [node3.assistant.createDefaultStep()];
          node3.handlers.onChange();
        };
      } else if (otherwise.includes(def)) {
        createNodeOperatorsForStep(otherwise, true, computed);
        if (otherwise[0] === def) {
          computed.removeOtherwise = (node3, _def) => {
            delete parentDef2.otherwise;
            node3.handlers.onChange();
          };
        }
        if (otherwise.length === 1) {
          delete computed.remove;
        }
      }
      return computed;
    };
  }
};
const ConditionalStepDefs = CommonStepDefs.createStepNodeConfigurer({
  use: StandardPipelineStepRegisterKey.CONDITIONAL_SETS,
  confirm: ["and", (_model, def, _file, options) => {
    return () => {
      CommonStepDefs.confirmConditionalPipelineStep(def, options);
    };
  }],
  survivalAfterConfirm: ["and", (_def, property) => {
    return [
      "check",
      "steps",
      "steps.*",
      "otherwise",
      "otherwise.*",
      "$diagram.$foldSubSteps"
    ].includes(property);
  }],
  folder: {
    switch: CommonStepDefs.switchFoldWhenSubNodesExist,
    askSubSteps: (step) => {
      const subSteps = [...step.steps ?? [], ...step.otherwise ?? []];
      return subSteps.length === 0 ? void 0 : subSteps;
    },
    askSubStepsWithCategory: (step) => {
      const { steps = [], otherwise = [] } = step;
      const found = { "if": steps, otherwise };
      Object.keys(found).forEach((key) => {
        if (found[key].length === 0) {
          delete found[key];
        }
      });
      return Object.keys(found).length === 0 ? void 0 : found;
    },
    tryToRevealSubStep: (step, subStep) => {
      return CommonStepDefs.tryToRevealSubSteps(step, subStep, (step2) => {
        return [...step2.steps ?? [], ...step2.otherwise ?? []];
      });
    }
  },
  ports: [{ key: "steps", port: CommonStepDefs.prebuiltPorts.steps }],
  createSubNodes: CommonStepDefs.createConditionalSubNodesAndEndNode,
  helpDocs: HelpDocs.conditionalStep,
  reconfigurer: ConditionalStepCheckReconfigurer,
  firstSubStepPortContainerFind: (step, parent) => {
    var _a, _b;
    if (parent.use !== StandardPipelineStepRegisterKey.CONDITIONAL_SETS) {
      return void 0;
    }
    const isRouteTest = ((_a = parent.steps) == null ? void 0 : _a[0]) === step;
    if (isRouteTest) {
      return FirstSubStepPortForRouteTest;
    }
    const isOtherwise = ((_b = parent.otherwise) == null ? void 0 : _b[0]) === step;
    return isOtherwise ? FirstSubStepPortForOtherwise : void 0;
  }
});
registerStepDef(ConditionalStepDefs);
const getParentDef = (model) => {
  return model.getSubOf();
};
const getRouteOfParentDef = (model) => {
  var _a;
  const parentDef = getParentDef(model);
  if (parentDef.use !== StandardPipelineStepRegisterKey.ROUTES_SETS) {
    return void 0;
  }
  return (_a = parentDef.routes) == null ? void 0 : _a.find((route) => {
    var _a2;
    return ((_a2 = route.steps) == null ? void 0 : _a2[0]) === model.step;
  });
};
const shouldReConfigure = (model) => {
  if (!model.isFirstSubStep()) {
    return false;
  }
  return getRouteOfParentDef(model) != null;
};
const RoutesStepCheckReconfigurer = {
  prepare: (prepare2, model) => {
    if (!shouldReConfigure(model)) {
      return void 0;
    }
    const routeDef = getRouteOfParentDef(model);
    return (def) => {
      const model2 = prepare2(def);
      model2.temporary = model2.temporary ?? {};
      model2.temporary.check = routeDef.check;
      return model2;
    };
  },
  confirm: (confirm2, model) => {
    if (!shouldReConfigure(model)) {
      return void 0;
    }
    const routeDef = getRouteOfParentDef(model);
    return (model2, def, file, options) => {
      var _a;
      const ret = confirm2(model2, def, file, options);
      routeDef.check = (_a = model2.temporary) == null ? void 0 : _a.check;
      return ret;
    };
  },
  properties: (properties, model) => {
    if (!shouldReConfigure(model)) {
      return void 0;
    }
    return CommonStepDefs.reconfigurePropertiesWithRouteCheck(properties, model);
  },
  operators: (operators, node) => {
    if (isFileDef(node.step) || isFileDef(node.getSubOf())) {
      return void 0;
    }
    const parentDef = node.getSubOf();
    if (parentDef.use !== StandardPipelineStepRegisterKey.ROUTES_SETS) {
      return void 0;
    }
    return (node2, def) => {
      const computed = operators(node2, def);
      const parentDef2 = node2.getSubOf();
      const routes = parentDef2.routes ?? [];
      const route = routes.find((route2) => (route2.steps ?? []).includes(def));
      const otherwise = parentDef2.otherwise ?? [];
      if (route != null) {
        const steps = route.steps;
        if (routes.length > 1) {
          createNodeOperatorsForStep(steps, true, computed);
        } else {
          createNodeOperatorsForStep(steps, false, computed);
        }
        if (node2.isFirstSubStep()) {
          computed.prependRoute = (node3, _def) => {
            const index = routes.indexOf(route);
            if (index === 0) {
              routes.unshift({ steps: [node3.assistant.createDefaultStep()] });
            } else {
              routes.splice(index, 0, { steps: [node3.assistant.createDefaultStep()] });
            }
            node3.handlers.onChange();
          };
          computed.appendRoute = (node3, _def) => {
            const index = routes.indexOf(route);
            if (index === steps.length - 1) {
              routes.push({ steps: [node3.assistant.createDefaultStep()] });
            } else {
              routes.splice(index + 1, 0, { steps: [node3.assistant.createDefaultStep()] });
            }
            node3.handlers.onChange();
          };
          if (otherwise.length === 0) {
            computed.addOtherwise = (node3, _def) => {
              parentDef2.otherwise = [node3.assistant.createDefaultStep()];
              node3.handlers.onChange();
            };
          }
          if (routes.length > 1) {
            computed.removeRoute = (node3, _def) => {
              const index = routes.indexOf(route);
              routes.splice(index, 1);
              node3.handlers.onChange();
            };
            if (steps.length === 1) {
              delete computed.remove;
            }
          }
        }
      } else if (otherwise.includes(def)) {
        createNodeOperatorsForStep(otherwise, true, computed);
        computed.prependRoute = (node3, _def) => {
          routes.push({ steps: [node3.assistant.createDefaultStep()] });
          parentDef2.routes = routes;
          node3.handlers.onChange();
        };
        if (otherwise[0] === def) {
          computed.removeOtherwise = (node3, _def) => {
            delete parentDef2.otherwise;
            node3.handlers.onChange();
          };
        }
        if (otherwise.length === 1) {
          delete computed.remove;
        }
      }
      return computed;
    };
  }
};
const RoutesStepDefs = CommonStepDefs.createStepNodeConfigurer({
  use: StandardPipelineStepRegisterKey.ROUTES_SETS,
  confirm: ["and", (_model, def, _file, options) => {
    return () => {
      CommonStepDefs.confirmRoutesPipelineStep(def, options);
    };
  }],
  survivalAfterConfirm: ["and", (_def, property) => {
    return [
      "routes",
      "routes.check",
      "routes.steps",
      "routes.steps.*",
      "otherwise",
      "otherwise.*",
      "$diagram.$foldSubSteps"
    ].includes(property);
  }],
  folder: {
    switch: CommonStepDefs.switchFoldWhenSubNodesExist,
    askSubSteps: (step) => {
      const subSteps = [
        ...(step.routes ?? []).map((route) => route.steps ?? []).flat(),
        ...step.otherwise ?? []
      ];
      return subSteps.length === 0 ? void 0 : subSteps;
    },
    askSubStepsWithCategory: (step) => {
      const found = (step.routes ?? []).reduce((acc, route, index) => {
        acc[`if-${index + 1}`] = route.steps ?? [];
        return acc;
      }, { otherwise: step.otherwise ?? [] });
      Object.keys(found).forEach((key) => {
        if (found[key].length === 0) {
          delete found[key];
        }
      });
      return Object.keys(found).length === 0 ? void 0 : found;
    },
    tryToRevealSubStep: (step, subStep) => {
      return CommonStepDefs.tryToRevealSubSteps(step, subStep, (step2) => {
        return [
          ...(step2.routes ?? []).map((route) => route.steps ?? []).flat(),
          ...step2.otherwise ?? []
        ];
      });
    }
  },
  ports: [{ key: "steps", port: CommonStepDefs.prebuiltPorts.steps }],
  createSubNodes: CommonStepDefs.createRoutesSubNodesAndEndNode,
  helpDocs: HelpDocs.routesStep,
  reconfigurer: RoutesStepCheckReconfigurer,
  firstSubStepPortContainerFind: (step, parent) => {
    var _a, _b;
    if (parent.use !== StandardPipelineStepRegisterKey.ROUTES_SETS) {
      return void 0;
    }
    const isRouteTest = (_a = parent.routes) == null ? void 0 : _a.some((route) => {
      var _a2;
      return ((_a2 = route.steps) == null ? void 0 : _a2[0]) === step;
    });
    if (isRouteTest) {
      return FirstSubStepPortForRouteTest;
    }
    const isOtherwise = ((_b = parent.otherwise) == null ? void 0 : _b[0]) === step;
    return isOtherwise ? FirstSubStepPortForOtherwise : void 0;
  }
});
registerStepDef(RoutesStepDefs);
const askDatasourceOptions = (assistant) => (assistant.askTypeOrmDatasources() ?? []).map((datasource) => {
  return { value: datasource.code, label: VUtils.blankThen(datasource.name, datasource.code) };
});
const DatasourceDropdown = createDropdownOnAssistantEditor({
  getValue: (model) => model.datasource,
  setValue: (model, value) => model.datasource = value,
  askOptions: askDatasourceOptions
});
const DatasourceEditorContainer = qe.div`
    display: flex;
    position: relative;
    height: ${CssVars.INPUT_HEIGHT};

    > div[data-w=d9-checkboxes] {
        border: ${CssVars.BORDER};
        /* noinspection CssReplaceWithShorthandSafely */
        border-right-width: 0;
        border-top-left-radius: ${CssVars.BORDER_RADIUS};
        border-bottom-left-radius: ${CssVars.BORDER_RADIUS};

        > span[data-w="d9-checkboxes-option"]:first-child {
            padding-right: calc(${CssVars.INPUT_INDENT} + 4px);
            margin-left: 0;
            margin-right: 0;
            min-height: calc(${CssVars.INPUT_HEIGHT} - ${CssVars.BORDER_WIDTH} * 2);
            padding-top: 0;
            padding-bottom: 0;
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;

            > div[data-w=d9-checkbox] {
                transform: scale(0.8);
            }
        }
    }

    > div[data-w=d9-dropdown] {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    > input {
        flex-grow: unset;
        min-width: 250px;
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    &[data-by-envs=true] {
        > div[data-w=d9-dropdown] {
            display: none;
        }
    }

    &[data-by-envs=false] {
        > input {
            display: none;
        }
    }
`;
const DatasourceEditor = (props) => {
  var _a, _b;
  const { model, onValueChanged } = props;
  const inputRef = reactExports.useRef(null);
  const onDatasourceTypeChange = (value) => {
    var _a2;
    if (value === true) {
      model.temporary = { ...model.temporary ?? {}, datasourceByEnvs: true, datasourceCode: model.datasource };
      model.datasource = `env:${model.temporary.datasourceEnvKey ?? ""}`;
      setTimeout(() => {
        var _a3;
        return (_a3 = inputRef.current) == null ? void 0 : _a3.focus();
      }, 50);
    } else {
      model.temporary = {
        ...model.temporary ?? {},
        datasourceByEnvs: false,
        datasourceEnvKey: (model.datasource ?? "").substring(4)
      };
      model.datasource = (_a2 = model.temporary) == null ? void 0 : _a2.datasourceCode;
    }
    onValueChanged();
  };
  const onEnvKeyChange = (value) => {
    model.datasource = `env:${value ?? ""}`;
    onValueChanged();
  };
  const envKey = ((_a = model.temporary) == null ? void 0 : _a.datasourceByEnvs) === true ? (model.datasource ?? "").substring(4) : "";
  return React.createElement(
    DatasourceEditorContainer,
    { "data-by-envs": ((_b = model.temporary) == null ? void 0 : _b.datasourceByEnvs) === true },
    React.createElement(UnwrappedCheckboxes, { onValueChange: onDatasourceTypeChange, value: model.temporary.datasourceByEnvs ?? false, options: [{ value: true, label: Labels.DatasourceByEnv }], single: true, boolOnSingle: true }),
    React.createElement(UnwrappedInput, { value: envKey, onValueChange: onEnvKeyChange, ref: inputRef }),
    React.createElement(DatasourceDropdown, { ...props })
  );
};
const elementDatasource = {
  code: "datasource",
  label: Labels.StepTypeOrmDatasource,
  anchor: "datasource",
  badge: createCheckOrMissBadge({ check: (model) => VUtils.isNotBlank(model.datasource) }),
  editor: DatasourceEditor,
  helpDoc: HelpDocs.stepTypeOrmDatasource
};
const elementTransaction = {
  code: "transaction",
  label: Labels.StepTypeOrmTransaction,
  anchor: "transaction",
  badge: createCheckOrMissBadge({ check: (model) => VUtils.isNotBlank(model.transaction) }),
  editor: createStrEditor({
    getValue: (model) => model.transaction,
    setValue: (model, value) => model.transaction = value,
    placeholder: "$default-transaction"
  }),
  helpDoc: HelpDocs.stepTypeOrmTransaction
};
const AutonomousOrTransactionEditor = (props) => {
  const { model, onValueChanged } = props;
  const inputRef = reactExports.useRef(null);
  const onAutonomousChange = (value) => {
    if (value === true) {
      model.autonomous = true;
    } else {
      model.autonomous = false;
      setTimeout(() => {
        var _a, _b;
        return (_b = (_a = inputRef.current) == null ? void 0 : _a.querySelector("input")) == null ? void 0 : _b.focus();
      }, 50);
    }
    onValueChanged();
  };
  const onTransactionChange = (value) => {
    model.transaction = value;
    onValueChanged();
  };
  const autonomousCheck = [
    React.createElement(UnwrappedCheckboxes, { onValueChange: onAutonomousChange, value: model.autonomous ?? false, options: [{ value: true, label: Labels.TransactionAutonomous }], single: true, boolOnSingle: true })
  ];
  return React.createElement(
    CheckAndValueEditor,
    { inputWidth: 250 },
    React.createElement(UnwrappedDecorateInput, { leads: autonomousCheck, value: model.transaction ?? "", onValueChange: onTransactionChange, disabled: model.autonomous === true, placeholder: "$default-transaction", ref: inputRef })
  );
};
const elementAutonomousOrTransaction = {
  code: "transaction",
  label: Labels.StepTypeOrmTransaction,
  anchor: "transaction",
  badge: (model) => {
    const { autonomous, transaction } = model;
    if (autonomous === true) {
      return Labels.TransactionAutonomous;
    } else if (VUtils.isBlank(transaction)) {
      return React.createElement(ConfigurableElementBadgeMissed, null);
    } else {
      return React.createElement(ConfigurableElementBadgeChecked, null);
    }
  },
  editor: AutonomousOrTransactionEditor,
  helpDoc: HelpDocs.stepTypeOrmAutonomousOrTransaction
};
const PortDatasource = (props) => {
  const { step: model, node: { assistant } } = props;
  const { datasource } = model;
  if (VUtils.isBlank(datasource)) {
    return React.createElement(PrePort, { label: Labels.StepTypeOrmDatasource, required: true, defined: false });
  }
  if (datasource.startsWith("env:")) {
    const key = datasource.substring(4);
    if (VUtils.isBlank(key)) {
      return React.createElement(PrePort, { label: Labels.StepTypeOrmDatasource, required: true, defined: false });
    } else {
      return React.createElement(PrePort, { label: Labels.StepTypeOrmDatasource, required: true, defined: true, all: true, allAsGiven: key });
    }
  } else {
    const found = (assistant.askTypeOrmDatasources() ?? []).find((ds) => ds.code === datasource);
    if (found != null) {
      return React.createElement(PrePort, { label: found.name || found.code, required: true, defined: true });
    } else {
      return React.createElement(PrePort, { label: Labels.StepTypeOrmDatasource, required: true, defined: false });
    }
  }
};
const PortTransaction = (props) => {
  const { step: def } = props;
  const { transaction } = def;
  if (VUtils.isNotBlank(transaction)) {
    return React.createElement(PrePort, { label: Labels.StepTypeOrmTransaction, required: true, defined: true, all: true, allAsGiven: transaction.trim() });
  } else {
    return React.createElement(PrePort, { label: Labels.StepTypeOrmTransaction, required: true, defined: false });
  }
};
const PortTransactionWithAutonomous = (props) => {
  const { step: model } = props;
  const { autonomous, transaction } = model;
  if (autonomous === true) {
    return React.createElement(PrePort, { label: Labels.TransactionAutonomous, required: true, defined: true });
  } else if (VUtils.isNotBlank(transaction)) {
    return React.createElement(PrePort, { label: Labels.StepTypeOrmTransaction, required: true, defined: true, all: true, allAsGiven: transaction.trim() });
  } else {
    return React.createElement(PrePort, { label: Labels.StepTypeOrmTransaction, required: true, defined: false });
  }
};
const prepare = (and) => {
  return (def, model) => {
    model.datasource = def.datasource;
    if ((model.datasource ?? "").startsWith("env:")) {
      model.temporary = { ...model.temporary ?? { datasourceByEnvs: true } };
      model.temporary.datasourceEnvKey = model.datasource.substring(4);
    }
    model.transaction = def.transaction;
    if (and != null) {
      and(def, model);
    }
  };
};
const prepareWithAutonomous = (and) => {
  return (def, model) => {
    prepare((def2, model2) => {
      model2.autonomous = def2.autonomous;
      if (and != null) {
        and(def2, model2);
      }
    })(def, model);
  };
};
const switchUse = ["datasource", "transaction"];
const switchUseWithAutonomous = [...switchUse, "autonomous"];
const confirm = (and) => {
  return (model, def, file, options) => {
    const invalidAnchors = [];
    let andCommit = null;
    if (and != null) {
      andCommit = and(model, def, file, options);
      if (Array.isArray(andCommit)) {
        return [...invalidAnchors, ...andCommit];
      }
    }
    return () => {
      def.datasource = model.datasource;
      def.transaction = model.transaction;
      if (andCommit != null) {
        andCommit();
      }
    };
  };
};
const confirmWithAutonomous = (and) => {
  return (model, def, file, options) => {
    return confirm((model2, def2, file2, options2) => {
      const invalidAnchors = [];
      let andCommit = null;
      if (and != null) {
        andCommit = and(model2, def2, file2, options2);
        if (Array.isArray(andCommit)) {
          return [...invalidAnchors, ...andCommit];
        }
      }
      return () => {
        def2.autonomous = model2.autonomous;
        if (andCommit != null) {
          andCommit();
        }
      };
    })(model, def, file, options);
  };
};
const createTypeOrmWithAutonomousStepDefs = (options) => {
  const { use, andPrepare, keepPropertiesOnUseSwitch, andConfirm, survivalProperties, properties, ports = [], helpDocs } = options;
  return CommonStepDefs.createStepNodeConfigurer({
    use,
    prepare: ["and", prepareWithAutonomous(andPrepare)],
    switchUse: ["keep", [...switchUseWithAutonomous, ...keepPropertiesOnUseSwitch ?? []]],
    confirm: ["and", confirmWithAutonomous(andConfirm)],
    survivalAfterConfirm: ["and", (_def, property) => {
      return [...switchUseWithAutonomous, ...survivalProperties].includes(property);
    }],
    properties: [CommonStepDefs.createMainContentElement(elementDatasource, elementAutonomousOrTransaction, ...properties ?? [])],
    ports: [
      { key: "datasource", port: PortDatasource },
      { key: "transaction", port: PortTransactionWithAutonomous },
      ...ports ?? []
    ],
    helpDocs
  });
};
const TypeOrmBySnippetStepDefs = createTypeOrmWithAutonomousStepDefs({
  use: StandardPipelineStepRegisterKey.TYPEORM_BY_SNIPPET,
  andPrepare: (def, model) => model.snippet = def.snippet,
  keepPropertiesOnUseSwitch: ["snippet"],
  andConfirm: (model, def, _file, _options) => {
    return () => def.snippet = model.snippet;
  },
  survivalProperties: ["snippet"],
  properties: [{
    code: "snippet",
    label: Labels.StepTypeOrmSnippet,
    anchor: "snippet",
    badge: createCheckOrMissBadge({ check: (model) => VUtils.isNotBlank(model.snippet) }),
    editor: createSnippetEditor({
      extensionType: JsEditorExtensionType.TYPEORM_SNIPPET,
      getValue: (model) => model.snippet,
      setValue: (model, value) => model.snippet = value,
      height: PlaygroundCssVars.SNIPPET_HEIGHT
    }),
    helpDoc: HelpDocs.stepTypeOrmSnippet
  }],
  ports: [createPrePortExistsWithKey({
    key: "snippet",
    label: Labels.StepTypeOrmSnippet,
    getValue: (model) => model.snippet
  })],
  helpDocs: HelpDocs.typeOrmBySnippetStep
});
registerStepDef(TypeOrmBySnippetStepDefs);
const createTypeOrmBySqlPipelineStepDefs = (options) => {
  const { use, sqlHelpDocs, stepHelpDocs } = options;
  const defs = createTypeOrmWithAutonomousStepDefs({
    use,
    andPrepare: (def, model) => {
      model.sql = def.sql;
      model.temporary = model.temporary || {};
      if (VUtils.isBlank(model.sql) || model.sql === "@ignore") {
        model.temporary.sqlByParams;
        delete model.sql;
      }
    },
    keepPropertiesOnUseSwitch: ["sql"],
    andConfirm: (model, def, _file, _options) => {
      return () => {
        var _a;
        if (((_a = model.temporary) == null ? void 0 : _a.sqlByParams) === true) {
          def.sql = "@ignore";
        } else {
          def.sql = model.sql;
        }
      };
    },
    survivalProperties: ["sql"],
    properties: [{
      code: "sql",
      label: Labels.StepTypeOrmSql,
      anchor: "sql",
      badge: (model) => {
        var _a;
        if (((_a = model.temporary) == null ? void 0 : _a.sqlByParams) === true) {
          return Labels.StepTypeOrmSqlByParams;
        } else if (VUtils.isNotBlank(model.sql)) {
          return React.createElement(ConfigurableElementBadgeChecked, null);
        } else {
          return React.createElement(ConfigurableElementBadgeMissed, null);
        }
      },
      editor: createSelectableSqlEditor({
        findFlag: (model) => {
          var _a;
          return ((_a = model.temporary) == null ? void 0 : _a.sqlByParams) ?? false;
        },
        saveFlag: (model, value) => model.temporary = { ...model.temporary ?? {}, sqlByParams: value },
        findSnippet: (model) => model.sql,
        saveSnippet: (model, text) => model.sql = text,
        flagCandidates: [
          { value: false, label: Labels.StepTypeOrmSqlPredefined },
          { value: true, label: Labels.StepTypeOrmSqlByParams }
        ],
        isSnippetAvailable: (value) => value !== true,
        height: PlaygroundCssVars.SQL_HEIGHT
      }),
      helpDoc: sqlHelpDocs
    }],
    ports: [createPrePortExistsWithKey({
      key: "snippet",
      label: Labels.StepTypeOrmSql,
      getValue: (model) => model.sql
    })],
    helpDocs: stepHelpDocs
  });
  registerStepDef(defs);
  return defs;
};
createTypeOrmBySqlPipelineStepDefs({
  use: StandardPipelineStepRegisterKey.TYPEORM_BULK_SAVE_BY_SQL,
  sqlHelpDocs: HelpDocs.stepTypeOrmBulkSaveBySqlSql,
  stepHelpDocs: HelpDocs.typeOrmBulkSaveBySqlStep
});
createTypeOrmBySqlPipelineStepDefs({
  use: StandardPipelineStepRegisterKey.TYPEORM_SAVE_BY_SQL,
  sqlHelpDocs: HelpDocs.stepTypeOrmSaveBySqlSql,
  stepHelpDocs: HelpDocs.typeOrmSaveBySqlStep
});
createTypeOrmBySqlPipelineStepDefs({
  use: StandardPipelineStepRegisterKey.TYPEORM_LOAD_MANY_BY_SQL,
  sqlHelpDocs: HelpDocs.stepTypeOrmLoadManyBySqlSql,
  stepHelpDocs: HelpDocs.typeOrmLoadManyBySqlStep
});
createTypeOrmBySqlPipelineStepDefs({
  use: StandardPipelineStepRegisterKey.TYPEORM_LOAD_ONE_BY_SQL,
  sqlHelpDocs: HelpDocs.stepTypeOrmLoadOneBySqlSql,
  stepHelpDocs: HelpDocs.typeOrmLoadOneBySqlStep
});
const TypeOrmTransactionalStepDefs = CommonStepDefs.createStepNodeConfigurer({
  use: StandardPipelineStepRegisterKey.TYPEORM_TRANSACTIONAL,
  prepare: ["and", prepare()],
  switchUse: ["keep", switchUse],
  confirm: ["and", confirm((_model, def, _file, options) => {
    return () => {
      CommonStepDefs.confirmSetsLikePipelineStep(def, options);
    };
  })],
  survivalAfterConfirm: ["and", (_def, property) => {
    return switchUse.includes(property);
  }],
  folder: {
    switch: CommonStepDefs.switchFoldWhenSubNodesExist,
    askSubSteps: CommonStepDefs.askSubSteps,
    askSubStepsWithCategory: CommonStepDefs.askSubStepsWithCategory,
    tryToRevealSubStep: CommonStepDefs.tryToRevealSubSteps
  },
  properties: [CommonStepDefs.createMainContentElement(elementDatasource, elementTransaction)],
  ports: [
    { key: "datasource", port: PortDatasource },
    { key: "transaction", port: PortTransaction },
    { key: "steps", port: CommonStepDefs.prebuiltPorts.steps }
  ],
  createSubNodes: CommonStepDefs.createSetsLikeSubNodesAndEndNode,
  helpDocs: HelpDocs.typeOrmTransactionalStep
});
registerStepDef(TypeOrmTransactionalStepDefs);
const createRefOnCodeStepDefs = (options) => {
  const { use, label, askRefOptions, elementCodeHelpDoc, stepHelpDoc } = options;
  return CommonStepDefs.createStepNodeConfigurer({
    use,
    prepare: ["and", (def, model) => model.ref = def.ref],
    switchUse: ["keep", ["ref"]],
    confirm: ["and", (model, def, _file, _options) => {
      return () => def.ref = (model.ref ?? "").trim();
    }],
    survivalAfterConfirm: ["and", (_def, property) => {
      return ["ref"].includes(property);
    }],
    properties: [
      CommonStepDefs.createMainContentElement({
        code: "ref",
        label,
        anchor: "ref",
        badge: createCheckOrMissBadge({ check: (model) => VUtils.isNotBlank(model.ref) }),
        editor: createDropdownOnAssistantEditor({
          getValue: (model) => model.ref,
          setValue: (model, value) => model.ref = value,
          askOptions: askRefOptions
        }),
        helpDoc: elementCodeHelpDoc
      })
    ],
    ports: [
      createPrePortOnAssistantWithKey({
        key: "ref",
        label,
        getValue: (model) => model.ref,
        askOptions: askRefOptions
      })
    ],
    helpDocs: stepHelpDoc
  });
};
const RefPipelineStepDefs = createRefOnCodeStepDefs({
  use: StandardPipelineStepRegisterKey.REF_PIPELINE,
  askRefOptions: (assistant) => {
    return (assistant.askRefPipelines() ?? []).map((pipeline) => {
      return { value: pipeline.code, label: VUtils.blankThen(pipeline.name, pipeline.code) };
    });
  },
  elementCodeHelpDoc: HelpDocs.stepRefPipelineCode,
  label: Labels.StepRefPipelineCode,
  stepHelpDoc: HelpDocs.refPipelineStep
});
registerStepDef(RefPipelineStepDefs);
const RefStepStepDefs = createRefOnCodeStepDefs({
  use: StandardPipelineStepRegisterKey.REF_STEP,
  askRefOptions: (assistant) => {
    return (assistant.askRefSteps() ?? []).map((pipeline) => {
      return { value: pipeline.code, label: VUtils.blankThen(pipeline.name, pipeline.code) };
    });
  },
  elementCodeHelpDoc: HelpDocs.stepRefStepCode,
  label: Labels.StepRefStepCode,
  stepHelpDoc: HelpDocs.refStepStep
});
registerStepDef(RefStepStepDefs);
const DEFAULT_CREATE_SUB_STEP_NODES = (node, options) => {
  var _a;
  return (_a = findStepDef(node.step.use)) == null ? void 0 : _a.createSubNodes(node, options);
};
const DEFAULTS = {
  diagram: {
    startTop: 64,
    startLeft: 64,
    rowGap: 64,
    columnGap: 128,
    linkArcRadius: 8,
    linkGutterSize: 8,
    linkJoinEndSinkingOffset: 24,
    linkJoinEndGutterSize: 16
  },
  createDefaultStep: () => {
    return {
      name: "",
      use: StandardPipelineStepRegisterKey.SNIPPET,
      fromInput: "$factor",
      toOutput: "$result",
      merge: true
    };
  },
  createSubStepNodes: DEFAULT_CREATE_SUB_STEP_NODES
};
const PlaygroundBridge = (props) => {
  const { content, onContentChanged } = props;
  const { on, off } = usePlaygroundEventBus();
  reactExports.useEffect(() => {
    const onChanged = (changed) => {
      if ((content ?? "") === (changed ?? "")) {
        return;
      }
      (async () => await onContentChanged(changed))();
    };
    on(PlaygroundEventTypes.CONTENT_CHANGED, onChanged);
    return () => {
      off(PlaygroundEventTypes.CONTENT_CHANGED, onChanged);
    };
  }, [on, off, content, onContentChanged]);
  return React.createElement(reactExports.Fragment, null);
};
const PlaygroundWrapper = qe.div.attrs(() => {
  return {
    [DOM_KEY_WIDGET]: "o23-playground",
    style: {
      "--min-height": "500px",
      "--grid-columns": `1fr`,
      "--grid-rows": "1fr"
    }
  };
})`
    display: grid;
    position: relative;
    grid-column: var(--grid-column);
    grid-row: var(--grid-row);
    grid-template-columns: var(--grid-columns);
    grid-template-rows: var(--grid-rows);
    min-height: var(--min-height);
    height: var(--min-height);
    border: ${CssVars.BORDER};
    border-radius: ${CssVars.BORDER_RADIUS};
    overflow: hidden;

    &[data-visible=false] {
        display: none;
    }

    &[data-diagram-work-mode] {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: ${CssVars.BACKGROUND_COLOR};
        border: 0;
        border-radius: 0;
        z-index: ${PlaygroundCssVars.EDITOR_MAX_Z_INDEX};
    }
`;
const PlaygroundDelegate = (props) => {
  const { $pp, $wrapped, assistant, decorator, serializer, deserializer, allowUploadFile = false, allowDownloadFile = true, allowDownloadImage = true, maxMode = true, zenMode = true, ...rest } = props;
  const { $p2r, $onValueChange, $avs: { $disabled, $visible } } = $wrapped;
  const ref = reactExports.useRef(null);
  const globalHandlers = useGlobalHandlers();
  const { on, off } = usePlaygroundEventBus();
  const [state, setState] = reactExports.useState(() => {
    return {
      serializer: serializer ?? new YamlDefSaver(),
      deserializer: deserializer ?? new YamlDefLoader()
    };
  });
  reactExports.useEffect(() => {
    if ((serializer == null || serializer !== state.serializer) && (deserializer == null || deserializer !== state.deserializer)) {
      return;
    }
    setState((state2) => {
      return {
        ...state2,
        serializer: serializer ?? state2.serializer,
        deserializer: deserializer ?? state2.deserializer
      };
    });
  }, [serializer, deserializer, state.serializer, state.deserializer]);
  reactExports.useEffect(() => {
    const onResetContent = async (content2) => {
      await $onValueChange(content2, true, { global: globalHandlers });
    };
    on(PlaygroundEventTypes.RESET_CONTENT, onResetContent);
    return () => {
      off(PlaygroundEventTypes.RESET_CONTENT, onResetContent);
    };
  }, [on, off, globalHandlers, $onValueChange]);
  const onContentChanged = async (content2) => {
    await $onValueChange(content2, false, { global: globalHandlers });
  };
  const content = MUtils.getValue($wrapped.$model, $pp);
  return React.createElement(
    PlaygroundWrapper,
    { ...rest, "data-disabled": $disabled, "data-visible": $visible, id: PPUtils.asId(PPUtils.absolute($p2r, $pp), props.id), ref },
    React.createElement(EditDialog, null),
    React.createElement(PlaygroundBridge, { content, onContentChanged }),
    React.createElement(Editor, { content, assistant, decorator, serializer: state.serializer, deserializer: state.deserializer, allowUploadFile, allowDownloadFile, allowDownloadImage, maxMode, zenMode })
  );
};
const Playground = (props) => {
  return React.createElement(
    PlaygroundEventBusProvider,
    null,
    React.createElement(PlaygroundDelegate, { ...props })
  );
};
const PlaygroundCreateDefaultStepBuild = {
  accept: (key) => key === "defaultStep",
  build: (value, list) => {
    if (VUtils.isBlank(value)) {
      return void 0;
    }
    return index$1.createSyncSnippetBuild("createDefaultStep", []).build(value, list);
  }
};
const PlaygroundAskSystemsForHttpBuild = {
  accept: (key) => key === "httpSystems",
  build: (value, list) => {
    if (VUtils.isBlank(value)) {
      return void 0;
    }
    return index$1.createSyncSnippetBuild("askSystemsForHttp", []).build(value, list);
  }
};
const PlaygroundAskTypeOrmDatasourcesBuild = {
  accept: (key) => key === "typeOrmDatasources",
  build: (value, list) => {
    if (VUtils.isBlank(value)) {
      return void 0;
    }
    return index$1.createSyncSnippetBuild("askTypeOrmDatasources", []).build(value, list);
  }
};
const PlaygroundAskRefPipelinesBuild = {
  accept: (key) => key === "refPipelines",
  build: (value, list) => {
    if (VUtils.isBlank(value)) {
      return void 0;
    }
    return index$1.createSyncSnippetBuild("askRefPipelines", []).build(value, list);
  }
};
const PlaygroundAskRefStepsBuild = {
  accept: (key) => key === "refSteps",
  build: (value, list) => {
    if (VUtils.isBlank(value)) {
      return void 0;
    }
    return index$1.createSyncSnippetBuild("askRefSteps", []).build(value, list);
  }
};
const PlaygroundThemeBuild = index$1.createSyncSnippetBuild("theme", ["theme"]);
class AbstractPlaygroundTranslator extends index$1.SpecificWidgetTranslator {
  beautifyProperties(def) {
    return super.beautifyProperties(this.beautifyColumnSpan(def, 12));
  }
  shouldWrapByFormCell() {
    return false;
  }
  getAttributeValueBuilders() {
    return [
      PlaygroundCreateDefaultStepBuild,
      PlaygroundAskSystemsForHttpBuild,
      PlaygroundAskTypeOrmDatasourcesBuild,
      PlaygroundAskRefPipelinesBuild,
      PlaygroundAskRefStepsBuild,
      PlaygroundThemeBuild
    ];
  }
  getAttributeNamesMapping() {
    const type = this.getSupportedType();
    return {
      [`${type}.defaultStep`]: "assistant.createDefaultStep",
      [`${type}.httpSystems`]: "assistant.askSystemsForHttp",
      [`${type}.typeOrmDatasources`]: "assistant.askTypeOrmDatasources",
      [`${type}.refPipelines`]: "assistant.askRefPipelines",
      [`${type}.refSteps`]: "assistant.askRefSteps",
      [`${type}.theme`]: "decorator.theme"
    };
  }
}
const registerPlayground = (widgetHelper, widgetType) => {
  widgetType = VUtils.isBlank(widgetType) ? "O23Playground" : widgetType;
  registerWidget({ key: widgetType, JSX: Playground, container: false, array: false });
  const TranslatorClass = class extends AbstractPlaygroundTranslator {
    getSupportedType() {
      return widgetType;
    }
  };
  const repo = widgetHelper.repository;
  repo.register(new TranslatorClass(repo));
};
export {
  createCodeMirrorTs562Es2022Extensions as c,
  registerPlayground as r
};
