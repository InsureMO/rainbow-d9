// Type definitions for decimal.js >=7.0.0
// Project: https://github.com/MikeMcl/decimal.js
// Definitions by: Michael Mclaughlin <https://github.com/MikeMcl>
// Definitions: https://github.com/MikeMcl/decimal.js
//
// Documentation: http://mikemcl.github.io/decimal.js/
//
// Exports:
//
//   class     Decimal (default export)
//   type      Constructor
//   type      Decimal.Instance
//   type      Decimal.Modulo
//   type      Rounding
//   type      Value
//   interface Config
//
// Example (alternative syntax commented-out):
//
//   import {Decimal} from "decimal.js"
//   //import Decimal from "decimal.js"
//
//   let r: Rounding = Decimal.ROUND_UP;
//   let c: Configuration = {precision: 4, rounding: r};
//   Decimal.set(c);
//   let v: Value = '12345.6789';
//   let d: Decimal = new Decimal(v);
//   //let d: Decimal.Instance = new Decimal(v);
//
// The use of compiler option `--strictNullChecks` is recommended.

declare namespace decimal {
	type Constructor = typeof Decimal;
	type Instance = Decimal;
	type Rounding = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
	type Modulo = Rounding | 9;
	type Value = string | number | Decimal;

	// http://mikemcl.github.io/decimal.js/#constructor-properties
	interface Config {
		precision?: number;
		rounding?: Rounding;
		toExpNeg?: number;
		toExpPos?: number;
		minE?: number;
		maxE?: number;
		crypto?: boolean;
		modulo?: Modulo;
		defaults?: boolean;
	}

	export class Decimal {
		readonly d: number[];
		readonly e: number;
		readonly s: number;

		constructor(n: Value);

		absoluteValue(): Decimal;

		abs(): Decimal;

		ceil(): Decimal;

		clampedTo(min: Value, max: Value): Decimal;

		clamp(min: Value, max: Value): Decimal;

		comparedTo(n: Value): number;

		cmp(n: Value): number;

		cosine(): Decimal;

		cos(): Decimal;

		cubeRoot(): Decimal;

		cbrt(): Decimal;

		decimalPlaces(): number;

		dp(): number;

		dividedBy(n: Value): Decimal;

		div(n: Value): Decimal;

		dividedToIntegerBy(n: Value): Decimal;

		divToInt(n: Value): Decimal;

		equals(n: Value): boolean;

		eq(n: Value): boolean;

		floor(): Decimal;

		greaterThan(n: Value): boolean;

		gt(n: Value): boolean;

		greaterThanOrEqualTo(n: Value): boolean;

		gte(n: Value): boolean;

		hyperbolicCosine(): Decimal;

		cosh(): Decimal;

		hyperbolicSine(): Decimal;

		sinh(): Decimal;

		hyperbolicTangent(): Decimal;

		tanh(): Decimal;

		inverseCosine(): Decimal;

		acos(): Decimal;

		inverseHyperbolicCosine(): Decimal;

		acosh(): Decimal;

		inverseHyperbolicSine(): Decimal;

		asinh(): Decimal;

		inverseHyperbolicTangent(): Decimal;

		atanh(): Decimal;

		inverseSine(): Decimal;

		asin(): Decimal;

		inverseTangent(): Decimal;

		atan(): Decimal;

		isFinite(): boolean;

		isInteger(): boolean;

		isInt(): boolean;

		isNaN(): boolean;

		isNegative(): boolean;

		isNeg(): boolean;

		isPositive(): boolean;

		isPos(): boolean;

		isZero(): boolean;

		lessThan(n: Value): boolean;

		lt(n: Value): boolean;

		lessThanOrEqualTo(n: Value): boolean;

		lte(n: Value): boolean;

		logarithm(n?: Value): Decimal;

		log(n?: Value): Decimal;

		minus(n: Value): Decimal;

		sub(n: Value): Decimal;

		modulo(n: Value): Decimal;

		mod(n: Value): Decimal;

		naturalExponential(): Decimal;

		exp(): Decimal;

		naturalLogarithm(): Decimal;

		ln(): Decimal;

		negated(): Decimal;

		neg(): Decimal;

		plus(n: Value): Decimal;

		add(n: Value): Decimal;

		precision(includeZeros?: boolean): number;

		sd(includeZeros?: boolean): number;

		round(): Decimal;

		sine(): Decimal;

		sin(): Decimal;

		squareRoot(): Decimal;

		sqrt(): Decimal;

		tangent(): Decimal;

		tan(): Decimal;

		times(n: Value): Decimal;

		mul(n: Value): Decimal;

		toBinary(significantDigits?: number): string;
		toBinary(significantDigits: number, rounding: Rounding): string;

		toDecimalPlaces(decimalPlaces?: number): Decimal;
		toDecimalPlaces(decimalPlaces: number, rounding: Rounding): Decimal;

		toDP(decimalPlaces?: number): Decimal;
		toDP(decimalPlaces: number, rounding: Rounding): Decimal;

		toExponential(decimalPlaces?: number): string;
		toExponential(decimalPlaces: number, rounding: Rounding): string;

		toFixed(decimalPlaces?: number): string;
		toFixed(decimalPlaces: number, rounding: Rounding): string;

		toFraction(max_denominator?: Value): Decimal[];

		toHexadecimal(significantDigits?: number): string;
		toHexadecimal(significantDigits: number, rounding: Rounding): string;

		toHex(significantDigits?: number): string;
		toHex(significantDigits: number, rounding?: Rounding): string;

		toJSON(): string;

		toNearest(n: Value, rounding?: Rounding): Decimal;

		toNumber(): number;

		toOctal(significantDigits?: number): string;
		toOctal(significantDigits: number, rounding: Rounding): string;

		toPower(n: Value): Decimal;

		pow(n: Value): Decimal;

		toPrecision(significantDigits?: number): string;
		toPrecision(significantDigits: number, rounding: Rounding): string;

		toSignificantDigits(significantDigits?: number): Decimal;
		toSignificantDigits(significantDigits: number, rounding: Rounding): Decimal;

		toSD(significantDigits?: number): Decimal;
		toSD(significantDigits: number, rounding: Rounding): Decimal;

		toString(): string;

		truncated(): Decimal;

		trunc(): Decimal;

		valueOf(): string;

		static abs(n: Value): Decimal;

		static acos(n: Value): Decimal;

		static acosh(n: Value): Decimal;

		static add(x: Value, y: Value): Decimal;

		static asin(n: Value): Decimal;

		static asinh(n: Value): Decimal;

		static atan(n: Value): Decimal;

		static atanh(n: Value): Decimal;

		static atan2(y: Value, x: Value): Decimal;

		static cbrt(n: Value): Decimal;

		static ceil(n: Value): Decimal;

		static clamp(n: Value, min: Value, max: Value): Decimal;

		static clone(object?: Config): Constructor;

		static config(object: Config): Constructor;

		static cos(n: Value): Decimal;

		static cosh(n: Value): Decimal;

		static div(x: Value, y: Value): Decimal;

		static exp(n: Value): Decimal;

		static floor(n: Value): Decimal;

		static hypot(...n: Value[]): Decimal;

		static isDecimal(object: any): object is Decimal;

		static ln(n: Value): Decimal;

		static log(n: Value, base?: Value): Decimal;

		static log2(n: Value): Decimal;

		static log10(n: Value): Decimal;

		static max(...n: Value[]): Decimal;

		static min(...n: Value[]): Decimal;

		static mod(x: Value, y: Value): Decimal;

		static mul(x: Value, y: Value): Decimal;

		static noConflict(): Constructor;   // Browser only
		static pow(base: Value, exponent: Value): Decimal;

		static random(significantDigits?: number): Decimal;

		static round(n: Value): Decimal;

		static set(object: Config): Constructor;

		static sign(n: Value): number;

		static sin(n: Value): Decimal;

		static sinh(n: Value): Decimal;

		static sqrt(n: Value): Decimal;

		static sub(x: Value, y: Value): Decimal;

		static sum(...n: Value[]): Decimal;

		static tan(n: Value): Decimal;

		static tanh(n: Value): Decimal;

		static trunc(n: Value): Decimal;

		static readonly default?: Constructor;
		static readonly Decimal?: Constructor;

		static readonly precision: number;
		static readonly rounding: Rounding;
		static readonly toExpNeg: number;
		static readonly toExpPos: number;
		static readonly minE: number;
		static readonly maxE: number;
		static readonly crypto: boolean;
		static readonly modulo: Modulo;

		static readonly ROUND_UP: 0;
		static readonly ROUND_DOWN: 1;
		static readonly ROUND_CEIL: 2;
		static readonly ROUND_FLOOR: 3;
		static readonly ROUND_HALF_UP: 4;
		static readonly ROUND_HALF_DOWN: 5;
		static readonly ROUND_HALF_EVEN: 6;
		static readonly ROUND_HALF_CEIL: 7;
		static readonly ROUND_HALF_FLOOR: 8;
		static readonly EUCLID: 9;
	}
}
